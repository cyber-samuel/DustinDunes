{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4","program":"/Users/samv/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","image","--edition=2018","/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","-C","metadata=8f85c4432f36dc11","-C","extra-filename=-8f85c4432f36dc11","--out-dir","/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps","-L","dependency=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps","--extern","bytemuck=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libbytemuck-1f08b3b4edfa19c6.rmeta","--extern","byteorder=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libbyteorder-2b1156764a2eea26.rmeta","--extern","color_quant=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libcolor_quant-59d26a0283759e7a.rmeta","--extern","jpeg=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libjpeg_decoder-aa4ce96262d37689.rmeta","--extern","num_rational=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libnum_rational-21bbe98bc6175ebe.rmeta","--extern","num_traits=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libnum_traits-5bdf9177bf697aeb.rmeta","--extern","png=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libpng-f503d151aced4ca7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/samv/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libimage-8f85c4432f36dc11.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[11134018902221062795,0]},"crate_root":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src","external_crates":[{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17848356123076402324,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2571568952482378191,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3381153973743375855,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[859990804154970231,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13406540867394126232,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8031689522704144356,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7051263317280381750,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15559094268889944187,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[9861791662769261467,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14233487050114319148,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[4193298229573560736,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[15931660052351559034,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[762912116291214375,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16903055257668955945,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[561513094272624117,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[59110909806878804,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2820196564566765046,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[839392276863948394,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[17041169231870870072,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","num":20,"id":{"name":"num_traits","disambiguator":[2792629860220044960,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","num":21,"id":{"name":"byteorder","disambiguator":[12859680058048119064,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","num":22,"id":{"name":"jpeg_decoder","disambiguator":[5628410447301074276,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":23,"id":{"name":"num_rational","disambiguator":[12580553955981667357,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":24,"id":{"name":"num_integer","disambiguator":[18192014462427858646,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":25,"id":{"name":"png","disambiguator":[16881458677915115916,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":26,"id":{"name":"bitflags","disambiguator":[15583329755001529935,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":27,"id":{"name":"crc32fast","disambiguator":[1587077071161110166,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":28,"id":{"name":"cfg_if","disambiguator":[2060745060010834719,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":29,"id":{"name":"miniz_oxide","disambiguator":[5547990592562051965,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":30,"id":{"name":"adler","disambiguator":[9122551859274892397,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","num":31,"id":{"name":"flate2","disambiguator":[15801935661894570167,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","num":32,"id":{"name":"color_quant","disambiguator":[10709789214860528313,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","num":33,"id":{"name":"bytemuck","disambiguator":[9956572504895393796,0]}}],"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":0,"byte_end":9276,"line_start":1,"line_end":277,"column_start":1,"column_end":46}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4013},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3983,"byte_end":3992,"line_start":104,"line_end":104,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4048},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3994,"byte_end":4011,"line_start":104,"line_end":104,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4334},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4038,"byte_end":4042,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4335},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4038,"byte_end":4042,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4392},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4044,"byte_end":4049,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4393},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4044,"byte_end":4049,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4305},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4051,"byte_end":4054,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4306},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4051,"byte_end":4054,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4363},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4056,"byte_end":4060,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4364},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4056,"byte_end":4060,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3335},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4087,"byte_end":4097,"line_start":108,"line_end":108,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4099,"byte_end":4110,"line_start":108,"line_end":108,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3090},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4142,"byte_end":4158,"line_start":111,"line_end":111,"column_start":5,"column_end":21},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3114},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4164,"byte_end":4176,"line_start":112,"line_end":112,"column_start":5,"column_end":17},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3103},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4182,"byte_end":4198,"line_start":113,"line_end":113,"column_start":5,"column_end":21},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3070},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4204,"byte_end":4216,"line_start":114,"line_end":114,"column_start":5,"column_end":17},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3084},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4222,"byte_end":4238,"line_start":115,"line_end":115,"column_start":5,"column_end":21},"alias_span":null,"name":"ImageDecoderRect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3093},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4244,"byte_end":4256,"line_start":116,"line_end":116,"column_start":5,"column_end":17},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4475},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4262,"byte_end":4273,"line_start":117,"line_end":117,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4518},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4279,"byte_end":4296,"line_start":118,"line_end":118,"column_start":5,"column_end":22},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4555},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4319,"byte_end":4325,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4540},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4331,"byte_end":4339,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4567},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4345,"byte_end":4353,"line_start":122,"line_end":122,"column_start":5,"column_end":13},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2512},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4389,"byte_end":4403,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2511},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4409,"byte_end":4418,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3982},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4443,"byte_end":4454,"line_start":129,"line_end":129,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2517},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4460,"byte_end":4471,"line_start":130,"line_end":130,"column_start":5,"column_end":16},"alias_span":null,"name":"Rgb32FImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2509},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4477,"byte_end":4485,"line_start":131,"line_end":131,"column_start":5,"column_end":13},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2518},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4491,"byte_end":4503,"line_start":132,"line_end":132,"column_start":5,"column_end":17},"alias_span":null,"name":"Rgba32FImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2510},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4509,"byte_end":4518,"line_start":133,"line_end":133,"column_start":5,"column_end":14},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3546},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4545,"byte_end":4556,"line_start":136,"line_end":136,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3192},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4593,"byte_end":4608,"line_start":139,"line_end":139,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3279},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4610,"byte_end":4615,"line_start":139,"line_end":139,"column_start":42,"column_end":47},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3244},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4617,"byte_end":4635,"line_start":139,"line_end":139,"column_start":49,"column_end":67},"alias_span":null,"name":"PixelWithColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3200},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4637,"byte_end":4646,"line_start":139,"line_end":139,"column_start":69,"column_end":78},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2950},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4711,"byte_end":4727,"line_start":143,"line_end":143,"column_start":5,"column_end":21},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2959},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4729,"byte_end":4745,"line_start":143,"line_end":143,"column_start":23,"column_end":39},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2960},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4747,"byte_end":4775,"line_start":143,"line_end":143,"column_start":41,"column_end":69},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2948},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4777,"byte_end":4781,"line_start":143,"line_end":143,"column_start":71,"column_end":75},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2952},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4783,"byte_end":4794,"line_start":143,"line_end":143,"column_start":77,"column_end":88},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2954},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4800,"byte_end":4823,"line_start":144,"line_end":144,"column_start":5,"column_end":28},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2956},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4825,"byte_end":4849,"line_start":144,"line_end":144,"column_start":30,"column_end":54},"alias_span":null,"name":"write_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4890,"byte_end":4902,"line_start":146,"line_end":146,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":793},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4904,"byte_end":4908,"line_start":146,"line_end":146,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4421},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4937,"byte_end":4949,"line_start":148,"line_end":148,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3966},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4979,"byte_end":4984,"line_start":150,"line_end":150,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3959},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4986,"byte_end":4991,"line_start":150,"line_end":150,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2062},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":4993,"byte_end":4999,"line_start":150,"line_end":150,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2496},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5222,"byte_end":5235,"line_start":159,"line_end":159,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2302},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5237,"byte_end":5252,"line_start":159,"line_end":159,"column_start":24,"column_end":39},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2349},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5254,"byte_end":5272,"line_start":159,"line_end":159,"column_start":41,"column_end":59},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2326},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5274,"byte_end":5287,"line_start":159,"line_end":159,"column_start":61,"column_end":74},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2370},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5289,"byte_end":5305,"line_start":159,"line_end":159,"column_start":76,"column_end":92},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2200},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5315,"byte_end":5321,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2226},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5323,"byte_end":5332,"line_start":160,"line_end":160,"column_start":17,"column_end":26},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2249},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5334,"byte_end":5338,"line_start":160,"line_end":160,"column_start":28,"column_end":32},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2277},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5340,"byte_end":5347,"line_start":160,"line_end":160,"column_start":34,"column_end":41},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":3467},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/mod.rs","byte_start":26443,"byte_end":26447,"line_start":5,"line_end":5,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":244}},{"kind":"Use","ref_id":{"krate":0,"index":3492},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31510,"byte_end":31520,"line_start":7,"line_end":7,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3497},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31558,"byte_end":31568,"line_start":9,"line_end":9,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3498},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31558,"byte_end":31568,"line_start":9,"line_end":9,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3499},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31570,"byte_end":31578,"line_start":9,"line_end":9,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3500},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31570,"byte_end":31578,"line_start":9,"line_end":9,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3501},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31580,"byte_end":31588,"line_start":9,"line_end":9,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3502},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31580,"byte_end":31588,"line_start":9,"line_end":9,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3493},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31590,"byte_end":31597,"line_start":9,"line_end":9,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3494},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31590,"byte_end":31597,"line_start":9,"line_end":9,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3495},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31599,"byte_end":31607,"line_start":9,"line_end":9,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3496},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31599,"byte_end":31607,"line_start":9,"line_end":9,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31666,"byte_end":31681,"line_start":13,"line_end":13,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31683,"byte_end":31701,"line_start":13,"line_end":13,"column_start":22,"column_end":40},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31703,"byte_end":31727,"line_start":13,"line_end":13,"column_start":42,"column_end":66},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31729,"byte_end":31742,"line_start":13,"line_end":13,"column_start":68,"column_end":81},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31744,"byte_end":31760,"line_start":13,"line_end":13,"column_start":83,"column_end":99},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31766,"byte_end":31788,"line_start":14,"line_end":14,"column_start":5,"column_end":27},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":419},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31790,"byte_end":31799,"line_start":14,"line_end":14,"column_start":29,"column_end":38},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31801,"byte_end":31813,"line_start":14,"line_end":14,"column_start":40,"column_end":52},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31815,"byte_end":31833,"line_start":14,"line_end":14,"column_start":54,"column_end":72},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31835,"byte_end":31844,"line_start":14,"line_end":14,"column_start":74,"column_end":83},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31846,"byte_end":31858,"line_start":14,"line_end":14,"column_start":85,"column_end":97},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":417},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31864,"byte_end":31872,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31874,"byte_end":31885,"line_start":15,"line_end":15,"column_start":15,"column_end":26},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":679},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31933,"byte_end":31937,"line_start":19,"line_end":19,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31939,"byte_end":31948,"line_start":19,"line_end":19,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31950,"byte_end":31956,"line_start":19,"line_end":19,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31958,"byte_end":31967,"line_start":19,"line_end":19,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":682},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31969,"byte_end":31978,"line_start":19,"line_end":19,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32033,"byte_end":32041,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32043,"byte_end":32051,"line_start":23,"line_end":23,"column_start":15,"column_end":23},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32053,"byte_end":32059,"line_start":23,"line_end":23,"column_start":25,"column_end":31},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32061,"byte_end":32070,"line_start":23,"line_end":23,"column_start":33,"column_end":42},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32072,"byte_end":32087,"line_start":23,"line_end":23,"column_start":44,"column_end":59},"alias_span":null,"name":"grayscale_alpha","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":497},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32089,"byte_end":32108,"line_start":23,"line_end":23,"column_start":61,"column_end":80},"alias_span":null,"name":"grayscale_with_type","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32114,"byte_end":32139,"line_start":24,"line_end":24,"column_start":5,"column_end":30},"alias_span":null,"name":"grayscale_with_type_alpha","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32141,"byte_end":32150,"line_start":24,"line_end":24,"column_start":32,"column_end":41},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":559},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32152,"byte_end":32164,"line_start":24,"line_end":24,"column_start":43,"column_end":55},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32166,"byte_end":32172,"line_start":24,"line_end":24,"column_start":57,"column_end":63},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3487},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32174,"byte_end":32181,"line_start":24,"line_end":24,"column_start":65,"column_end":72},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":3488},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32174,"byte_end":32181,"line_start":24,"line_end":24,"column_start":65,"column_end":72},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32183,"byte_end":32191,"line_start":24,"line_end":24,"column_start":74,"column_end":82},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":886},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112106,"byte_end":112112,"line_start":10,"line_end":10,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":714}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201446,"byte_end":201456,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":1145}},{"kind":"Use","ref_id":{"krate":0,"index":1463},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201481,"byte_end":201491,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":1145}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":274093,"byte_end":274104,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1491}},{"kind":"Use","ref_id":{"krate":0,"index":1721},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":274130,"byte_end":274141,"line_start":11,"line_end":11,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1491}},{"kind":"Use","ref_id":{"krate":0,"index":3882},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":274143,"byte_end":274155,"line_start":11,"line_end":11,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1491}},{"kind":"Use","ref_id":{"krate":0,"index":3864},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":274157,"byte_end":274173,"line_start":11,"line_end":11,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1491}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":0,"byte_end":9276,"line_start":1,"line_end":277,"column_start":1,"column_end":46},"name":"","qualname":"::","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":215},{"krate":0,"index":244},{"krate":0,"index":257},{"krate":0,"index":714},{"krate":0,"index":929},{"krate":0,"index":1144},{"krate":0,"index":2046},{"krate":0,"index":2099},{"krate":0,"index":2519},{"krate":0,"index":2687},{"krate":0,"index":2961},{"krate":0,"index":3162},{"krate":0,"index":3320},{"krate":0,"index":3334},{"krate":0,"index":4623}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":842,"byte_end":866,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":867,"byte_end":908,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":909,"byte_end":959,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":960,"byte_end":988,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":989,"byte_end":992,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":993,"byte_end":1051,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1052,"byte_end":1137,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/ # Ok(())","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1138,"byte_end":1150,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1151,"byte_end":1158,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1159,"byte_end":1166,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1167,"byte_end":1170,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1171,"byte_end":1228,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1229,"byte_end":1232,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1233,"byte_end":1251,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::{Write, Cursor};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1252,"byte_end":1287,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1288,"byte_end":1323,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1324,"byte_end":1354,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1355,"byte_end":1384,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1385,"byte_end":1435,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1436,"byte_end":1483,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1484,"byte_end":1532,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1533,"byte_end":1560,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1561,"byte_end":1564,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1565,"byte_end":1605,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut Cursor::new(&mut bytes), image::ImageOutputFormat::Png)?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1606,"byte_end":1686,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/ # Ok(())","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1687,"byte_end":1699,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1700,"byte_end":1707,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1708,"byte_end":1755,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1756,"byte_end":1763,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1764,"byte_end":1767,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1768,"byte_end":1891,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1892,"byte_end":1895,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1896,"byte_end":1944,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":1945,"byte_end":2001,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2002,"byte_end":2043,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2044,"byte_end":2047,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2048,"byte_end":2067,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2068,"byte_end":2071,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2072,"byte_end":2114,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2115,"byte_end":2181,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2182,"byte_end":2260,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2261,"byte_end":2307,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2308,"byte_end":2311,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2312,"byte_end":2358,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2359,"byte_end":2415,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2416,"byte_end":2492,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2493,"byte_end":2573,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2574,"byte_end":2614,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2615,"byte_end":2618,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2619,"byte_end":2672,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2673,"byte_end":2718,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2719,"byte_end":2763,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2764,"byte_end":2808,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2809,"byte_end":2838,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2839,"byte_end":2842,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2843,"byte_end":2880,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2881,"byte_end":2884,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderRect`] traits are implemented for many image file","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2885,"byte_end":2977,"line_start":76,"line_end":76,"column_start":1,"column_end":93}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":2978,"byte_end":3076,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3077,"byte_end":3139,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3140,"byte_end":3143,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3144,"byte_end":3226,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3227,"byte_end":3230,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3231,"byte_end":3309,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderRect`]: trait.ImageDecoderRect.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3310,"byte_end":3363,"line_start":83,"line_end":83,"column_start":1,"column_end":54}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3364,"byte_end":3409,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3410,"byte_end":3455,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3456,"byte_end":3478,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3479,"byte_end":3510,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3511,"byte_end":3536,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3537,"byte_end":3557,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3558,"byte_end":3596,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3694,"byte_end":3735,"line_start":93,"line_end":93,"column_start":1,"column_end":42}},{"value":"allow(clippy :: wrong_self_convention, clippy :: enum_variant_names)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":3776,"byte_end":3844,"line_start":95,"line_end":95,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":3335},{"krate":0,"index":3354},{"krate":0,"index":3356},{"krate":0,"index":3359},{"krate":0,"index":3361},{"krate":0,"index":3371},{"krate":0,"index":3373},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3387},{"krate":0,"index":3390},{"krate":0,"index":3392},{"krate":0,"index":3402},{"krate":0,"index":3404},{"krate":0,"index":3406},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3413},{"krate":0,"index":3416},{"krate":0,"index":3418},{"krate":0,"index":3420},{"krate":0,"index":3422},{"krate":0,"index":3430},{"krate":0,"index":3432},{"krate":0,"index":3434},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3444},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3460},{"krate":0,"index":3463},{"krate":0,"index":3464},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":170},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9278,"byte_end":9321,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9322,"byte_end":9325,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9326,"byte_end":9419,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9420,"byte_end":9519,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9520,"byte_end":9595,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9596,"byte_end":9599,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9600,"byte_end":9699,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9700,"byte_end":9798,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9799,"byte_end":9894,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9895,"byte_end":9991,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":9992,"byte_end":10088,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10089,"byte_end":10170,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10171,"byte_end":10174,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10175,"byte_end":10215,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3336},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10888,"byte_end":10896,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10605,"byte_end":10649,"line_start":28,"line_end":28,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10654,"byte_end":10657,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10662,"byte_end":10755,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10760,"byte_end":10843,"line_start":31,"line_end":31,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10848,"byte_end":10883,"line_start":32,"line_end":32,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":3338},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10897,"byte_end":10910,"line_start":33,"line_end":33,"column_start":14,"column_end":27},"name":"0","qualname":"::error::ImageError::Decoding::0","value":"error::DecodingError","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3339},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11282,"byte_end":11290,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10918,"byte_end":10962,"line_start":35,"line_end":35,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10967,"byte_end":10970,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10975,"byte_end":11061,"line_start":37,"line_end":37,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11066,"byte_end":11159,"line_start":38,"line_end":38,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11164,"byte_end":11257,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11262,"byte_end":11277,"line_start":40,"line_end":40,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":3341},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11291,"byte_end":11304,"line_start":41,"line_end":41,"column_start":14,"column_end":27},"name":"0","qualname":"::error::ImageError::Encoding::0","value":"error::EncodingError","parent":{"krate":0,"index":3339},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3342},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11530,"byte_end":11539,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11312,"byte_end":11360,"line_start":43,"line_end":43,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11365,"byte_end":11368,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11373,"byte_end":11464,"line_start":45,"line_end":45,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11469,"byte_end":11525,"line_start":46,"line_end":46,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":3344},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11540,"byte_end":11554,"line_start":47,"line_end":47,"column_start":15,"column_end":29},"name":"0","qualname":"::error::ImageError::Parameter::0","value":"error::ParameterError","parent":{"krate":0,"index":3342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3345},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11799,"byte_end":11805,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11562,"byte_end":11639,"line_start":49,"line_end":49,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11644,"byte_end":11647,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11652,"byte_end":11747,"line_start":51,"line_end":51,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11752,"byte_end":11794,"line_start":52,"line_end":52,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3347},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11806,"byte_end":11816,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"0","qualname":"::error::ImageError::Limits::0","value":"error::LimitError","parent":{"krate":0,"index":3345},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3348},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12143,"byte_end":12154,"line_start":61,"line_end":61,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11824,"byte_end":11888,"line_start":55,"line_end":55,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11893,"byte_end":11896,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11901,"byte_end":11985,"line_start":57,"line_end":57,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":11990,"byte_end":12027,"line_start":58,"line_end":58,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12032,"byte_end":12079,"line_start":59,"line_end":59,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12084,"byte_end":12138,"line_start":60,"line_end":60,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3350},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12155,"byte_end":12171,"line_start":61,"line_end":61,"column_start":17,"column_end":33},"name":"0","qualname":"::error::ImageError::Unsupported::0","value":"error::UnsupportedError","parent":{"krate":0,"index":3348},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3351},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12245,"byte_end":12252,"line_start":64,"line_end":64,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12179,"byte_end":12240,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3353},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12253,"byte_end":12262,"line_start":64,"line_end":64,"column_start":13,"column_end":22},"name":"0","qualname":"::error::ImageError::IoError::0","value":"std::io::Error","parent":{"krate":0,"index":3351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3335},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10588,"byte_end":10598,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"enum ImageError {\n    Decoding(DecodingError),\n    Encoding(EncodingError),\n    Parameter(ParameterError),\n    Limits(LimitError),\n    Unsupported(UnsupportedError),\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":3336},{"krate":0,"index":3339},{"krate":0,"index":3342},{"krate":0,"index":3345},{"krate":0,"index":3348},{"krate":0,"index":3351}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10330,"byte_end":10378,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10379,"byte_end":10382,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10383,"byte_end":10475,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":10476,"byte_end":10561,"line_start":25,"line_end":25,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3356},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12484,"byte_end":12500,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":3357},{"krate":0,"index":3358}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12268,"byte_end":12325,"line_start":67,"line_end":67,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12326,"byte_end":12329,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12330,"byte_end":12389,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12390,"byte_end":12393,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12394,"byte_end":12455,"line_start":71,"line_end":71,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3362},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12757,"byte_end":12762,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12705,"byte_end":12752,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":3364},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12763,"byte_end":12780,"line_start":83,"line_end":83,"column_start":11,"column_end":28},"name":"0","qualname":"::error::UnsupportedErrorKind::Color::0","value":"color::ExtendedColorType","parent":{"krate":0,"index":3362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3365},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12829,"byte_end":12835,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12787,"byte_end":12824,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":3367},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12836,"byte_end":12851,"line_start":85,"line_end":85,"column_start":12,"column_end":27},"name":"0","qualname":"::error::UnsupportedErrorKind::Format::0","value":"error::ImageFormatHint","parent":{"krate":0,"index":3365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3368},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12979,"byte_end":12993,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12858,"byte_end":12895,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12900,"byte_end":12974,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3370},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12994,"byte_end":13000,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"name":"0","qualname":"::error::UnsupportedErrorKind::GenericFeature::0","value":"std::string::String","parent":{"krate":0,"index":3368},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3361},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12678,"byte_end":12698,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"enum UnsupportedErrorKind {\n    Color(ExtendedColorType),\n    Format(ImageFormatHint),\n    GenericFeature(String),\n}","parent":null,"children":[{"krate":0,"index":3362},{"krate":0,"index":3365},{"krate":0,"index":3368}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12567,"byte_end":12609,"line_start":78,"line_end":78,"column_start":1,"column_end":43}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":12651,"byte_end":12668,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3382},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13299,"byte_end":13312,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":3383},{"krate":0,"index":3384}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13006,"byte_end":13059,"line_start":91,"line_end":91,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13060,"byte_end":13063,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13064,"byte_end":13158,"line_start":93,"line_end":93,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13159,"byte_end":13198,"line_start":94,"line_end":94,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13199,"byte_end":13202,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13203,"byte_end":13270,"line_start":96,"line_end":96,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3387},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13693,"byte_end":13707,"line_start":110,"line_end":110,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":3388},{"krate":0,"index":3389}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13401,"byte_end":13450,"line_start":103,"line_end":103,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13451,"byte_end":13454,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13455,"byte_end":13550,"line_start":105,"line_end":105,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13551,"byte_end":13590,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13591,"byte_end":13594,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13595,"byte_end":13664,"line_start":108,"line_end":108,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3393},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13973,"byte_end":13990,"line_start":120,"line_end":120,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":3392},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13932,"byte_end":13968,"line_start":119,"line_end":119,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3395},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14088,"byte_end":14101,"line_start":122,"line_end":122,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":3392},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13996,"byte_end":14083,"line_start":121,"line_end":121,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3397},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14229,"byte_end":14236,"line_start":125,"line_end":125,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":3392},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14107,"byte_end":14145,"line_start":123,"line_end":123,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14150,"byte_end":14224,"line_start":124,"line_end":124,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3399},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14237,"byte_end":14243,"line_start":125,"line_end":125,"column_start":13,"column_end":19},"name":"0","qualname":"::error::ParameterErrorKind::Generic::0","value":"std::string::String","parent":{"krate":0,"index":3397},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3400},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14297,"byte_end":14307,"line_start":127,"line_end":127,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":3392},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14250,"byte_end":14292,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":3392},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13907,"byte_end":13925,"line_start":118,"line_end":118,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"enum ParameterErrorKind {\n    DimensionMismatch,\n    FailedAlready,\n    Generic(String),\n    NoMoreData,\n}","parent":null,"children":[{"krate":0,"index":3393},{"krate":0,"index":3395},{"krate":0,"index":3397},{"krate":0,"index":3400}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13797,"byte_end":13838,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":13880,"byte_end":13897,"line_start":117,"line_end":117,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3413},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14605,"byte_end":14618,"line_start":137,"line_end":137,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":3414},{"krate":0,"index":3415}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14312,"byte_end":14365,"line_start":130,"line_end":130,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14366,"byte_end":14369,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14370,"byte_end":14464,"line_start":132,"line_end":132,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14465,"byte_end":14504,"line_start":133,"line_end":133,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14505,"byte_end":14508,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14509,"byte_end":14576,"line_start":135,"line_end":135,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3418},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15018,"byte_end":15028,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":3419}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14707,"byte_end":14784,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14785,"byte_end":14788,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14789,"byte_end":14881,"line_start":144,"line_end":144,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14882,"byte_end":14921,"line_start":145,"line_end":145,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14922,"byte_end":14925,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":14926,"byte_end":14989,"line_start":147,"line_end":147,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3423},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15578,"byte_end":15592,"line_start":163,"line_end":163,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":3422},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15505,"byte_end":15573,"line_start":162,"line_end":162,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3425},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15676,"byte_end":15694,"line_start":165,"line_end":165,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":3422},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15598,"byte_end":15671,"line_start":164,"line_end":164,"column_start":5,"column_end":78}}]},{"kind":"StructVariant","id":{"krate":0,"index":3427},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15773,"byte_end":15784,"line_start":167,"line_end":167,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::LimitErrorKind::Unsupported","value":"LimitErrorKind::Unsupported { limits, supported }","parent":{"krate":0,"index":3422},"children":[],"decl_id":null,"docs":" The specified strict limits are not supported for this operation\n","sig":null,"attributes":[{"value":"/ The specified strict limits are not supported for this operation","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15700,"byte_end":15768,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3428},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15824,"byte_end":15830,"line_start":169,"line_end":169,"column_start":9,"column_end":15},"name":"limits","qualname":"::error::LimitErrorKind::Unsupported::limits","value":"io::Limits","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" The given limits\n","sig":null,"attributes":[{"value":"/ The given limits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15795,"byte_end":15815,"line_start":168,"line_end":168,"column_start":9,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":3429},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15899,"byte_end":15908,"line_start":171,"line_end":171,"column_start":9,"column_end":18},"name":"supported","qualname":"::error::LimitErrorKind::Unsupported::supported","value":"io::LimitSupport","parent":{"krate":0,"index":3427},"children":[],"decl_id":null,"docs":" The supported strict limits\n","sig":null,"attributes":[{"value":"/ The supported strict limits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15859,"byte_end":15890,"line_start":170,"line_end":170,"column_start":9,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":3422},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15484,"byte_end":15498,"line_start":161,"line_end":161,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"enum LimitErrorKind {\n    DimensionError,\n    InsufficientMemory,\n    Unsupported {\n            limits: crate::io::Limits,\n            supported: crate::io::LimitSupport,\n        },\n}","parent":null,"children":[{"krate":0,"index":3423},{"krate":0,"index":3425},{"krate":0,"index":3427}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15099,"byte_end":15167,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15168,"byte_end":15171,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15172,"byte_end":15270,"line_start":156,"line_end":156,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15271,"byte_end":15336,"line_start":157,"line_end":157,"column_start":1,"column_end":66}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15382,"byte_end":15399,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15400,"byte_end":15438,"line_start":160,"line_end":160,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3445},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16124,"byte_end":16129,"line_start":180,"line_end":180,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":3444},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16087,"byte_end":16119,"line_start":179,"line_end":179,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":3447},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16130,"byte_end":16141,"line_start":180,"line_end":180,"column_start":11,"column_end":22},"name":"0","qualname":"::error::ImageFormatHint::Exact::0","value":"image::ImageFormat","parent":{"krate":0,"index":3445},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3448},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16197,"byte_end":16201,"line_start":183,"line_end":183,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":3444},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16149,"byte_end":16192,"line_start":182,"line_end":182,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":3450},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16202,"byte_end":16208,"line_start":183,"line_end":183,"column_start":10,"column_end":16},"name":"0","qualname":"::error::ImageFormatHint::Name::0","value":"std::string::String","parent":{"krate":0,"index":3448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3451},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16273,"byte_end":16286,"line_start":186,"line_end":186,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":3444},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16216,"byte_end":16268,"line_start":185,"line_end":185,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":3453},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16287,"byte_end":16305,"line_start":186,"line_end":186,"column_start":19,"column_end":37},"name":"0","qualname":"::error::ImageFormatHint::PathExtension::0","value":"std::path::PathBuf","parent":{"krate":0,"index":3451},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3454},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16373,"byte_end":16380,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":3444},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16313,"byte_end":16368,"line_start":188,"line_end":188,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":3444},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16065,"byte_end":16080,"line_start":178,"line_end":178,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"enum ImageFormatHint {\n    Exact(ImageFormat),\n    Name(String),\n    PathExtension(std::path::PathBuf),\n    Unknown,\n}","parent":null,"children":[{"krate":0,"index":3445},{"krate":0,"index":3448},{"krate":0,"index":3451},{"krate":0,"index":3454}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":15945,"byte_end":15996,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16038,"byte_end":16055,"line_start":177,"line_end":177,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16631,"byte_end":16651,"line_start":197,"line_end":197,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16413,"byte_end":16499,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16504,"byte_end":16507,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16512,"byte_end":16600,"line_start":195,"line_end":195,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16605,"byte_end":16619,"line_start":196,"line_end":196,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16846,"byte_end":16850,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"fn kind<'_>(&'_ Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16768,"byte_end":16834,"line_start":201,"line_end":201,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16989,"byte_end":17000,"line_start":207,"line_end":207,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"fn format_hint<'_>(&'_ Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16921,"byte_end":16977,"line_start":206,"line_end":206,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17192,"byte_end":17195,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"fn new<impl Into<Box<dyn Error + Send + Sync>>>(ImageFormatHint,\nimpl Into<Box<dyn Error + Send + Sync>>) -> Self where\nimpl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17091,"byte_end":17180,"line_start":213,"line_end":213,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17540,"byte_end":17556,"line_start":224,"line_end":224,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17384,"byte_end":17433,"line_start":221,"line_end":221,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17438,"byte_end":17441,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17446,"byte_end":17528,"line_start":223,"line_end":223,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17755,"byte_end":17766,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"fn format_hint<'_>(&'_ Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17687,"byte_end":17743,"line_start":231,"line_end":231,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17959,"byte_end":17962,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"fn new<impl Into<Box<dyn Error + Send + Sync>>>(ImageFormatHint,\nimpl Into<Box<dyn Error + Send + Sync>>) -> Self where\nimpl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17857,"byte_end":17947,"line_start":238,"line_end":238,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18308,"byte_end":18324,"line_start":249,"line_end":249,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18151,"byte_end":18201,"line_start":246,"line_end":246,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18206,"byte_end":18209,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18214,"byte_end":18296,"line_start":248,"line_end":248,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18522,"byte_end":18533,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"fn format_hint<'_>(&'_ Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18455,"byte_end":18510,"line_start":256,"line_end":256,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18705,"byte_end":18714,"line_start":264,"line_end":264,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18625,"byte_end":18693,"line_start":263,"line_end":263,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18921,"byte_end":18925,"line_start":272,"line_end":272,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"fn kind<'_>(&'_ Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18845,"byte_end":18909,"line_start":271,"line_end":271,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19098,"byte_end":19107,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19014,"byte_end":19086,"line_start":278,"line_end":278,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19251,"byte_end":19255,"line_start":284,"line_end":284,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"fn kind<'_>(&'_ Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19179,"byte_end":19239,"line_start":283,"line_end":283,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19363,"byte_end":19367,"line_start":290,"line_end":290,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageError as std::convert::From>::from","value":"fn from(io::Error) -> ImageError","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19494,"byte_end":19498,"line_start":296,"line_end":296,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageFormatHint as std::convert::From>::from","value":"fn from(ImageFormat) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19638,"byte_end":19642,"line_start":302,"line_end":302,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageFormatHint as std::convert::From>::from","value":"fn from<'_>(&'_ std::path::Path) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19904,"byte_end":19908,"line_start":311,"line_end":311,"column_start":8,"column_end":12},"name":"from","qualname":"<UnsupportedError as std::convert::From>::from","value":"fn from(ImageFormatHint) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20134,"byte_end":20145,"line_start":320,"line_end":320,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20076,"byte_end":20124,"line_start":319,"line_end":319,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20217,"byte_end":20220,"line_start":323,"line_end":323,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ImageError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20688,"byte_end":20694,"line_start":336,"line_end":336,"column_start":8,"column_end":14},"name":"source","qualname":"<ImageError as std::error::Error>::source","value":"fn source<'_>(&'_ Self) -> Option<&dyn Error + 'static>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":21157,"byte_end":21160,"line_start":349,"line_end":349,"column_start":8,"column_end":11},"name":"fmt","qualname":"<UnsupportedError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":22587,"byte_end":22590,"line_start":386,"line_end":386,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParameterError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23474,"byte_end":23480,"line_start":412,"line_end":412,"column_start":8,"column_end":14},"name":"source","qualname":"<ParameterError as std::error::Error>::source","value":"fn source<'_>(&'_ Self) -> Option<&dyn Error + 'static>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23692,"byte_end":23695,"line_start":421,"line_end":421,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EncodingError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24088,"byte_end":24094,"line_start":434,"line_end":434,"column_start":8,"column_end":14},"name":"source","qualname":"<EncodingError as std::error::Error>::source","value":"fn source<'_>(&'_ Self) -> Option<&dyn Error + 'static>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24306,"byte_end":24309,"line_start":443,"line_end":443,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DecodingError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24797,"byte_end":24803,"line_start":457,"line_end":457,"column_start":8,"column_end":14},"name":"source","qualname":"<DecodingError as std::error::Error>::source","value":"fn source<'_>(&'_ Self) -> Option<&dyn Error + 'static>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2577},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25012,"byte_end":25015,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"fmt","qualname":"<LimitError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25568,"byte_end":25571,"line_start":481,"line_end":481,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ImageFormatHint as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":215},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5127,"byte_end":5133,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5047,"byte_end":5118,"line_start":155,"line_end":155,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":244},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":251},{"krate":0,"index":254}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/mod.rs","byte_start":26356,"byte_end":26400,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3467},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26619,"byte_end":26623,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26491,"byte_end":26556,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3468},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26683,"byte_end":26684,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":3467},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26630,"byte_end":26674,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3469},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26748,"byte_end":26749,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":3467},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26695,"byte_end":26739,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3470},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26795,"byte_end":26800,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":3467},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26760,"byte_end":26786,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":3471},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26847,"byte_end":26853,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":3467},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/math/rect.rs","byte_start":26811,"byte_end":26838,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":257},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":448},{"krate":0,"index":562},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":706},{"krate":0,"index":711}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":31334,"byte_end":31364,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":48026,"byte_end":48034,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn rotate90<I, '_>(&'_ I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":47977,"byte_end":48018,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":419},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":48366,"byte_end":48375,"line_start":22,"line_end":22,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn rotate180<I, '_>(&'_ I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":48316,"byte_end":48358,"line_start":21,"line_end":21,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":48708,"byte_end":48717,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn rotate270<I, '_>(&'_ I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":48658,"byte_end":48700,"line_start":34,"line_end":34,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":49105,"byte_end":49116,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"fn rotate90_in<I, Container, '_,\n'_>(&'_ I, &'_ mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>\nwhere I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":49000,"byte_end":49097,"line_start":47,"line_end":47,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":49890,"byte_end":49902,"line_start":74,"line_end":74,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"fn rotate180_in<I, Container, '_,\n'_>(&'_ I, &'_ mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>\nwhere I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":49784,"byte_end":49882,"line_start":73,"line_end":73,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":50685,"byte_end":50697,"line_start":100,"line_end":100,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"fn rotate270_in<I, Container, '_,\n'_>(&'_ I, &'_ mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>\nwhere I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":50579,"byte_end":50677,"line_start":99,"line_end":99,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":51403,"byte_end":51418,"line_start":126,"line_end":126,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn flip_horizontal<I, '_>(&'_ I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":51365,"byte_end":51395,"line_start":125,"line_end":125,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":434},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":51743,"byte_end":51756,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn flip_vertical<I, '_>(&'_ I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":51707,"byte_end":51735,"line_start":138,"line_end":138,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":52138,"byte_end":52156,"line_start":152,"line_end":152,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"fn flip_horizontal_in<I, Container, '_,\n'_>(&'_ I, &'_ mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>\nwhere I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":52043,"byte_end":52130,"line_start":151,"line_end":151,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":52917,"byte_end":52933,"line_start":178,"line_end":178,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"fn flip_vertical_in<I, Container, '_,\n'_>(&'_ I, &'_ mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>\nwhere I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":52824,"byte_end":52909,"line_start":177,"line_end":177,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":53660,"byte_end":53678,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"fn rotate180_in_place<I, '_>(&'_ mut I) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":53601,"byte_end":53652,"line_start":203,"line_end":203,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":54458,"byte_end":54482,"line_start":235,"line_end":235,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"fn flip_horizontal_in_place<I, '_>(&'_ mut I) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":54410,"byte_end":54450,"line_start":234,"line_end":234,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":54888,"byte_end":54910,"line_start":250,"line_end":250,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"fn flip_vertical_in_place<I, '_>(&'_ mut I) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/affine.rs","byte_start":54842,"byte_end":54880,"line_start":249,"line_end":249,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":448},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":519},{"krate":0,"index":523},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":3487},{"krate":0,"index":3489},{"krate":0,"index":3491},{"krate":0,"index":537},{"krate":0,"index":543},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":559}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":59871,"byte_end":59935,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60344,"byte_end":60353,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn grayscale<I, '_>(&'_ I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>\nwhere I: GenericImageView","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale. Alpha channel is discarded.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale. Alpha channel is discarded.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60264,"byte_end":60336,"line_start":14,"line_end":14,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60561,"byte_end":60576,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"grayscale_alpha","qualname":"::imageops::colorops::grayscale_alpha","value":"fn grayscale_alpha<I, '_>(&'_ I)\n-> ImageBuffer<LumaA<Subpixel<I>>, Vec<Subpixel<I>>> where I: GenericImageView","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale. Alpha channel is preserved.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale. Alpha channel is preserved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60481,"byte_end":60553,"line_start":21,"line_end":21,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60829,"byte_end":60848,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"grayscale_with_type","qualname":"::imageops::colorops::grayscale_with_type","value":"fn grayscale_with_type<NewPixel, I, '_>(&'_ I)\n-> ImageBuffer<NewPixel, Vec<NewPixel::Subpixel>> where I: GenericImageView,\nNewPixel: Pixel + FromColor<Luma<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is discarded.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is discarded.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":60711,"byte_end":60821,"line_start":28,"line_end":28,"column_start":1,"column_end":111}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":61438,"byte_end":61463,"line_start":49,"line_end":49,"column_start":8,"column_end":33},"name":"grayscale_with_type_alpha","qualname":"::imageops::colorops::grayscale_with_type_alpha","value":"fn grayscale_with_type_alpha<NewPixel, I, '_>(&'_ I)\n-> ImageBuffer<NewPixel, Vec<NewPixel::Subpixel>> where I: GenericImageView,\nNewPixel: Pixel + FromColor<LumaA<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is preserved.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is preserved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":61320,"byte_end":61430,"line_start":48,"line_end":48,"column_start":1,"column_end":111}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62035,"byte_end":62041,"line_start":70,"line_end":70,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn invert<I, '_>(&'_ mut I) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":61942,"byte_end":61990,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":61991,"byte_end":62027,"line_start":69,"line_end":69,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62603,"byte_end":62611,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn contrast<I, P, S, '_>(&'_ I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62343,"byte_end":62389,"line_start":84,"line_end":84,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62390,"byte_end":62449,"line_start":85,"line_end":85,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62450,"byte_end":62534,"line_start":86,"line_end":86,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62535,"byte_end":62538,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast_in_place`.][contrast_in_place]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":62539,"byte_end":62595,"line_start":88,"line_end":88,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63603,"byte_end":63620,"line_start":123,"line_end":123,"column_start":8,"column_end":25},"name":"contrast_in_place","qualname":"::imageops::colorops::contrast_in_place","value":"fn contrast_in_place<I, '_>(&'_ mut I, f32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image in place.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63352,"byte_end":63407,"line_start":118,"line_end":118,"column_start":1,"column_end":56}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63408,"byte_end":63467,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63468,"byte_end":63552,"line_start":120,"line_end":120,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63553,"byte_end":63556,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast`.][contrast]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":63557,"byte_end":63595,"line_start":122,"line_end":122,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64561,"byte_end":64569,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn brighten<I, P, S, '_>(&'_ I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64326,"byte_end":64358,"line_start":151,"line_end":151,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64359,"byte_end":64415,"line_start":152,"line_end":152,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64416,"byte_end":64492,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64493,"byte_end":64496,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten_in_place`.][brighten_in_place]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":64497,"byte_end":64553,"line_start":155,"line_end":155,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65497,"byte_end":65514,"line_start":189,"line_end":189,"column_start":8,"column_end":25},"name":"brighten_in_place","qualname":"::imageops::colorops::brighten_in_place","value":"fn brighten_in_place<I, '_>(&'_ mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image in place.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65271,"byte_end":65312,"line_start":184,"line_end":184,"column_start":1,"column_end":42}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65313,"byte_end":65369,"line_start":185,"line_end":185,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65370,"byte_end":65446,"line_start":186,"line_end":186,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65447,"byte_end":65450,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten`.][brighten]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":65451,"byte_end":65489,"line_start":188,"line_end":188,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66516,"byte_end":66525,"line_start":222,"line_end":222,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn huerotate<I, P, S, '_>(&'_ I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66237,"byte_end":66271,"line_start":216,"line_end":216,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66272,"byte_end":66323,"line_start":217,"line_end":217,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66324,"byte_end":66393,"line_start":218,"line_end":218,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66394,"byte_end":66445,"line_start":219,"line_end":219,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66446,"byte_end":66449,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate_in_place`.][huerotate_in_place]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":66450,"byte_end":66508,"line_start":221,"line_end":221,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68743,"byte_end":68761,"line_start":288,"line_end":288,"column_start":8,"column_end":26},"name":"huerotate_in_place","qualname":"::imageops::colorops::huerotate_in_place","value":"fn huerotate_in_place<I, '_>(&'_ mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image in place.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68473,"byte_end":68516,"line_start":282,"line_end":282,"column_start":1,"column_end":44}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68517,"byte_end":68568,"line_start":283,"line_end":283,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68569,"byte_end":68638,"line_start":284,"line_end":284,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68639,"byte_end":68690,"line_start":285,"line_end":285,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68691,"byte_end":68694,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate`.][huerotate]*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":68695,"byte_end":68735,"line_start":287,"line_end":287,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70735,"byte_end":70743,"line_start":351,"line_end":351,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70709,"byte_end":70724,"line_start":350,"line_end":350,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70807,"byte_end":70812,"line_start":353,"line_end":353,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70750,"byte_end":70797,"line_start":352,"line_end":352,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70905,"byte_end":70913,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn index_of<'_, '_>(&'_ Self, &'_ Self::Color) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70818,"byte_end":70871,"line_start":354,"line_end":354,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70876,"byte_end":70897,"line_start":355,"line_end":355,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71121,"byte_end":71127,"line_start":359,"line_end":359,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"fn lookup<'_>(&'_ Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":70956,"byte_end":71049,"line_start":357,"line_end":357,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71054,"byte_end":71113,"line_start":358,"line_end":358,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71308,"byte_end":71318,"line_start":364,"line_end":364,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"fn has_lookup<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71220,"byte_end":71300,"line_start":363,"line_end":363,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71423,"byte_end":71432,"line_start":368,"line_end":368,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn map_color<'_, '_>(&'_ Self, &'_ mut Self::Color)","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71360,"byte_end":71415,"line_start":367,"line_end":367,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3487},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72577,"byte_end":72584,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71469,"byte_end":71493,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71494,"byte_end":71497,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71498,"byte_end":71512,"line_start":373,"line_end":373,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71513,"byte_end":71520,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71521,"byte_end":71590,"line_start":375,"line_end":375,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71591,"byte_end":71626,"line_start":376,"line_end":376,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71627,"byte_end":71630,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71631,"byte_end":71657,"line_start":378,"line_end":378,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71658,"byte_end":71745,"line_start":379,"line_end":379,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71746,"byte_end":71841,"line_start":380,"line_end":380,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71842,"byte_end":71938,"line_start":381,"line_end":381,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":71939,"byte_end":72012,"line_start":382,"line_end":382,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72013,"byte_end":72036,"line_start":383,"line_end":383,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72037,"byte_end":72085,"line_start":384,"line_end":384,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72086,"byte_end":72138,"line_start":385,"line_end":385,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72139,"byte_end":72182,"line_start":386,"line_end":386,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72183,"byte_end":72219,"line_start":387,"line_end":387,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72220,"byte_end":72269,"line_start":388,"line_end":388,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72270,"byte_end":72277,"line_start":389,"line_end":389,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72278,"byte_end":72336,"line_start":390,"line_end":390,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72337,"byte_end":72397,"line_start":391,"line_end":391,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72398,"byte_end":72423,"line_start":392,"line_end":392,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72424,"byte_end":72446,"line_start":393,"line_end":393,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72447,"byte_end":72463,"line_start":394,"line_end":394,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72464,"byte_end":72488,"line_start":395,"line_end":395,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72489,"byte_end":72498,"line_start":396,"line_end":396,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72499,"byte_end":72506,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72507,"byte_end":72534,"line_start":398,"line_end":398,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72535,"byte_end":72542,"line_start":399,"line_end":399,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72672,"byte_end":72680,"line_start":407,"line_end":407,"column_start":8,"column_end":16},"name":"index_of","qualname":"<BiLevel as imageops::colorops::ColorMap>::index_of","value":"fn index_of<'_, '_>(&'_ Self, &'_ Luma<u8>) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":533},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72647,"byte_end":72664,"line_start":406,"line_end":406,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72863,"byte_end":72869,"line_start":417,"line_end":417,"column_start":8,"column_end":14},"name":"lookup","qualname":"<BiLevel as imageops::colorops::ColorMap>::lookup","value":"fn lookup<'_>(&'_ Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":534},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72838,"byte_end":72855,"line_start":416,"line_end":416,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73100,"byte_end":73110,"line_start":426,"line_end":426,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"<BiLevel as imageops::colorops::ColorMap>::has_lookup","value":"fn has_lookup<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":535},"docs":" Indicate NeuQuant implements `lookup`.\n","sig":null,"attributes":[{"value":"/ Indicate NeuQuant implements `lookup`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73050,"byte_end":73092,"line_start":425,"line_end":425,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73177,"byte_end":73186,"line_start":431,"line_end":431,"column_start":8,"column_end":17},"name":"map_color","qualname":"<BiLevel as imageops::colorops::ColorMap>::map_color","value":"fn map_color<'_, '_>(&'_ Self, &'_ mut Luma<u8>)","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":536},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73152,"byte_end":73169,"line_start":430,"line_end":430,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73447,"byte_end":73455,"line_start":442,"line_end":442,"column_start":8,"column_end":16},"name":"index_of","qualname":"<color_quant::NeuQuant as imageops::colorops::ColorMap>::index_of","value":"fn index_of<'_, '_>(&'_ Self, &'_ Rgba<u8>) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":533},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73422,"byte_end":73439,"line_start":441,"line_end":441,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73568,"byte_end":73574,"line_start":447,"line_end":447,"column_start":8,"column_end":14},"name":"lookup","qualname":"<color_quant::NeuQuant as imageops::colorops::ColorMap>::lookup","value":"fn lookup<'_>(&'_ Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":534},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73543,"byte_end":73560,"line_start":446,"line_end":446,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73723,"byte_end":73733,"line_start":452,"line_end":452,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"<color_quant::NeuQuant as imageops::colorops::ColorMap>::has_lookup","value":"fn has_lookup<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":535},"docs":" Indicate NeuQuant implements `lookup`.\n","sig":null,"attributes":[{"value":"/ Indicate NeuQuant implements `lookup`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73673,"byte_end":73715,"line_start":451,"line_end":451,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73800,"byte_end":73809,"line_start":457,"line_end":457,"column_start":8,"column_end":17},"name":"map_color","qualname":"<color_quant::NeuQuant as imageops::colorops::ColorMap>::map_color","value":"fn map_color<'_, '_>(&'_ Self, &'_ mut Rgba<u8>)","parent":{"krate":0,"index":531},"children":[],"decl_id":{"krate":0,"index":536},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73775,"byte_end":73792,"line_start":456,"line_end":456,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":74998,"byte_end":75004,"line_start":491,"line_end":491,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn dither<Pix, Map, '_, '_>(&'_ mut ImageBuffer<Pix, Vec<u8>>, &'_ Map) where\nMap: ColorMap<Color = Pix> + ?Sized, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":74846,"byte_end":74927,"line_start":489,"line_end":489,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":74928,"byte_end":74990,"line_start":490,"line_end":490,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":76558,"byte_end":76570,"line_start":529,"line_end":529,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn index_colors<Pix, Map, '_, '_>(&'_ ImageBuffer<Pix, Vec<u8>>, &'_ Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix> + ?Sized,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":76461,"byte_end":76550,"line_start":528,"line_end":528,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3493},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83085,"byte_end":83092,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":3492},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83060,"byte_end":83080,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3495},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83121,"byte_end":83129,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":3492},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83099,"byte_end":83116,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3497},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83157,"byte_end":83167,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":3492},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83136,"byte_end":83152,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3499},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83198,"byte_end":83206,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":3492},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83174,"byte_end":83193,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3501},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83243,"byte_end":83251,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":3492},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83213,"byte_end":83238,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":3492},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83043,"byte_end":83053,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"enum FilterType { Nearest, Triangle, CatmullRom, Gaussian, Lanczos3, }","parent":null,"children":[{"krate":0,"index":3493},{"krate":0,"index":3495},{"krate":0,"index":3497},{"krate":0,"index":3499},{"krate":0,"index":3501}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80601,"byte_end":80632,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80633,"byte_end":80636,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80637,"byte_end":80652,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80653,"byte_end":80656,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80657,"byte_end":80735,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80736,"byte_end":80755,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80756,"byte_end":80839,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80840,"byte_end":80847,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80848,"byte_end":80927,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80928,"byte_end":80985,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80986,"byte_end":80989,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":80990,"byte_end":81012,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81013,"byte_end":81104,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81105,"byte_end":81149,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81150,"byte_end":81153,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81154,"byte_end":81251,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81252,"byte_end":81326,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81327,"byte_end":81367,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81368,"byte_end":81506,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81507,"byte_end":81531,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81532,"byte_end":81544,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81545,"byte_end":81585,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81586,"byte_end":81724,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81725,"byte_end":81749,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81750,"byte_end":81762,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81763,"byte_end":81803,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81804,"byte_end":81944,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81945,"byte_end":81971,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81972,"byte_end":81984,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":81985,"byte_end":82025,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82026,"byte_end":82166,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82167,"byte_end":82183,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82184,"byte_end":82196,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82197,"byte_end":82237,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82238,"byte_end":82377,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82378,"byte_end":82407,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82408,"byte_end":82420,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82421,"byte_end":82431,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82432,"byte_end":82435,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82436,"byte_end":82448,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82449,"byte_end":82452,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82453,"byte_end":82527,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82528,"byte_end":82575,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82576,"byte_end":82579,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82580,"byte_end":82612,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82613,"byte_end":82623,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82624,"byte_end":82648,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82649,"byte_end":82671,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82672,"byte_end":82683,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82684,"byte_end":82694,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82695,"byte_end":82720,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82721,"byte_end":82744,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82745,"byte_end":82756,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82757,"byte_end":82767,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82768,"byte_end":82795,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82796,"byte_end":82819,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82820,"byte_end":82831,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82832,"byte_end":82842,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82843,"byte_end":82868,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82869,"byte_end":82893,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82894,"byte_end":82905,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82906,"byte_end":82916,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82917,"byte_end":82942,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82943,"byte_end":82967,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82968,"byte_end":82979,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":82980,"byte_end":82992,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93517,"byte_end":93526,"line_start":424,"line_end":424,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn thumbnail<I, P, S, '_>(&'_ I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92771,"byte_end":92828,"line_start":412,"line_end":412,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92829,"byte_end":92832,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92833,"byte_end":92931,"line_start":414,"line_end":414,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92932,"byte_end":93027,"line_start":415,"line_end":415,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93028,"byte_end":93031,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93032,"byte_end":93126,"line_start":417,"line_end":417,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93127,"byte_end":93224,"line_start":418,"line_end":418,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93225,"byte_end":93321,"line_start":419,"line_end":419,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93322,"byte_end":93358,"line_start":420,"line_end":420,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93359,"byte_end":93362,"line_start":421,"line_end":421,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93363,"byte_end":93462,"line_start":422,"line_end":422,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":93463,"byte_end":93509,"line_start":423,"line_end":423,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":101642,"byte_end":101651,"line_start":671,"line_end":671,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn filter3x3<I, P, S, '_, '_>(&'_ I, &'_ [f32]) -> ImageBuffer<P, Vec<S>>\nwhere I: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":101519,"byte_end":101570,"line_start":669,"line_end":669,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":101571,"byte_end":101634,"line_start":670,"line_end":670,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":104154,"byte_end":104160,"line_start":753,"line_end":753,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn resize<I, '_>(&'_ I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":103981,"byte_end":104039,"line_start":750,"line_end":750,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":104040,"byte_end":104098,"line_start":751,"line_end":751,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":104099,"byte_end":104146,"line_start":752,"line_end":752,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":105649,"byte_end":105653,"line_start":800,"line_end":800,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn blur<I, '_>(&'_ I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI: GenericImageView, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":105537,"byte_end":105588,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":105589,"byte_end":105641,"line_start":799,"line_end":799,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106568,"byte_end":106577,"line_start":828,"line_end":828,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn unsharpen<I, P, S, '_>(&'_ I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for minimal brightness change that will be sharpened.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106280,"byte_end":106333,"line_start":823,"line_end":823,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106334,"byte_end":106385,"line_start":824,"line_end":824,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for minimal brightness change that will be sharpened.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106386,"byte_end":106476,"line_start":825,"line_end":825,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106477,"byte_end":106480,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":106481,"byte_end":106560,"line_start":827,"line_end":827,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32446,"byte_end":32450,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn crop<I, '_>(&'_ mut I, u32, u32, u32, u32) -> SubImage<&mut I> where\nI: GenericImageView","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32326,"byte_end":32365,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32366,"byte_end":32438,"line_start":34,"line_end":34,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32817,"byte_end":32825,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"fn crop_imm<I, '_>(&'_ I, u32, u32, u32, u32) -> SubImage<&I> where\nI: GenericImageView","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32694,"byte_end":32736,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32737,"byte_end":32809,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35609,"byte_end":35623,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33437,"byte_end":33500,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33501,"byte_end":33504,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33505,"byte_end":33602,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33603,"byte_end":33688,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33689,"byte_end":33726,"line_start":81,"line_end":81,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33727,"byte_end":33761,"line_start":82,"line_end":82,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33762,"byte_end":33813,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33814,"byte_end":33817,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33818,"byte_end":33911,"line_start":85,"line_end":85,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":33912,"byte_end":34011,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34012,"byte_end":34032,"line_start":87,"line_end":87,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34033,"byte_end":34036,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34037,"byte_end":34093,"line_start":89,"line_end":89,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34094,"byte_end":34155,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34156,"byte_end":34206,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34207,"byte_end":34210,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34211,"byte_end":34310,"line_start":93,"line_end":93,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34311,"byte_end":34404,"line_start":94,"line_end":94,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34405,"byte_end":34478,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34479,"byte_end":34482,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34483,"byte_end":34494,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34495,"byte_end":34525,"line_start":98,"line_end":98,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34526,"byte_end":34581,"line_start":99,"line_end":99,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34582,"byte_end":34641,"line_start":100,"line_end":100,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34642,"byte_end":34710,"line_start":101,"line_end":101,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34711,"byte_end":34714,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34715,"byte_end":34817,"line_start":103,"line_end":103,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34818,"byte_end":34821,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34822,"byte_end":34833,"line_start":105,"line_end":105,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34834,"byte_end":34906,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34907,"byte_end":34944,"line_start":107,"line_end":107,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34945,"byte_end":34948,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34949,"byte_end":34970,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":34971,"byte_end":35001,"line_start":110,"line_end":110,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35002,"byte_end":35045,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35046,"byte_end":35067,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35068,"byte_end":35089,"line_start":113,"line_end":113,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35090,"byte_end":35093,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35094,"byte_end":35157,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35158,"byte_end":35161,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35162,"byte_end":35177,"line_start":117,"line_end":117,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35178,"byte_end":35219,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35220,"byte_end":35249,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35250,"byte_end":35269,"line_start":120,"line_end":120,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35270,"byte_end":35273,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35274,"byte_end":35316,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35317,"byte_end":35320,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35321,"byte_end":35332,"line_start":124,"line_end":124,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35333,"byte_end":35405,"line_start":125,"line_end":125,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35406,"byte_end":35458,"line_start":126,"line_end":126,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35459,"byte_end":35499,"line_start":127,"line_end":127,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35500,"byte_end":35555,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35556,"byte_end":35563,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35564,"byte_end":35567,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":35568,"byte_end":35601,"line_start":131,"line_end":131,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":38928,"byte_end":38935,"line_start":215,"line_end":215,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn overlay<I, J, '_, '_>(&'_ mut I, &'_ J, i64, i64) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":38871,"byte_end":38920,"line_start":214,"line_end":214,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40040,"byte_end":40044,"line_start":250,"line_end":250,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"fn tile<I, J, '_, '_>(&'_ mut I, &'_ J) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39722,"byte_end":39770,"line_start":238,"line_end":238,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39771,"byte_end":39774,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39775,"byte_end":39789,"line_start":240,"line_end":240,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39790,"byte_end":39803,"line_start":241,"line_end":241,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39804,"byte_end":39831,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39832,"byte_end":39835,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39836,"byte_end":39881,"line_start":244,"line_end":244,"column_start":1,"column_end":46}},{"value":"/ let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39882,"byte_end":39930,"line_start":245,"line_end":245,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39931,"byte_end":39934,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ image::imageops::tile(&mut img, &tile);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39935,"byte_end":39978,"line_start":247,"line_end":247,"column_start":1,"column_end":44}},{"value":"/ img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":39979,"byte_end":40024,"line_start":248,"line_end":248,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40025,"byte_end":40032,"line_start":249,"line_end":249,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40817,"byte_end":40834,"line_start":276,"line_end":276,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"fn vertical_gradient<S, P, I, '_, '_, '_>(&'_ mut I, &'_ P, &'_ P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40365,"byte_end":40415,"line_start":262,"line_end":262,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40416,"byte_end":40419,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40420,"byte_end":40467,"line_start":264,"line_end":264,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40468,"byte_end":40471,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40472,"byte_end":40486,"line_start":266,"line_end":266,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40487,"byte_end":40500,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40501,"byte_end":40541,"line_start":268,"line_end":268,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40542,"byte_end":40545,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40546,"byte_end":40589,"line_start":270,"line_end":270,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40590,"byte_end":40640,"line_start":271,"line_end":271,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40641,"byte_end":40695,"line_start":272,"line_end":272,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40696,"byte_end":40699,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40700,"byte_end":40761,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/ img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":40762,"byte_end":40809,"line_start":275,"line_end":275,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41836,"byte_end":41855,"line_start":309,"line_end":309,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"fn horizontal_gradient<S, P, I, '_, '_, '_>(&'_ mut I, &'_ P, &'_ P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41378,"byte_end":41430,"line_start":295,"line_end":295,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41431,"byte_end":41434,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41435,"byte_end":41482,"line_start":297,"line_end":297,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41483,"byte_end":41486,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41487,"byte_end":41501,"line_start":299,"line_end":299,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41502,"byte_end":41515,"line_start":300,"line_end":300,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41516,"byte_end":41556,"line_start":301,"line_end":301,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41557,"byte_end":41560,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41561,"byte_end":41604,"line_start":303,"line_end":303,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41605,"byte_end":41655,"line_start":304,"line_end":304,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41656,"byte_end":41710,"line_start":305,"line_end":305,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41711,"byte_end":41714,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41715,"byte_end":41778,"line_start":307,"line_end":307,"column_start":1,"column_end":64}},{"value":"/ img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":41779,"byte_end":41828,"line_start":308,"line_end":308,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":42469,"byte_end":42476,"line_start":329,"line_end":329,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn replace<I, J, '_, '_>(&'_ mut I, &'_ J, i64, i64) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":42396,"byte_end":42461,"line_start":328,"line_end":328,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":714},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":831},{"krate":0,"index":914},{"krate":0,"index":3511},{"krate":0,"index":3513},{"krate":0,"index":3515},{"krate":0,"index":3517},{"krate":0,"index":3518},{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":917},{"krate":0,"index":3527},{"krate":0,"index":3532},{"krate":0,"index":3534},{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3539},{"krate":0,"index":3540},{"krate":0,"index":3543},{"krate":0,"index":919},{"krate":0,"index":921}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":111933,"byte_end":111964,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118882,"byte_end":118886,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn load<R>(R, ImageFormat) -> ImageResult<DynamicImage> where R: BufRead +\nSeek","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader.","sig":null,"attributes":[{"value":"/ Create a new image from a Reader.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118535,"byte_end":118572,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118573,"byte_end":118576,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118577,"byte_end":118645,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118646,"byte_end":118705,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118706,"byte_end":118709,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118710,"byte_end":118756,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118757,"byte_end":118760,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118761,"byte_end":118802,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":118803,"byte_end":118829,"line_start":34,"line_end":34,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":796},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":119062,"byte_end":119068,"line_start":41,"line_end":41,"column_start":10,"column_end":16},"name":"Result","qualname":"::io::free_functions::DecoderVisitor::Result","value":"type Result;","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128635,"byte_end":128647,"line_start":289,"line_end":289,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn guess_format<'_>(&'_ [u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128374,"byte_end":128414,"line_start":284,"line_end":284,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128415,"byte_end":128418,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128419,"byte_end":128512,"line_start":286,"line_end":286,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128513,"byte_end":128555,"line_start":287,"line_end":287,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":128556,"byte_end":128627,"line_start":288,"line_end":288,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":886},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131143,"byte_end":131149,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129401,"byte_end":129433,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129434,"byte_end":129437,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129438,"byte_end":129531,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129532,"byte_end":129627,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129628,"byte_end":129631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129632,"byte_end":129644,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129645,"byte_end":129648,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129649,"byte_end":129747,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129748,"byte_end":129845,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129846,"byte_end":129849,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129850,"byte_end":129863,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129864,"byte_end":129892,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129893,"byte_end":129921,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129922,"byte_end":129965,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":129966,"byte_end":130016,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130017,"byte_end":130036,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130037,"byte_end":130051,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130052,"byte_end":130059,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130060,"byte_end":130063,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130064,"byte_end":130157,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130158,"byte_end":130254,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130255,"byte_end":130354,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130355,"byte_end":130358,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130359,"byte_end":130366,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130367,"byte_end":130395,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130396,"byte_end":130424,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130425,"byte_end":130468,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130469,"byte_end":130493,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130494,"byte_end":130521,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130522,"byte_end":130525,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130526,"byte_end":130556,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130557,"byte_end":130571,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130572,"byte_end":130587,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130588,"byte_end":130591,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130592,"byte_end":130647,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130648,"byte_end":130678,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130679,"byte_end":130720,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130721,"byte_end":130777,"line_start":49,"line_end":49,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130778,"byte_end":130781,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(feature = \"pnm\")]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130782,"byte_end":130811,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130812,"byte_end":130845,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130846,"byte_end":130860,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130861,"byte_end":130868,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130869,"byte_end":130872,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130873,"byte_end":130971,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":130972,"byte_end":131039,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131040,"byte_end":131043,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131044,"byte_end":131082,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131083,"byte_end":131131,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131886,"byte_end":131889,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131384,"byte_end":131438,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131443,"byte_end":131446,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131451,"byte_end":131519,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131524,"byte_end":131583,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131588,"byte_end":131591,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131596,"byte_end":131679,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131684,"byte_end":131763,"line_start":77,"line_end":77,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131768,"byte_end":131771,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131776,"byte_end":131832,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131837,"byte_end":131874,"line_start":80,"line_end":80,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132268,"byte_end":132279,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132066,"byte_end":132111,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132116,"byte_end":132119,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132124,"byte_end":132192,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132197,"byte_end":132256,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132537,"byte_end":132543,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn format<'_>(&'_ Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132485,"byte_end":132525,"line_start":101,"line_end":101,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132678,"byte_end":132688,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn set_format<'_>(&'_ mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132607,"byte_end":132666,"line_start":106,"line_end":106,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133018,"byte_end":133030,"line_start":115,"line_end":115,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn clear_format<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132770,"byte_end":132825,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132830,"byte_end":132833,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132838,"byte_end":132932,"line_start":113,"line_end":113,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":132937,"byte_end":133006,"line_start":114,"line_end":114,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133127,"byte_end":133136,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"no_limits","qualname":"<Reader<R>>::no_limits","value":"fn no_limits<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disable all decoding limits.\n","sig":null,"attributes":[{"value":"/ Disable all decoding limits.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133083,"byte_end":133115,"line_start":119,"line_end":119,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133263,"byte_end":133269,"line_start":125,"line_end":125,"column_start":12,"column_end":18},"name":"limits","qualname":"<Reader<R>>::limits","value":"fn limits<'_>(&'_ mut Self, super::Limits)","parent":null,"children":[],"decl_id":null,"docs":" Set a custom set of decoding limits.\n","sig":null,"attributes":[{"value":"/ Set a custom set of decoding limits.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133211,"byte_end":133251,"line_start":124,"line_end":124,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133381,"byte_end":133391,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133347,"byte_end":133369,"line_start":129,"line_end":129,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133874,"byte_end":133878,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133468,"byte_end":133526,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133531,"byte_end":133534,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133539,"byte_end":133601,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133606,"byte_end":133609,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133614,"byte_end":133708,"line_start":140,"line_end":140,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133713,"byte_end":133793,"line_start":141,"line_end":141,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133798,"byte_end":133801,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133806,"byte_end":133862,"line_start":143,"line_end":143,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135558,"byte_end":135577,"line_start":189,"line_end":189,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134284,"byte_end":134354,"line_start":161,"line_end":161,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134359,"byte_end":134362,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134367,"byte_end":134456,"line_start":163,"line_end":163,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134461,"byte_end":134551,"line_start":164,"line_end":164,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134556,"byte_end":134606,"line_start":165,"line_end":165,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134611,"byte_end":134614,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134619,"byte_end":134711,"line_start":167,"line_end":167,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134716,"byte_end":134804,"line_start":168,"line_end":168,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134809,"byte_end":134837,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134842,"byte_end":134845,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134850,"byte_end":134941,"line_start":171,"line_end":171,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134946,"byte_end":134985,"line_start":172,"line_end":172,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134990,"byte_end":134993,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134998,"byte_end":135010,"line_start":174,"line_end":174,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135015,"byte_end":135018,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135023,"byte_end":135131,"line_start":176,"line_end":176,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135136,"byte_end":135228,"line_start":177,"line_end":177,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135233,"byte_end":135264,"line_start":178,"line_end":178,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135269,"byte_end":135272,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135277,"byte_end":135290,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135295,"byte_end":135323,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135328,"byte_end":135356,"line_start":182,"line_end":182,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135361,"byte_end":135404,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135409,"byte_end":135455,"line_start":184,"line_end":184,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135460,"byte_end":135491,"line_start":185,"line_end":185,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135496,"byte_end":135515,"line_start":186,"line_end":186,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135520,"byte_end":135534,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":135539,"byte_end":135546,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136545,"byte_end":136560,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136332,"byte_end":136362,"line_start":211,"line_end":211,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136367,"byte_end":136370,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136375,"byte_end":136450,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136455,"byte_end":136458,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136463,"byte_end":136533,"line_start":215,"line_end":215,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136954,"byte_end":136960,"line_start":226,"line_end":226,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136734,"byte_end":136771,"line_start":221,"line_end":221,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136776,"byte_end":136779,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136784,"byte_end":136859,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136864,"byte_end":136867,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":136872,"byte_end":136942,"line_start":225,"line_end":225,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":3511},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112260,"byte_end":112272,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"LimitSupport","qualname":"::io::LimitSupport","value":"LimitSupport {  }","parent":null,"children":[{"krate":0,"index":3512}],"decl_id":null,"docs":" Set of supported strict limits for a decoder.\n","sig":null,"attributes":[{"value":"/ Set of supported strict limits for a decoder.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112115,"byte_end":112164,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112210,"byte_end":112248,"line_start":14,"line_end":14,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112342,"byte_end":112349,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"default","qualname":"<LimitSupport as std::default::Default>::default","value":"fn default() -> LimitSupport","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3527},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113815,"byte_end":113821,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"Limits","qualname":"::io::Limits","value":"Limits { max_image_width, max_image_height, max_alloc }","parent":null,"children":[{"krate":0,"index":3528},{"krate":0,"index":3529},{"krate":0,"index":3530},{"krate":0,"index":3531}],"decl_id":null,"docs":" Resource limits for decoding.","sig":null,"attributes":[{"value":"/ Resource limits for decoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112445,"byte_end":112478,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112479,"byte_end":112482,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Limits can be either *strict* or *non-strict*. Non-strict limits are best-effort","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112483,"byte_end":112567,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/ limits where the library does not guarantee that limit will not be exceeded. Do note","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112568,"byte_end":112656,"line_start":30,"line_end":30,"column_start":1,"column_end":89}},{"value":"/ that it is still considered a bug if a non-strict limit is exceeded, however as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112657,"byte_end":112740,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/ some of the underlying decoders do not support not support such limits one cannot","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112741,"byte_end":112826,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/ rely on these limits being supported. For stric limits the library makes a stronger","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112827,"byte_end":112914,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/ guarantee that the limit will not be exceeded. Exceeding a strict limit is considered","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112915,"byte_end":113004,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ a critical bug. If a decoder cannot guarantee that it will uphold a strict limit it","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113005,"byte_end":113092,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/ *must* fail with `image::error::LimitErrorKind::Unsupported`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113093,"byte_end":113158,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113159,"byte_end":113162,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Currently the only strict limits supported are the `max_image_width` and `max_image_height`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113163,"byte_end":113258,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/ limits, however more will be added in the future. [`LimitSupport`] will default to support","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113259,"byte_end":113353,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ being false and decoders should enable support for the limits they support in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113354,"byte_end":113435,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ [`ImageDecoder::set_limits`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113436,"byte_end":113469,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113470,"byte_end":113473,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The limit check should only ever fail if a limit will be exceeded or an unsupported strict","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113474,"byte_end":113568,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ limit is used.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113569,"byte_end":113587,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113588,"byte_end":113591,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`LimitSupport`]: ./struct.LimitSupport.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113592,"byte_end":113640,"line_start":46,"line_end":46,"column_start":1,"column_end":49}},{"value":"/ [`ImageDecoder::set_limits`]: ../trait.ImageDecoder.html#method.set_limits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113641,"byte_end":113719,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113765,"byte_end":113803,"line_start":49,"line_end":49,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":3528},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113920,"byte_end":113935,"line_start":52,"line_end":52,"column_start":9,"column_end":24},"name":"max_image_width","qualname":"::io::Limits::max_image_width","value":"std::option::Option<u32>","parent":{"krate":0,"index":3527},"children":[],"decl_id":null,"docs":" The maximum allowed image width. This limit is strict. The default is no limit.\n","sig":null,"attributes":[{"value":"/ The maximum allowed image width. This limit is strict. The default is no limit.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113828,"byte_end":113911,"line_start":51,"line_end":51,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":3529},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114047,"byte_end":114063,"line_start":54,"line_end":54,"column_start":9,"column_end":25},"name":"max_image_height","qualname":"::io::Limits::max_image_height","value":"std::option::Option<u32>","parent":{"krate":0,"index":3527},"children":[],"decl_id":null,"docs":" The maximum allowed image height. This limit is strict. The default is no limit.\n","sig":null,"attributes":[{"value":"/ The maximum allowed image height. This limit is strict. The default is no limit.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":113954,"byte_end":114038,"line_start":53,"line_end":53,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":3530},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114312,"byte_end":114321,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"name":"max_alloc","qualname":"::io::Limits::max_alloc","value":"std::option::Option<u64>","parent":{"krate":0,"index":3527},"children":[],"decl_id":null,"docs":" The maximum allowed sum of allocations allocated by the decoder at any one time excluding\n allocator overhead. This limit is non-strict by default and some decoders may ignore it.\n The default is 512MiB.\n","sig":null,"attributes":[{"value":"/ The maximum allowed sum of allocations allocated by the decoder at any one time excluding","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114082,"byte_end":114175,"line_start":55,"line_end":55,"column_start":5,"column_end":98}},{"value":"/ allocator overhead. This limit is non-strict by default and some decoders may ignore it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114180,"byte_end":114272,"line_start":56,"line_end":56,"column_start":5,"column_end":97}},{"value":"/ The default is 512MiB.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114277,"byte_end":114303,"line_start":57,"line_end":57,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114397,"byte_end":114404,"line_start":63,"line_end":63,"column_start":8,"column_end":15},"name":"default","qualname":"<Limits as std::default::Default>::default","value":"fn default() -> Limits","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114660,"byte_end":114669,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"no_limits","qualname":"<Limits>::no_limits","value":"fn no_limits() -> Limits","parent":null,"children":[],"decl_id":null,"docs":" Disable all limits.\n","sig":null,"attributes":[{"value":"/ Disable all limits.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114625,"byte_end":114648,"line_start":74,"line_end":74,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114943,"byte_end":114956,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"check_support","qualname":"<Limits>::check_support","value":"fn check_support<'_, '_>(&'_ Self, &'_ LimitSupport) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks that all currently set strict limits are supported.\n","sig":null,"attributes":[{"value":"/ This function checks that all currently set strict limits are supported.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114855,"byte_end":114931,"line_start":84,"line_end":84,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115168,"byte_end":115184,"line_start":91,"line_end":91,"column_start":12,"column_end":28},"name":"check_dimensions","qualname":"<Limits>::check_dimensions","value":"fn check_dimensions<'_>(&'_ Self, u32, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks the `max_image_width` and `max_image_height` limits given\n the image width and height.\n","sig":null,"attributes":[{"value":"/ This function checks the `max_image_width` and `max_image_height` limits given","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115038,"byte_end":115120,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ the image width and height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115125,"byte_end":115156,"line_start":90,"line_end":90,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115964,"byte_end":115971,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Limits>::reserve","value":"fn reserve<'_>(&'_ mut Self, u64) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks that the current limit allows for reserving the set amount\n of bytes, it then reduces the limit accordingly.\n","sig":null,"attributes":[{"value":"/ This function checks that the current limit allows for reserving the set amount","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115812,"byte_end":115895,"line_start":111,"line_end":111,"column_start":5,"column_end":88}},{"value":"/ of bytes, it then reduces the limit accordingly.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":115900,"byte_end":115952,"line_start":112,"line_end":112,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":116458,"byte_end":116471,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"reserve_usize","qualname":"<Limits>::reserve_usize","value":"fn reserve_usize<'_>(&'_ mut Self, usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function acts identically to [`reserve`], but takes a `usize` for convenience.\n","sig":null,"attributes":[{"value":"/ This function acts identically to [`reserve`], but takes a `usize` for convenience.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":116359,"byte_end":116446,"line_start":127,"line_end":127,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117155,"byte_end":117159,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"free","qualname":"<Limits>::free","value":"fn free<'_>(&'_ mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" This function increases the `max_alloc` limit with amount. Should only be used\n together with [`reserve`].","sig":null,"attributes":[{"value":"/ This function increases the `max_alloc` limit with amount. Should only be used","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":116981,"byte_end":117063,"line_start":143,"line_end":143,"column_start":5,"column_end":87}},{"value":"/ together with [`reserve`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117068,"byte_end":117098,"line_start":144,"line_end":144,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117103,"byte_end":117106,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117111,"byte_end":117143,"line_start":146,"line_end":146,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117421,"byte_end":117431,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"free_usize","qualname":"<Limits>::free_usize","value":"fn free_usize<'_>(&'_ mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" This function acts identically to [`free`], but takes a `usize` for convenience.\n","sig":null,"attributes":[{"value":"/ This function acts identically to [`free`], but takes a `usize` for convenience.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":117325,"byte_end":117409,"line_start":153,"line_end":153,"column_start":5,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":929},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":3546},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3564},{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3573},{"krate":0,"index":3574},{"krate":0,"index":3576},{"krate":0,"index":3579},{"krate":0,"index":3583},{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3588},{"krate":0,"index":3589},{"krate":0,"index":3592},{"krate":0,"index":3593},{"krate":0,"index":3595},{"krate":0,"index":3597},{"krate":0,"index":998},{"krate":0,"index":1021},{"krate":0,"index":1025},{"krate":0,"index":1067},{"krate":0,"index":3599},{"krate":0,"index":3604},{"krate":0,"index":3608},{"krate":0,"index":3612},{"krate":0,"index":3617},{"krate":0,"index":3621},{"krate":0,"index":3625},{"krate":0,"index":3634},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3646},{"krate":0,"index":3649},{"krate":0,"index":3660},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3665},{"krate":0,"index":3666},{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3671},{"krate":0,"index":1072},{"krate":0,"index":1085},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1104},{"krate":0,"index":1108},{"krate":0,"index":1118},{"krate":0,"index":1128},{"krate":0,"index":1134},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1142}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137446,"byte_end":137480,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137481,"byte_end":137484,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137485,"byte_end":137496,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137497,"byte_end":137500,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137501,"byte_end":137599,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137600,"byte_end":137699,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137700,"byte_end":137771,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137772,"byte_end":137775,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137776,"byte_end":137789,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137790,"byte_end":137807,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137808,"byte_end":137827,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137828,"byte_end":137847,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137848,"byte_end":137897,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137898,"byte_end":137933,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137934,"byte_end":137937,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137938,"byte_end":137954,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":137955,"byte_end":137999,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138000,"byte_end":138036,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138037,"byte_end":138072,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138073,"byte_end":138078,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138079,"byte_end":138094,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138095,"byte_end":138100,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138101,"byte_end":138167,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138168,"byte_end":138218,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138219,"byte_end":138222,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138223,"byte_end":138257,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138258,"byte_end":138278,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138279,"byte_end":138298,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138299,"byte_end":138328,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138329,"byte_end":138339,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138340,"byte_end":138343,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138344,"byte_end":138398,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138399,"byte_end":138453,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138454,"byte_end":138483,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138484,"byte_end":138494,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138495,"byte_end":138498,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138499,"byte_end":138531,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138532,"byte_end":138563,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138564,"byte_end":138590,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138591,"byte_end":138629,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138630,"byte_end":138635,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138636,"byte_end":138643,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":138644,"byte_end":138647,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3546},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140658,"byte_end":140669,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":3548},{"krate":0,"index":3549},{"krate":0,"index":3550}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139075,"byte_end":139122,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139123,"byte_end":139126,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139127,"byte_end":139224,"line_start":61,"line_end":61,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139225,"byte_end":139322,"line_start":62,"line_end":62,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139323,"byte_end":139419,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139420,"byte_end":139508,"line_start":64,"line_end":64,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139509,"byte_end":139608,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139609,"byte_end":139707,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139708,"byte_end":139757,"line_start":67,"line_end":67,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139758,"byte_end":139761,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139762,"byte_end":139853,"line_start":69,"line_end":69,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139854,"byte_end":139951,"line_start":70,"line_end":70,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":139952,"byte_end":140049,"line_start":71,"line_end":71,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140050,"byte_end":140147,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140148,"byte_end":140209,"line_start":73,"line_end":73,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140210,"byte_end":140213,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140214,"byte_end":140262,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140263,"byte_end":140319,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140320,"byte_end":140407,"line_start":77,"line_end":77,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140408,"byte_end":140444,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140445,"byte_end":140501,"line_start":79,"line_end":79,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140502,"byte_end":140534,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140535,"byte_end":140575,"line_start":81,"line_end":81,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140576,"byte_end":140622,"line_start":82,"line_end":82,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3548},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140747,"byte_end":140754,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":3546},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140684,"byte_end":140738,"line_start":85,"line_end":85,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3549},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140838,"byte_end":140844,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":3546},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140769,"byte_end":140829,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":3550},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141299,"byte_end":141309,"line_start":97,"line_end":97,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":3546},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140865,"byte_end":140901,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140906,"byte_end":140909,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":140914,"byte_end":140999,"line_start":93,"line_end":93,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141004,"byte_end":141096,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141101,"byte_end":141190,"line_start":95,"line_end":95,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141195,"byte_end":141290,"line_start":96,"line_end":96,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":3557},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141459,"byte_end":141471,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":3558},{"krate":0,"index":3559},{"krate":0,"index":3560},{"krate":0,"index":3561},{"krate":0,"index":3562},{"krate":0,"index":3563}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141333,"byte_end":141385,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141386,"byte_end":141396,"line_start":101,"line_end":101,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3558},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141555,"byte_end":141563,"line_start":105,"line_end":105,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141478,"byte_end":141546,"line_start":104,"line_end":104,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3559},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141649,"byte_end":141663,"line_start":108,"line_end":108,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141574,"byte_end":141640,"line_start":107,"line_end":107,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3560},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141725,"byte_end":141730,"line_start":111,"line_end":111,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141677,"byte_end":141716,"line_start":110,"line_end":110,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3561},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141817,"byte_end":141829,"line_start":114,"line_end":114,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141742,"byte_end":141808,"line_start":113,"line_end":113,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3562},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141892,"byte_end":141898,"line_start":117,"line_end":117,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141843,"byte_end":141883,"line_start":116,"line_end":116,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3563},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141985,"byte_end":141998,"line_start":120,"line_end":120,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":141910,"byte_end":141976,"line_start":119,"line_end":119,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142974,"byte_end":142990,"line_start":144,"line_end":144,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142179,"byte_end":142235,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142240,"byte_end":142243,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142248,"byte_end":142343,"line_start":130,"line_end":130,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142348,"byte_end":142417,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142422,"byte_end":142425,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142430,"byte_end":142437,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142442,"byte_end":142492,"line_start":134,"line_end":134,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142497,"byte_end":142558,"line_start":135,"line_end":135,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142563,"byte_end":142621,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142626,"byte_end":142633,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142638,"byte_end":142641,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142646,"byte_end":142658,"line_start":139,"line_end":139,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142663,"byte_end":142666,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142671,"byte_end":142766,"line_start":141,"line_end":141,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142771,"byte_end":142862,"line_start":142,"line_end":142,"column_start":5,"column_end":96}},{"value":"/ where it can surely accommodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142867,"byte_end":142962,"line_start":143,"line_end":143,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144252,"byte_end":144271,"line_start":174,"line_end":174,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143438,"byte_end":143497,"line_start":158,"line_end":158,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143502,"byte_end":143505,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143510,"byte_end":143600,"line_start":160,"line_end":160,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143605,"byte_end":143690,"line_start":161,"line_end":161,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143695,"byte_end":143698,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143703,"byte_end":143710,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143715,"byte_end":143765,"line_start":164,"line_end":164,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143770,"byte_end":143834,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143839,"byte_end":143900,"line_start":166,"line_end":166,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143905,"byte_end":143912,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143917,"byte_end":143920,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143925,"byte_end":143937,"line_start":169,"line_end":169,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143942,"byte_end":143945,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":143950,"byte_end":144045,"line_start":171,"line_end":171,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144050,"byte_end":144140,"line_start":172,"line_end":172,"column_start":5,"column_end":95}},{"value":"/ where it can surely accommodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144145,"byte_end":144240,"line_start":173,"line_end":173,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144897,"byte_end":144908,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn strides_cwh<'_>(&'_ Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144722,"byte_end":144781,"line_start":188,"line_end":188,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144786,"byte_end":144789,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144794,"byte_end":144865,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":144870,"byte_end":144885,"line_start":191,"line_end":191,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145225,"byte_end":145232,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn extents<'_>(&'_ Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145023,"byte_end":145074,"line_start":196,"line_end":196,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145079,"byte_end":145082,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145087,"byte_end":145180,"line_start":198,"line_end":198,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145185,"byte_end":145213,"line_start":199,"line_end":199,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145653,"byte_end":145659,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145401,"byte_end":145455,"line_start":208,"line_end":208,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145460,"byte_end":145463,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145468,"byte_end":145558,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145563,"byte_end":145641,"line_start":211,"line_end":211,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147812,"byte_end":147822,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn min_length<'_>(&'_ Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145747,"byte_end":145837,"line_start":216,"line_end":216,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145842,"byte_end":145845,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145850,"byte_end":145945,"line_start":218,"line_end":218,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":145950,"byte_end":146040,"line_start":219,"line_end":219,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146045,"byte_end":146136,"line_start":220,"line_end":220,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146141,"byte_end":146198,"line_start":221,"line_end":221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146203,"byte_end":146206,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146211,"byte_end":146228,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146233,"byte_end":146236,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146241,"byte_end":146325,"line_start":225,"line_end":225,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146330,"byte_end":146421,"line_start":226,"line_end":226,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146426,"byte_end":146429,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146434,"byte_end":146459,"line_start":228,"line_end":228,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146464,"byte_end":146467,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146472,"byte_end":146526,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146531,"byte_end":146555,"line_start":231,"line_end":231,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146560,"byte_end":146577,"line_start":232,"line_end":232,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146582,"byte_end":146607,"line_start":233,"line_end":233,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146612,"byte_end":146630,"line_start":234,"line_end":234,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146635,"byte_end":146638,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146643,"byte_end":146654,"line_start":236,"line_end":236,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146659,"byte_end":146682,"line_start":237,"line_end":237,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146687,"byte_end":146706,"line_start":238,"line_end":238,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146711,"byte_end":146753,"line_start":239,"line_end":239,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146758,"byte_end":146765,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146770,"byte_end":146773,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146778,"byte_end":146870,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146875,"byte_end":146965,"line_start":243,"line_end":243,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146970,"byte_end":146973,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":146978,"byte_end":147006,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147011,"byte_end":147014,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147019,"byte_end":147111,"line_start":247,"line_end":247,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147116,"byte_end":147210,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147215,"byte_end":147270,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147275,"byte_end":147278,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147283,"byte_end":147307,"line_start":251,"line_end":251,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147312,"byte_end":147329,"line_start":252,"line_end":252,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147334,"byte_end":147359,"line_start":253,"line_end":253,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147364,"byte_end":147382,"line_start":254,"line_end":254,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147387,"byte_end":147390,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147395,"byte_end":147406,"line_start":256,"line_end":256,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147411,"byte_end":147427,"line_start":257,"line_end":257,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147432,"byte_end":147451,"line_start":258,"line_end":258,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147456,"byte_end":147479,"line_start":259,"line_end":259,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147484,"byte_end":147513,"line_start":260,"line_end":260,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147518,"byte_end":147553,"line_start":261,"line_end":261,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147558,"byte_end":147565,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147570,"byte_end":147573,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147578,"byte_end":147672,"line_start":264,"line_end":264,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147677,"byte_end":147770,"line_start":265,"line_end":265,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":147775,"byte_end":147800,"line_start":266,"line_end":266,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":148155,"byte_end":148159,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn fits<'_>(&'_ Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":148089,"byte_end":148143,"line_start":276,"line_end":276,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":149279,"byte_end":149298,"line_start":303,"line_end":303,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn has_aliased_samples<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":148929,"byte_end":148978,"line_start":298,"line_end":298,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":148983,"byte_end":148986,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":148991,"byte_end":149084,"line_start":300,"line_end":300,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":149089,"byte_end":149183,"line_start":301,"line_end":301,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":149188,"byte_end":149267,"line_start":302,"line_end":302,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150543,"byte_end":150552,"line_start":333,"line_end":333,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn is_normal<'_>(&'_ Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150033,"byte_end":150098,"line_start":326,"line_end":326,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150103,"byte_end":150106,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150111,"byte_end":150204,"line_start":328,"line_end":328,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150209,"byte_end":150304,"line_start":329,"line_end":329,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150309,"byte_end":150401,"line_start":330,"line_end":330,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150406,"byte_end":150500,"line_start":331,"line_end":331,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":150505,"byte_end":150531,"line_start":332,"line_end":332,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152253,"byte_end":152262,"line_start":388,"line_end":388,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn in_bounds<'_>(&'_ Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":151911,"byte_end":151972,"line_start":383,"line_end":383,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":151977,"byte_end":151980,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":151985,"byte_end":152074,"line_start":385,"line_end":385,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152079,"byte_end":152173,"line_start":386,"line_end":386,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this property of course follows.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152178,"byte_end":152241,"line_start":387,"line_end":387,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152536,"byte_end":152541,"line_start":395,"line_end":395,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn index<'_>(&'_ Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152389,"byte_end":152434,"line_start":392,"line_end":392,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152439,"byte_end":152442,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152447,"byte_end":152524,"line_start":394,"line_end":394,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153136,"byte_end":153157,"line_start":408,"line_end":408,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn index_ignoring_bounds<'_>(&'_ Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152765,"byte_end":152824,"line_start":403,"line_end":403,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152829,"byte_end":152832,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152837,"byte_end":152926,"line_start":405,"line_end":405,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":152931,"byte_end":153025,"line_start":406,"line_end":406,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153030,"byte_end":153124,"line_start":407,"line_end":407,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154088,"byte_end":154103,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn in_bounds_index<'_>(&'_ Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153787,"byte_end":153827,"line_start":424,"line_end":424,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153832,"byte_end":153835,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153840,"byte_end":153932,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":153937,"byte_end":154032,"line_start":427,"line_end":427,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154037,"byte_end":154076,"line_start":428,"line_end":428,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154630,"byte_end":154639,"line_start":439,"line_end":439,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn shrink_to<'_>(&'_ mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154305,"byte_end":154370,"line_start":434,"line_end":434,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154375,"byte_end":154378,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154383,"byte_end":154471,"line_start":436,"line_end":436,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154476,"byte_end":154571,"line_start":437,"line_end":437,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154576,"byte_end":154618,"line_start":438,"line_end":438,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155314,"byte_end":155325,"line_start":466,"line_end":466,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn strides_cwh<'_>(&'_ Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155139,"byte_end":155198,"line_start":462,"line_end":462,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155203,"byte_end":155206,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155211,"byte_end":155282,"line_start":464,"line_end":464,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155287,"byte_end":155302,"line_start":465,"line_end":465,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155607,"byte_end":155614,"line_start":474,"line_end":474,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn extents<'_>(&'_ Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155405,"byte_end":155456,"line_start":470,"line_end":470,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155461,"byte_end":155464,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155469,"byte_end":155562,"line_start":472,"line_end":472,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155567,"byte_end":155595,"line_start":473,"line_end":473,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155942,"byte_end":155948,"line_start":482,"line_end":482,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155690,"byte_end":155744,"line_start":478,"line_end":478,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155749,"byte_end":155752,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155757,"byte_end":155847,"line_start":480,"line_end":480,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155852,"byte_end":155930,"line_start":481,"line_end":481,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156062,"byte_end":156068,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn as_ref<T, '_>(&'_ Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156016,"byte_end":156050,"line_start":486,"line_end":486,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156359,"byte_end":156365,"line_start":499,"line_end":499,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn as_mut<T, '_>(&'_ mut Self) -> FlatSamples<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156305,"byte_end":156347,"line_start":498,"line_end":498,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156661,"byte_end":156667,"line_start":511,"line_end":511,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn to_vec<T, '_>(&'_ Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156610,"byte_end":156649,"line_start":510,"line_end":510,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157953,"byte_end":157963,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn get_sample<T, '_>(&'_ Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156933,"byte_end":156972,"line_start":523,"line_end":523,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156977,"byte_end":156980,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":156985,"byte_end":157080,"line_start":525,"line_end":525,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157085,"byte_end":157163,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157168,"byte_end":157171,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157176,"byte_end":157183,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157188,"byte_end":157216,"line_start":529,"line_end":529,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157221,"byte_end":157280,"line_start":530,"line_end":530,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157285,"byte_end":157288,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157293,"byte_end":157333,"line_start":532,"line_end":532,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157338,"byte_end":157388,"line_start":533,"line_end":533,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157393,"byte_end":157396,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157401,"byte_end":157434,"line_start":535,"line_end":535,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157439,"byte_end":157489,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157494,"byte_end":157501,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157506,"byte_end":157509,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157514,"byte_end":157604,"line_start":539,"line_end":539,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157609,"byte_end":157690,"line_start":540,"line_end":540,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157695,"byte_end":157790,"line_start":541,"line_end":541,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157795,"byte_end":157882,"line_start":542,"line_end":542,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":157887,"byte_end":157941,"line_start":543,"line_end":543,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159576,"byte_end":159590,"line_start":578,"line_end":578,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn get_mut_sample<T, '_>(&'_ mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158166,"byte_end":158213,"line_start":552,"line_end":552,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158218,"byte_end":158221,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158226,"byte_end":158315,"line_start":554,"line_end":554,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158320,"byte_end":158407,"line_start":555,"line_end":555,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158412,"byte_end":158507,"line_start":556,"line_end":556,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158512,"byte_end":158575,"line_start":557,"line_end":557,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158580,"byte_end":158583,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158588,"byte_end":158682,"line_start":559,"line_end":559,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158687,"byte_end":158756,"line_start":560,"line_end":560,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158761,"byte_end":158764,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158769,"byte_end":158776,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158781,"byte_end":158809,"line_start":563,"line_end":563,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158814,"byte_end":158877,"line_start":564,"line_end":564,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158882,"byte_end":158885,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158890,"byte_end":158951,"line_start":566,"line_end":566,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":158956,"byte_end":159007,"line_start":567,"line_end":567,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159012,"byte_end":159015,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159020,"byte_end":159053,"line_start":569,"line_end":569,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159058,"byte_end":159112,"line_start":570,"line_end":570,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159117,"byte_end":159124,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159129,"byte_end":159132,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159137,"byte_end":159227,"line_start":573,"line_end":573,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159232,"byte_end":159313,"line_start":574,"line_end":574,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159318,"byte_end":159413,"line_start":575,"line_end":575,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159418,"byte_end":159505,"line_start":576,"line_end":576,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159510,"byte_end":159564,"line_start":577,"line_end":577,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160258,"byte_end":160265,"line_start":594,"line_end":594,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn as_view<P, '_>(&'_ Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: PixelWithColorType, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159846,"byte_end":159903,"line_start":588,"line_end":588,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159908,"byte_end":159911,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":159916,"byte_end":160006,"line_start":590,"line_end":590,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160011,"byte_end":160105,"line_start":591,"line_end":591,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160110,"byte_end":160204,"line_start":592,"line_end":592,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160209,"byte_end":160246,"line_start":593,"line_end":593,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161869,"byte_end":161893,"line_start":633,"line_end":633,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn as_view_with_mut_samples<P, '_>(&'_ mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: PixelWithColorType,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160904,"byte_end":160963,"line_start":618,"line_end":618,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160968,"byte_end":160971,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":160976,"byte_end":161068,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161073,"byte_end":161164,"line_start":621,"line_end":621,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161169,"byte_end":161262,"line_start":622,"line_end":622,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161267,"byte_end":161298,"line_start":623,"line_end":623,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161303,"byte_end":161306,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161311,"byte_end":161401,"line_start":625,"line_end":625,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161406,"byte_end":161500,"line_start":626,"line_end":626,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161505,"byte_end":161599,"line_start":627,"line_end":627,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161604,"byte_end":161641,"line_start":628,"line_end":628,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161646,"byte_end":161649,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161654,"byte_end":161748,"line_start":630,"line_end":630,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161753,"byte_end":161839,"line_start":631,"line_end":631,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":161844,"byte_end":161857,"line_start":632,"line_end":632,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":163283,"byte_end":163294,"line_start":668,"line_end":668,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn as_view_mut<P, '_>(&'_ mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: PixelWithColorType,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162540,"byte_end":162585,"line_start":657,"line_end":657,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162590,"byte_end":162593,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162598,"byte_end":162688,"line_start":659,"line_end":659,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162693,"byte_end":162780,"line_start":660,"line_end":660,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162785,"byte_end":162852,"line_start":661,"line_end":661,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162857,"byte_end":162860,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162865,"byte_end":162960,"line_start":663,"line_end":663,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":162965,"byte_end":163058,"line_start":664,"line_end":664,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":163063,"byte_end":163158,"line_start":665,"line_end":665,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":163163,"byte_end":163238,"line_start":666,"line_end":666,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":163243,"byte_end":163271,"line_start":667,"line_end":667,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164319,"byte_end":164327,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn as_slice<T, '_>(&'_ Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164095,"byte_end":164127,"line_start":696,"line_end":696,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164132,"byte_end":164135,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164140,"byte_end":164232,"line_start":698,"line_end":698,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164237,"byte_end":164307,"line_start":699,"line_end":699,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164655,"byte_end":164667,"line_start":711,"line_end":711,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn as_mut_slice<T, '_>(&'_ mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164431,"byte_end":164463,"line_start":707,"line_end":707,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164468,"byte_end":164471,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164476,"byte_end":164568,"line_start":709,"line_end":709,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164573,"byte_end":164643,"line_start":710,"line_end":710,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165115,"byte_end":165126,"line_start":723,"line_end":723,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn image_slice<T, '_>(&'_ Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164779,"byte_end":164841,"line_start":718,"line_end":718,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164846,"byte_end":164849,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164854,"byte_end":164949,"line_start":720,"line_end":720,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":164954,"byte_end":165049,"line_start":721,"line_end":721,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165054,"byte_end":165103,"line_start":722,"line_end":722,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165561,"byte_end":165576,"line_start":741,"line_end":741,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn image_mut_slice<T, '_>(&'_ mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165490,"byte_end":165549,"line_start":740,"line_end":740,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":166248,"byte_end":166263,"line_start":763,"line_end":763,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn try_into_buffer<P>(Self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>\nwhere P: PixelWithColorType + 'static, P::Subpixel: 'static,\nBuffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165952,"byte_end":165991,"line_start":758,"line_end":758,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":165996,"byte_end":165999,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":166004,"byte_end":166100,"line_start":760,"line_end":760,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":166105,"byte_end":166200,"line_start":761,"line_end":761,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":166205,"byte_end":166236,"line_start":762,"line_end":762,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169183,"byte_end":169193,"line_start":840,"line_end":840,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn min_length<'_>(&'_ Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167118,"byte_end":167208,"line_start":789,"line_end":789,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167213,"byte_end":167216,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167221,"byte_end":167316,"line_start":791,"line_end":791,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167321,"byte_end":167411,"line_start":792,"line_end":792,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167416,"byte_end":167507,"line_start":793,"line_end":793,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167512,"byte_end":167569,"line_start":794,"line_end":794,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167574,"byte_end":167577,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167582,"byte_end":167599,"line_start":796,"line_end":796,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167604,"byte_end":167607,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167612,"byte_end":167696,"line_start":798,"line_end":798,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167701,"byte_end":167792,"line_start":799,"line_end":799,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167797,"byte_end":167800,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167805,"byte_end":167830,"line_start":801,"line_end":801,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167835,"byte_end":167838,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167843,"byte_end":167897,"line_start":803,"line_end":803,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167902,"byte_end":167926,"line_start":804,"line_end":804,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167931,"byte_end":167948,"line_start":805,"line_end":805,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167953,"byte_end":167978,"line_start":806,"line_end":806,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":167983,"byte_end":168001,"line_start":807,"line_end":807,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168006,"byte_end":168009,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168014,"byte_end":168025,"line_start":809,"line_end":809,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168030,"byte_end":168053,"line_start":810,"line_end":810,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168058,"byte_end":168077,"line_start":811,"line_end":811,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168082,"byte_end":168124,"line_start":812,"line_end":812,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168129,"byte_end":168136,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168141,"byte_end":168144,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168149,"byte_end":168241,"line_start":815,"line_end":815,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168246,"byte_end":168336,"line_start":816,"line_end":816,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168341,"byte_end":168344,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168349,"byte_end":168377,"line_start":818,"line_end":818,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168382,"byte_end":168385,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168390,"byte_end":168482,"line_start":820,"line_end":820,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168487,"byte_end":168581,"line_start":821,"line_end":821,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168586,"byte_end":168641,"line_start":822,"line_end":822,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168646,"byte_end":168649,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168654,"byte_end":168678,"line_start":824,"line_end":824,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168683,"byte_end":168700,"line_start":825,"line_end":825,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168705,"byte_end":168730,"line_start":826,"line_end":826,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168735,"byte_end":168753,"line_start":827,"line_end":827,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168758,"byte_end":168761,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168766,"byte_end":168777,"line_start":829,"line_end":829,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168782,"byte_end":168798,"line_start":830,"line_end":830,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168803,"byte_end":168822,"line_start":831,"line_end":831,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168827,"byte_end":168850,"line_start":832,"line_end":832,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168855,"byte_end":168884,"line_start":833,"line_end":833,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168889,"byte_end":168924,"line_start":834,"line_end":834,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168929,"byte_end":168936,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168941,"byte_end":168944,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":168949,"byte_end":169043,"line_start":837,"line_end":837,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169048,"byte_end":169141,"line_start":838,"line_end":838,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169146,"byte_end":169171,"line_start":839,"line_end":839,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169330,"byte_end":169334,"line_start":845,"line_end":845,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn fits<'_>(&'_ Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169264,"byte_end":169318,"line_start":844,"line_end":844,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169755,"byte_end":169774,"line_start":854,"line_end":854,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn has_aliased_samples<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169405,"byte_end":169454,"line_start":849,"line_end":849,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169459,"byte_end":169462,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169467,"byte_end":169560,"line_start":851,"line_end":851,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169565,"byte_end":169659,"line_start":852,"line_end":852,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169664,"byte_end":169743,"line_start":853,"line_end":853,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170355,"byte_end":170364,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn is_normal<'_>(&'_ Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169845,"byte_end":169910,"line_start":858,"line_end":858,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169915,"byte_end":169918,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":169923,"byte_end":170016,"line_start":860,"line_end":860,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170021,"byte_end":170116,"line_start":861,"line_end":861,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170121,"byte_end":170213,"line_start":862,"line_end":862,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170218,"byte_end":170312,"line_start":863,"line_end":863,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170317,"byte_end":170343,"line_start":864,"line_end":864,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170789,"byte_end":170798,"line_start":874,"line_end":874,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn in_bounds<'_>(&'_ Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170447,"byte_end":170508,"line_start":869,"line_end":869,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170513,"byte_end":170516,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170521,"byte_end":170610,"line_start":871,"line_end":871,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170615,"byte_end":170709,"line_start":872,"line_end":872,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this property of course follows.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170714,"byte_end":170777,"line_start":873,"line_end":873,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171048,"byte_end":171053,"line_start":881,"line_end":881,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn index<'_>(&'_ Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170901,"byte_end":170946,"line_start":878,"line_end":878,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170951,"byte_end":170954,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":170959,"byte_end":171036,"line_start":880,"line_end":880,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171532,"byte_end":171553,"line_start":890,"line_end":890,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn index_ignoring_bounds<'_>(&'_ Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171161,"byte_end":171220,"line_start":885,"line_end":885,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171225,"byte_end":171228,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171233,"byte_end":171322,"line_start":887,"line_end":887,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171327,"byte_end":171421,"line_start":888,"line_end":888,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171426,"byte_end":171520,"line_start":889,"line_end":889,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171985,"byte_end":172000,"line_start":899,"line_end":899,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn in_bounds_index<'_>(&'_ Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171684,"byte_end":171724,"line_start":894,"line_end":894,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171729,"byte_end":171732,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171737,"byte_end":171829,"line_start":896,"line_end":896,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171834,"byte_end":171929,"line_start":897,"line_end":897,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":171934,"byte_end":171973,"line_start":898,"line_end":898,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172435,"byte_end":172444,"line_start":908,"line_end":908,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn shrink_to<'_>(&'_ mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172110,"byte_end":172175,"line_start":903,"line_end":903,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172180,"byte_end":172183,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172188,"byte_end":172276,"line_start":905,"line_end":905,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172281,"byte_end":172376,"line_start":906,"line_end":906,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172381,"byte_end":172423,"line_start":907,"line_end":907,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173330,"byte_end":173344,"line_start":934,"line_end":934,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: crate::Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172618,"byte_end":172667,"line_start":914,"line_end":914,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172672,"byte_end":172675,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172680,"byte_end":172775,"line_start":916,"line_end":916,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172780,"byte_end":172841,"line_start":917,"line_end":917,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172846,"byte_end":172849,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172854,"byte_end":172869,"line_start":919,"line_end":919,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172874,"byte_end":172877,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172882,"byte_end":172889,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172894,"byte_end":172930,"line_start":922,"line_end":922,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172935,"byte_end":172999,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173004,"byte_end":173007,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173012,"byte_end":173051,"line_start":925,"line_end":925,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173056,"byte_end":173121,"line_start":926,"line_end":926,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173126,"byte_end":173129,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173134,"byte_end":173178,"line_start":928,"line_end":928,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173183,"byte_end":173215,"line_start":929,"line_end":929,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173220,"byte_end":173223,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173228,"byte_end":173251,"line_start":931,"line_end":931,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173256,"byte_end":173306,"line_start":932,"line_end":932,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173311,"byte_end":173318,"line_start":933,"line_end":933,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3599},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174671,"byte_end":174675,"line_start":971,"line_end":971,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3602},{"krate":0,"index":3603}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":173969,"byte_end":174021,"line_start":956,"line_end":956,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174022,"byte_end":174025,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174026,"byte_end":174124,"line_start":958,"line_end":958,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174125,"byte_end":174174,"line_start":959,"line_end":959,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174175,"byte_end":174178,"line_start":960,"line_end":960,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174179,"byte_end":174277,"line_start":961,"line_end":961,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174278,"byte_end":174377,"line_start":962,"line_end":962,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174378,"byte_end":174448,"line_start":963,"line_end":963,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174449,"byte_end":174452,"line_start":964,"line_end":964,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174453,"byte_end":174475,"line_start":965,"line_end":965,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174476,"byte_end":174479,"line_start":966,"line_end":966,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174480,"byte_end":174563,"line_start":967,"line_end":967,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174564,"byte_end":174631,"line_start":968,"line_end":968,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174632,"byte_end":174635,"line_start":969,"line_end":969,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3612},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175522,"byte_end":175529,"line_start":994,"line_end":994,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3615},{"krate":0,"index":3616}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174800,"byte_end":174846,"line_start":979,"line_end":979,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174847,"byte_end":174850,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174851,"byte_end":174948,"line_start":981,"line_end":981,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":174949,"byte_end":175047,"line_start":982,"line_end":982,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175048,"byte_end":175145,"line_start":983,"line_end":983,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175146,"byte_end":175187,"line_start":984,"line_end":984,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175188,"byte_end":175191,"line_start":985,"line_end":985,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175192,"byte_end":175214,"line_start":986,"line_end":986,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175215,"byte_end":175218,"line_start":987,"line_end":987,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175219,"byte_end":175302,"line_start":988,"line_end":988,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175303,"byte_end":175340,"line_start":989,"line_end":989,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175341,"byte_end":175414,"line_start":990,"line_end":990,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175415,"byte_end":175482,"line_start":991,"line_end":991,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175483,"byte_end":175486,"line_start":992,"line_end":992,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3626},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176238,"byte_end":176246,"line_start":1013,"line_end":1013,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176115,"byte_end":176155,"line_start":1010,"line_end":1010,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176160,"byte_end":176163,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176168,"byte_end":176233,"line_start":1012,"line_end":1012,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3628},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176403,"byte_end":176421,"line_start":1018,"line_end":1018,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176253,"byte_end":176311,"line_start":1015,"line_end":1015,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176316,"byte_end":176319,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176324,"byte_end":176398,"line_start":1017,"line_end":1017,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3630},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176422,"byte_end":176432,"line_start":1018,"line_end":1018,"column_start":24,"column_end":34},"name":"0","qualname":"::flat::Error::NormalFormRequired::0","value":"flat::NormalForm","parent":{"krate":0,"index":3628},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3631},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177030,"byte_end":177040,"line_start":1029,"line_end":1029,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3625},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176440,"byte_end":176493,"line_start":1020,"line_end":1020,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176498,"byte_end":176501,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176506,"byte_end":176597,"line_start":1022,"line_end":1022,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176602,"byte_end":176642,"line_start":1023,"line_end":1023,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176647,"byte_end":176650,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176655,"byte_end":176750,"line_start":1025,"line_end":1025,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176755,"byte_end":176846,"line_start":1026,"line_end":1026,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176851,"byte_end":176946,"line_start":1027,"line_end":1027,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176951,"byte_end":177025,"line_start":1028,"line_end":1028,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3633},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177041,"byte_end":177050,"line_start":1029,"line_end":1029,"column_start":16,"column_end":25},"name":"0","qualname":"::flat::Error::WrongColor::0","value":"color::ColorType","parent":{"krate":0,"index":3631},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3625},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":176103,"byte_end":176108,"line_start":1009,"line_end":1009,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"enum Error {\n    TooLarge,\n    NormalFormRequired(NormalForm),\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":3626},{"krate":0,"index":3628},{"krate":0,"index":3631}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175654,"byte_end":175735,"line_start":1002,"line_end":1002,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175736,"byte_end":175739,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175740,"byte_end":175813,"line_start":1004,"line_end":1004,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175814,"byte_end":175890,"line_start":1005,"line_end":1005,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175891,"byte_end":175968,"line_start":1006,"line_end":1006,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":175969,"byte_end":176042,"line_start":1007,"line_end":1007,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3650},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177539,"byte_end":177548,"line_start":1042,"line_end":1042,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177316,"byte_end":177345,"line_start":1038,"line_end":1038,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177350,"byte_end":177353,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177358,"byte_end":177441,"line_start":1040,"line_end":1040,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177446,"byte_end":177534,"line_start":1041,"line_end":1041,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3652},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177778,"byte_end":177789,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177555,"byte_end":177586,"line_start":1044,"line_end":1044,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177591,"byte_end":177594,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177599,"byte_end":177687,"line_start":1046,"line_end":1046,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177692,"byte_end":177773,"line_start":1047,"line_end":1047,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3654},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178073,"byte_end":178084,"line_start":1055,"line_end":1055,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177796,"byte_end":177823,"line_start":1050,"line_end":1050,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177828,"byte_end":177831,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177836,"byte_end":177929,"line_start":1052,"line_end":1052,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177934,"byte_end":178024,"line_start":1053,"line_end":1053,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178029,"byte_end":178068,"line_start":1054,"line_end":1054,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3656},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178294,"byte_end":178308,"line_start":1061,"line_end":1061,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178091,"byte_end":178156,"line_start":1057,"line_end":1057,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178161,"byte_end":178164,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178169,"byte_end":178262,"line_start":1059,"line_end":1059,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178267,"byte_end":178289,"line_start":1060,"line_end":1060,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3658},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178524,"byte_end":178541,"line_start":1067,"line_end":1067,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":3649},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178315,"byte_end":178383,"line_start":1063,"line_end":1063,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178388,"byte_end":178391,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178396,"byte_end":178489,"line_start":1065,"line_end":1065,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178494,"byte_end":178519,"line_start":1066,"line_end":1066,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":3649},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177299,"byte_end":177309,"line_start":1037,"line_end":1037,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"enum NormalForm {\n    Unaliased,\n    PixelPacked,\n    ImagePacked,\n    RowMajorPacked,\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":3650},{"krate":0,"index":3652},{"krate":0,"index":3654},{"krate":0,"index":3656},{"krate":0,"index":3658}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177056,"byte_end":177094,"line_start":1032,"line_end":1032,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177095,"byte_end":177098,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177099,"byte_end":177198,"line_start":1034,"line_end":1034,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":177199,"byte_end":177238,"line_start":1035,"line_end":1035,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178750,"byte_end":178760,"line_start":1077,"line_end":1077,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178631,"byte_end":178662,"line_start":1074,"line_end":1074,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178667,"byte_end":178670,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178675,"byte_end":178738,"line_start":1076,"line_end":1076,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179243,"byte_end":179247,"line_start":1087,"line_end":1087,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn flat<'_>(&'_ Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178822,"byte_end":178873,"line_start":1081,"line_end":1081,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178878,"byte_end":178881,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178886,"byte_end":178975,"line_start":1083,"line_end":1083,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178980,"byte_end":179073,"line_start":1084,"line_end":1084,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179078,"byte_end":179165,"line_start":1085,"line_end":1085,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179170,"byte_end":179231,"line_start":1086,"line_end":1086,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179526,"byte_end":179533,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn samples<'_>(&'_ Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179312,"byte_end":179352,"line_start":1091,"line_end":1091,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179357,"byte_end":179360,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179365,"byte_end":179455,"line_start":1093,"line_end":1093,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179460,"byte_end":179514,"line_start":1094,"line_end":1094,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179852,"byte_end":179862,"line_start":1103,"line_end":1103,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn get_sample<'_>(&'_ Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179593,"byte_end":179655,"line_start":1099,"line_end":1099,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179660,"byte_end":179663,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179668,"byte_end":179758,"line_start":1101,"line_end":1101,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":179763,"byte_end":179840,"line_start":1102,"line_end":1102,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180737,"byte_end":180751,"line_start":1121,"line_end":1121,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn get_mut_sample<'_>(&'_ mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180195,"byte_end":180265,"line_start":1113,"line_end":1113,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180270,"byte_end":180273,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180278,"byte_end":180372,"line_start":1115,"line_end":1115,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180377,"byte_end":180472,"line_start":1116,"line_end":1116,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180477,"byte_end":180544,"line_start":1117,"line_end":1117,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180549,"byte_end":180552,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180557,"byte_end":180651,"line_start":1119,"line_end":1119,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":180656,"byte_end":180725,"line_start":1120,"line_end":1120,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181334,"byte_end":181344,"line_start":1137,"line_end":1137,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn min_length<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181152,"byte_end":181242,"line_start":1134,"line_end":1134,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181247,"byte_end":181250,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181255,"byte_end":181322,"line_start":1136,"line_end":1136,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181678,"byte_end":181689,"line_start":1145,"line_end":1145,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn image_slice<'_>(&'_ Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181415,"byte_end":181477,"line_start":1141,"line_end":1141,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181482,"byte_end":181485,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181490,"byte_end":181581,"line_start":1143,"line_end":1143,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181586,"byte_end":181666,"line_start":1144,"line_end":1144,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182146,"byte_end":182161,"line_start":1154,"line_end":1154,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn image_mut_slice<'_>(&'_ mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181782,"byte_end":181852,"line_start":1149,"line_end":1149,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181857,"byte_end":181860,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181865,"byte_end":181959,"line_start":1151,"line_end":1151,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":181964,"byte_end":182060,"line_start":1152,"line_end":1152,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182065,"byte_end":182134,"line_start":1153,"line_end":1153,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182689,"byte_end":182698,"line_start":1167,"line_end":1167,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn shrink_to<'_>(&'_ mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182359,"byte_end":182386,"line_start":1162,"line_end":1162,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182391,"byte_end":182394,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182399,"byte_end":182486,"line_start":1164,"line_end":1164,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182491,"byte_end":182584,"line_start":1165,"line_end":1165,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182589,"byte_end":182677,"line_start":1166,"line_end":1166,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183702,"byte_end":183713,"line_start":1190,"line_end":1190,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182853,"byte_end":182911,"line_start":1172,"line_end":1172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182916,"byte_end":182919,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":182924,"byte_end":183019,"line_start":1174,"line_end":1174,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183024,"byte_end":183114,"line_start":1175,"line_end":1175,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183119,"byte_end":183207,"line_start":1176,"line_end":1176,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183212,"byte_end":183288,"line_start":1177,"line_end":1177,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183293,"byte_end":183296,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183301,"byte_end":183308,"line_start":1179,"line_end":1179,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183313,"byte_end":183339,"line_start":1180,"line_end":1180,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183344,"byte_end":183365,"line_start":1181,"line_end":1181,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183370,"byte_end":183435,"line_start":1182,"line_end":1182,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183440,"byte_end":183509,"line_start":1183,"line_end":1183,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183514,"byte_end":183517,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183522,"byte_end":183553,"line_start":1185,"line_end":1185,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183558,"byte_end":183561,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183566,"byte_end":183626,"line_start":1187,"line_end":1187,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183631,"byte_end":183678,"line_start":1188,"line_end":1188,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":183683,"byte_end":183690,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184361,"byte_end":184371,"line_start":1213,"line_end":1213,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184242,"byte_end":184273,"line_start":1210,"line_end":1210,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184278,"byte_end":184281,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184286,"byte_end":184349,"line_start":1212,"line_end":1212,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184855,"byte_end":184859,"line_start":1223,"line_end":1223,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn flat<'_>(&'_ Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184433,"byte_end":184485,"line_start":1217,"line_end":1217,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184490,"byte_end":184493,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184498,"byte_end":184587,"line_start":1219,"line_end":1219,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184592,"byte_end":184685,"line_start":1220,"line_end":1220,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184690,"byte_end":184777,"line_start":1221,"line_end":1221,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184782,"byte_end":184843,"line_start":1222,"line_end":1222,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185232,"byte_end":185239,"line_start":1232,"line_end":1232,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn samples<'_>(&'_ Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184924,"byte_end":184964,"line_start":1227,"line_end":1227,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184969,"byte_end":184972,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184977,"byte_end":185067,"line_start":1229,"line_end":1229,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185072,"byte_end":185164,"line_start":1230,"line_end":1230,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185169,"byte_end":185220,"line_start":1231,"line_end":1231,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185481,"byte_end":185491,"line_start":1239,"line_end":1239,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn min_length<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185299,"byte_end":185389,"line_start":1236,"line_end":1236,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185394,"byte_end":185397,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185402,"byte_end":185469,"line_start":1238,"line_end":1238,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185802,"byte_end":185812,"line_start":1247,"line_end":1247,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn get_sample<'_>(&'_ Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185562,"byte_end":185605,"line_start":1243,"line_end":1243,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185610,"byte_end":185613,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185618,"byte_end":185708,"line_start":1245,"line_end":1245,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":185713,"byte_end":185790,"line_start":1246,"line_end":1246,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186443,"byte_end":186457,"line_start":1264,"line_end":1264,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn get_mut_sample<'_>(&'_ mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186197,"byte_end":186246,"line_start":1260,"line_end":1260,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186251,"byte_end":186254,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186259,"byte_end":186349,"line_start":1262,"line_end":1262,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186354,"byte_end":186431,"line_start":1263,"line_end":1263,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187069,"byte_end":187080,"line_start":1278,"line_end":1278,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn image_slice<'_>(&'_ Self) -> &[P::Subpixel] where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186806,"byte_end":186868,"line_start":1274,"line_end":1274,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186873,"byte_end":186876,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186881,"byte_end":186972,"line_start":1276,"line_end":1276,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":186977,"byte_end":187057,"line_start":1277,"line_end":1277,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187296,"byte_end":187311,"line_start":1286,"line_end":1286,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn image_mut_slice<'_>(&'_ mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187229,"byte_end":187284,"line_start":1285,"line_end":1285,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187779,"byte_end":187788,"line_start":1296,"line_end":1296,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn shrink_to<'_>(&'_ mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187449,"byte_end":187476,"line_start":1291,"line_end":1291,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187481,"byte_end":187484,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187489,"byte_end":187576,"line_start":1293,"line_end":1293,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187581,"byte_end":187674,"line_start":1294,"line_end":1294,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":187679,"byte_end":187767,"line_start":1295,"line_end":1295,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188895,"byte_end":188900,"line_start":1336,"line_end":1336,"column_start":8,"column_end":13},"name":"index","qualname":"<FlatSamples<Buffer> as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, (u8, u32, u32)) -> &Self::Output","parent":{"krate":2,"index":3553},"children":[],"decl_id":{"krate":2,"index":3556},"docs":" Return a reference to a single sample at specified coordinates.","sig":null,"attributes":[{"value":"/ Return a reference to a single sample at specified coordinates.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188708,"byte_end":188775,"line_start":1331,"line_end":1331,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188780,"byte_end":188783,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188788,"byte_end":188800,"line_start":1333,"line_end":1333,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188805,"byte_end":188808,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ When the coordinates are out of bounds or the index calculation fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188813,"byte_end":188887,"line_start":1335,"line_end":1335,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189506,"byte_end":189515,"line_start":1355,"line_end":1355,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<FlatSamples<Buffer> as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, (u8, u32, u32)) -> &mut Self::Output","parent":{"krate":2,"index":3557},"children":[],"decl_id":{"krate":2,"index":3559},"docs":" Return a mutable reference to a single sample at specified coordinates.","sig":null,"attributes":[{"value":"/ Return a mutable reference to a single sample at specified coordinates.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189311,"byte_end":189386,"line_start":1350,"line_end":1350,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189391,"byte_end":189394,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189399,"byte_end":189411,"line_start":1352,"line_end":1352,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189416,"byte_end":189419,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ When the coordinates are out of bounds or the index calculation fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189424,"byte_end":189498,"line_start":1354,"line_end":1354,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189965,"byte_end":189975,"line_start":1371,"line_end":1371,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<View<Buffer, P> as image::GenericImageView>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3105},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":190073,"byte_end":190079,"line_start":1375,"line_end":1375,"column_start":8,"column_end":14},"name":"bounds","qualname":"<View<Buffer, P> as image::GenericImageView>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":190188,"byte_end":190197,"line_start":1380,"line_end":1380,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"<View<Buffer, P> as image::GenericImageView>::in_bounds","value":"fn in_bounds<'_>(&'_ Self, u32, u32) -> bool","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":190308,"byte_end":190317,"line_start":1385,"line_end":1385,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<View<Buffer, P> as image::GenericImageView>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191153,"byte_end":191163,"line_start":1414,"line_end":1414,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<ViewMut<Buffer, P> as image::GenericImageView>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3105},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191261,"byte_end":191267,"line_start":1418,"line_end":1418,"column_start":8,"column_end":14},"name":"bounds","qualname":"<ViewMut<Buffer, P> as image::GenericImageView>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191376,"byte_end":191385,"line_start":1423,"line_end":1423,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"<ViewMut<Buffer, P> as image::GenericImageView>::in_bounds","value":"fn in_bounds<'_>(&'_ Self, u32, u32) -> bool","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191496,"byte_end":191505,"line_start":1428,"line_end":1428,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<ViewMut<Buffer, P> as image::GenericImageView>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192316,"byte_end":192329,"line_start":1455,"line_end":1455,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"<ViewMut<Buffer, P> as image::GenericImage>::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192805,"byte_end":192814,"line_start":1467,"line_end":1467,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"<ViewMut<Buffer, P> as image::GenericImage>::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3116},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192777,"byte_end":192797,"line_start":1466,"line_end":1466,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192946,"byte_end":192957,"line_start":1472,"line_end":1472,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"<ViewMut<Buffer, P> as image::GenericImage>::blend_pixel","value":"fn blend_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3118},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192918,"byte_end":192938,"line_start":1471,"line_end":1471,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193105,"byte_end":193109,"line_start":1478,"line_end":1478,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageError as std::convert::From>::from","value":"fn from(Error) -> ImageError","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":194192,"byte_end":194195,"line_start":1507,"line_end":1507,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10273},"children":[],"decl_id":{"krate":2,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195291,"byte_end":195302,"line_start":1536,"line_end":1536,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<NormalForm as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp<'_, '_>(&'_ Self, &'_ Self) -> Option<cmp::Ordering>","parent":{"krate":2,"index":2947},"children":[],"decl_id":{"krate":2,"index":2949},"docs":" Compares the logical preconditions.","sig":null,"attributes":[{"value":"/ Compares the logical preconditions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195164,"byte_end":195203,"line_start":1533,"line_end":1533,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195208,"byte_end":195211,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ `a < b` if the normal form `a` has less preconditions than `b`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195216,"byte_end":195283,"line_start":1535,"line_end":1535,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":1144},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7676,"byte_end":7682,"line_start":217,"line_end":217,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1491},{"krate":0,"index":1822}],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5515,"byte_end":5572,"line_start":176,"line_end":176,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5573,"byte_end":5576,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5577,"byte_end":5600,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5601,"byte_end":5604,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5605,"byte_end":5641,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5642,"byte_end":5678,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5679,"byte_end":5740,"line_start":182,"line_end":182,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5741,"byte_end":5798,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5799,"byte_end":5825,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | Rgb8, Rgba8, Gray8, GrayA8 |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5826,"byte_end":5875,"line_start":185,"line_end":185,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5876,"byte_end":5902,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | Rgb8, Rgba8, Gray8 |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5903,"byte_end":5982,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Yes | Rgb8, Rgba8 |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5983,"byte_end":6017,"line_start":188,"line_end":188,"column_start":1,"column_end":35}},{"value":"/ | AVIF   | Only 8-bit | Lossy |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6018,"byte_end":6053,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6054,"byte_end":6104,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6105,"byte_end":6143,"line_start":191,"line_end":191,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | Rgb8, Rgba8, Bgr8, Bgra8, Gray8, GrayA8 |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6144,"byte_end":6206,"line_start":192,"line_end":192,"column_start":1,"column_end":63}},{"value":"/ | OpenEXR  | Rgb32F, Rgba32F (no dwa compression) | Rgb32F, Rgba32F (no dwa compression) |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6207,"byte_end":6301,"line_start":193,"line_end":193,"column_start":1,"column_end":95}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6302,"byte_end":6330,"line_start":194,"line_end":194,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6331,"byte_end":6334,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6335,"byte_end":6376,"line_start":196,"line_end":196,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6377,"byte_end":6380,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6381,"byte_end":6473,"line_start":198,"line_end":198,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6474,"byte_end":6572,"line_start":199,"line_end":199,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6573,"byte_end":6666,"line_start":200,"line_end":200,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6667,"byte_end":6766,"line_start":201,"line_end":201,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6767,"byte_end":6863,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6864,"byte_end":6867,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6868,"byte_end":6959,"line_start":204,"line_end":204,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":6960,"byte_end":7032,"line_start":205,"line_end":205,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7033,"byte_end":7036,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7037,"byte_end":7131,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7132,"byte_end":7189,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7190,"byte_end":7284,"line_start":209,"line_end":209,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7285,"byte_end":7384,"line_start":210,"line_end":210,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7385,"byte_end":7483,"line_start":211,"line_end":211,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7484,"byte_end":7508,"line_start":212,"line_end":212,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7509,"byte_end":7512,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7513,"byte_end":7574,"line_start":214,"line_end":214,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7575,"byte_end":7578,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7579,"byte_end":7667,"line_start":216,"line_end":216,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":1145},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::codecs::bmp","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1426}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7775,"byte_end":7798,"line_start":220,"line_end":220,"column_start":5,"column_end":28}},{"value":"/  Decoding and Encoding of BMP Images","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201141,"byte_end":201181,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201182,"byte_end":201185,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201186,"byte_end":201244,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201245,"byte_end":201248,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201249,"byte_end":201269,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201270,"byte_end":201362,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"/  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201363,"byte_end":201417,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/mod.rs","byte_start":201418,"byte_end":201421,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":208545,"byte_end":208549,"line_start":209,"line_end":209,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageError as std::convert::From>::from","value":"fn from(DecoderError) -> ImageError","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":218997,"byte_end":219007,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::codecs::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1337}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":218968,"byte_end":218985,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":221595,"byte_end":221598,"line_start":633,"line_end":633,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"fn new(R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":221522,"byte_end":221583,"line_start":632,"line_end":632,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":223100,"byte_end":223117,"line_start":688,"line_end":688,"column_start":12,"column_end":29},"name":"set_indexed_color","qualname":"<BmpDecoder<R>>::set_indexed_color","value":"fn set_indexed_color<'_>(&'_ mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" If true, the palette in BMP does not apply to the image even if it is found.\n In other words, the output image is the indexed color.\n","sig":null,"attributes":[{"value":"/ If true, the palette in BMP does not apply to the image even if it is found.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":222945,"byte_end":223025,"line_start":686,"line_end":686,"column_start":5,"column_end":85}},{"value":"/ In other words, the output image is the indexed color.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":223030,"byte_end":223088,"line_start":687,"line_end":687,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":236997,"byte_end":237008,"line_start":1060,"line_end":1060,"column_start":12,"column_end":23},"name":"get_palette","qualname":"<BmpDecoder<R>>::get_palette","value":"fn get_palette<'_>(&'_ Self) -> Option<&[[u8; ]]>","parent":null,"children":[],"decl_id":null,"docs":" Get the palette that is embedded in the BMP image, if any.\n","sig":null,"attributes":[{"value":"/ Get the palette that is embedded in the BMP image, if any.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":236923,"byte_end":236985,"line_start":1059,"line_end":1059,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1402},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255238,"byte_end":255247,"line_start":1483,"line_end":1483,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::codecs::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255181,"byte_end":255226,"line_start":1482,"line_end":1482,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255324,"byte_end":255328,"line_start":1485,"line_end":1485,"column_start":8,"column_end":12},"name":"read","qualname":"<BmpReader<R> as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4629},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255417,"byte_end":255428,"line_start":1488,"line_end":1488,"column_start":8,"column_end":19},"name":"read_to_end","qualname":"<BmpReader<R> as std::io::Read>::read_to_end","value":"fn read_to_end<'_, '_>(&'_ mut Self, &'_ mut Vec<u8>) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4633},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255787,"byte_end":255797,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<BmpDecoder<R> as image::ImageDecoder>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3073},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255883,"byte_end":255893,"line_start":1505,"line_end":1505,"column_start":8,"column_end":18},"name":"color_type","qualname":"<BmpDecoder<R> as image::ImageDecoder>::color_type","value":"fn color_type<'_>(&'_ Self) -> ColorType","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":256115,"byte_end":256126,"line_start":1515,"line_end":1515,"column_start":8,"column_end":19},"name":"into_reader","qualname":"<BmpDecoder<R> as image::ImageDecoder>::into_reader","value":"fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3076},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":256291,"byte_end":256301,"line_start":1522,"line_end":1522,"column_start":8,"column_end":18},"name":"read_image","qualname":"<BmpDecoder<R> as image::ImageDecoder>::read_image","value":"fn read_image<'_>(Self, &'_ mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3079},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":256540,"byte_end":256563,"line_start":1529,"line_end":1529,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"<BmpDecoder<R> as image::ImageDecoderRect>::read_rect_with_progress","value":"fn read_rect_with_progress<F, '_,\n'_>(&'_ mut Self, u32, u32, u32, u32, &'_ mut [u8], F) -> ImageResult<()>\nwhere F: Fn(Progress) -> ()","parent":{"krate":0,"index":3084},"children":[],"decl_id":{"krate":0,"index":3088},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1463},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261054,"byte_end":261064,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::codecs::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":1466}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261002,"byte_end":261042,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261223,"byte_end":261226,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261152,"byte_end":261211,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261434,"byte_end":261440,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"fn encode<'_, '_>(&'_ mut Self, &'_ [u8], u32, u32, color::ColorType)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261295,"byte_end":261328,"line_start":23,"line_end":23,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261333,"byte_end":261385,"line_start":24,"line_end":24,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261390,"byte_end":261422,"line_start":25,"line_end":25,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261815,"byte_end":261834,"line_start":38,"line_end":38,"column_start":12,"column_end":31},"name":"encode_with_palette","qualname":"<BmpEncoder>::encode_with_palette","value":"fn encode_with_palette<'_, '_,\n'_>(&'_ mut Self, &'_ [u8], u32, u32, color::ColorType, Option<&'_ [[u8; ]]>)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Same as ```encode```, but allow a palette to be passed in.\n The ```palette``` is ignored for color types other than Luma/Luma-with-alpha.\n","sig":null,"attributes":[{"value":"/ Same as ```encode```, but allow a palette to be passed in.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261655,"byte_end":261717,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ The ```palette``` is ignored for color types other than Luma/Luma-with-alpha.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261722,"byte_end":261803,"line_start":37,"line_end":37,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":269407,"byte_end":269418,"line_start":243,"line_end":243,"column_start":8,"column_end":19},"name":"write_image","qualname":"<BmpEncoder as image::ImageEncoder>::write_image","value":"fn write_image<'_>(Self, &'_ [u8], u32, u32, color::ColorType)\n-> ImageResult<()>","parent":{"krate":0,"index":3093},"children":[],"decl_id":{"krate":0,"index":3094},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::codecs::jpeg","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1502},{"krate":0,"index":1505},{"krate":0,"index":1584},{"krate":0,"index":1793},{"krate":0,"index":1804}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":8268,"byte_end":8292,"line_start":235,"line_end":235,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273768,"byte_end":273808,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273809,"byte_end":273812,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273813,"byte_end":273908,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273909,"byte_end":273963,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273964,"byte_end":273967,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273968,"byte_end":273987,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":273988,"byte_end":274064,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/mod.rs","byte_start":274065,"byte_end":274068,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1551},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274551,"byte_end":274562,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::codecs::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274523,"byte_end":274539,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274741,"byte_end":274744,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274668,"byte_end":274729,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275939,"byte_end":275944,"line_start":49,"line_end":49,"column_start":12,"column_end":17},"name":"scale","qualname":"<JpegDecoder<R>>::scale","value":"fn scale<'_>(&'_ mut Self, u16, u16) -> ImageResult<(u16, u16)>","parent":null,"children":[],"decl_id":null,"docs":" Configure the decoder to scale the image during decoding.","sig":null,"attributes":[{"value":"/ Configure the decoder to scale the image during decoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275325,"byte_end":275386,"line_start":36,"line_end":36,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275391,"byte_end":275394,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This efficiently scales the image by the smallest supported","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275399,"byte_end":275462,"line_start":38,"line_end":38,"column_start":5,"column_end":68}},{"value":"/ scale factor that produces an image larger than or equal to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275467,"byte_end":275530,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ the requested size in at least one axis. The currently","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275535,"byte_end":275593,"line_start":40,"line_end":40,"column_start":5,"column_end":63}},{"value":"/ implemented scale factors are 1/8, 1/4, 1/2 and 1.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275598,"byte_end":275652,"line_start":41,"line_end":41,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275657,"byte_end":275660,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ To generate a thumbnail of an exact size, pass the desired","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275665,"byte_end":275727,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ size and then scale to the final size using a traditional","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275732,"byte_end":275793,"line_start":44,"line_end":44,"column_start":5,"column_end":66}},{"value":"/ resampling algorithm.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275798,"byte_end":275823,"line_start":45,"line_end":45,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275828,"byte_end":275831,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The size of the image to be loaded, with the scale factor","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275836,"byte_end":275897,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ applied, is returned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":275902,"byte_end":275927,"line_start":48,"line_end":48,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276376,"byte_end":276386,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::codecs::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276319,"byte_end":276364,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276464,"byte_end":276468,"line_start":69,"line_end":69,"column_start":8,"column_end":12},"name":"read","qualname":"<JpegReader<R> as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4629},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276557,"byte_end":276568,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"read_to_end","qualname":"<JpegReader<R> as std::io::Read>::read_to_end","value":"fn read_to_end<'_, '_>(&'_ mut Self, &'_ mut Vec<u8>) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4633},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276922,"byte_end":276932,"line_start":85,"line_end":85,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<JpegDecoder<R> as image::ImageDecoder>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3073},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":277079,"byte_end":277089,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"color_type","qualname":"<JpegDecoder<R> as image::ImageDecoder>::color_type","value":"fn color_type<'_>(&'_ Self) -> ColorType","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":277183,"byte_end":277194,"line_start":96,"line_end":96,"column_start":8,"column_end":19},"name":"into_reader","qualname":"<JpegDecoder<R> as image::ImageDecoder>::into_reader","value":"fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3076},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":277544,"byte_end":277554,"line_start":106,"line_end":106,"column_start":8,"column_end":18},"name":"read_image","qualname":"<JpegDecoder<R> as image::ImageDecoder>::read_image","value":"fn read_image<'_>(Self, &'_ mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3079},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3865},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":320983,"byte_end":320999,"line_start":290,"line_end":290,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":320835,"byte_end":320899,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":320904,"byte_end":320978,"line_start":289,"line_end":289,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3867},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321040,"byte_end":321046,"line_start":293,"line_end":293,"column_start":5,"column_end":11},"name":"Inches","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321006,"byte_end":321035,"line_start":292,"line_end":292,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3869},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321083,"byte_end":321094,"line_start":296,"line_end":296,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321053,"byte_end":321078,"line_start":295,"line_end":295,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":3864},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":320812,"byte_end":320828,"line_start":287,"line_end":287,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::codecs::jpeg::encoder::PixelDensityUnit","value":"enum PixelDensityUnit { PixelAspectRatio, Inches, Centimeters, }","parent":null,"children":[{"krate":0,"index":3865},{"krate":0,"index":3867},{"krate":0,"index":3869}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":320691,"byte_end":320757,"line_start":285,"line_end":285,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321439,"byte_end":321451,"line_start":309,"line_end":309,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::codecs::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":3883},{"krate":0,"index":3884}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321099,"byte_end":321143,"line_start":299,"line_end":299,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321144,"byte_end":321147,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321148,"byte_end":321199,"line_start":301,"line_end":301,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321200,"byte_end":321203,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321204,"byte_end":321215,"line_start":303,"line_end":303,"column_start":1,"column_end":12}},{"value":"/ use image::codecs::jpeg::*;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321216,"byte_end":321247,"line_start":304,"line_end":304,"column_start":1,"column_end":32}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321248,"byte_end":321286,"line_start":305,"line_end":305,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321287,"byte_end":321374,"line_start":306,"line_end":306,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321375,"byte_end":321382,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":3883},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321514,"byte_end":321521,"line_start":311,"line_end":311,"column_start":9,"column_end":16},"name":"density","qualname":"::codecs::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":3882},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321458,"byte_end":321505,"line_start":310,"line_end":310,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":3884},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321593,"byte_end":321597,"line_start":313,"line_end":313,"column_start":9,"column_end":13},"name":"unit","qualname":"::codecs::jpeg::encoder::PixelDensity::unit","value":"codecs::jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":3882},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321539,"byte_end":321584,"line_start":312,"line_end":312,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321803,"byte_end":321806,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321644,"byte_end":321691,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321696,"byte_end":321750,"line_start":318,"line_end":318,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321755,"byte_end":321791,"line_start":319,"line_end":319,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322060,"byte_end":322067,"line_start":330,"line_end":330,"column_start":8,"column_end":15},"name":"default","qualname":"<PixelDensity as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":" Returns a pixel density with a pixel aspect ratio of 1\n","sig":null,"attributes":[{"value":"/ Returns a pixel density with a pixel aspect ratio of 1","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321994,"byte_end":322052,"line_start":329,"line_end":329,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322257,"byte_end":322268,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::codecs::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322205,"byte_end":322245,"line_start":338,"line_end":338,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322708,"byte_end":322711,"line_start":355,"line_end":355,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder<W>>::new","value":"fn new(W) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322638,"byte_end":322696,"line_start":354,"line_end":354,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322999,"byte_end":323015,"line_start":362,"line_end":362,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder<W>>::new_with_quality","value":"fn new_with_quality(W, u8) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322794,"byte_end":322861,"line_start":359,"line_end":359,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322866,"byte_end":322937,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322942,"byte_end":322987,"line_start":361,"line_end":361,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325199,"byte_end":325216,"line_start":430,"line_end":430,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder<W>>::set_pixel_density","value":"fn set_pixel_density<'_>(&'_ mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":324967,"byte_end":325031,"line_start":427,"line_end":427,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325036,"byte_end":325127,"line_start":428,"line_end":428,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325132,"byte_end":325187,"line_start":429,"line_end":429,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325548,"byte_end":325554,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder<W>>::encode","value":"fn encode<'_, '_>(&'_ mut Self, &'_ [u8], u32, u32, ColorType)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325314,"byte_end":325377,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325382,"byte_end":325434,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325439,"byte_end":325470,"line_start":436,"line_end":436,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325475,"byte_end":325478,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":325483,"byte_end":325536,"line_start":438,"line_end":438,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327385,"byte_end":327397,"line_start":485,"line_end":485,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder<W>>::encode_image","value":"fn encode_image<I, '_, '_>(&'_ mut Self, &'_ I) -> ImageResult<()> where\nI: GenericImageView, I::Pixel: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":326857,"byte_end":326885,"line_start":476,"line_end":476,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":326890,"byte_end":326893,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":326898,"byte_end":326991,"line_start":478,"line_end":478,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":326996,"byte_end":327090,"line_start":479,"line_end":479,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327095,"byte_end":327190,"line_start":480,"line_end":480,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327195,"byte_end":327286,"line_start":481,"line_end":481,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327291,"byte_end":327307,"line_start":482,"line_end":482,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327312,"byte_end":327315,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":327320,"byte_end":327373,"line_start":484,"line_end":484,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":333231,"byte_end":333242,"line_start":657,"line_end":657,"column_start":8,"column_end":19},"name":"write_image","qualname":"<JpegEncoder<W> as image::ImageEncoder>::write_image","value":"fn write_image<'_>(Self, &'_ [u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3093},"children":[],"decl_id":{"krate":0,"index":3094},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1822},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::codecs::png","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","parent":null,"children":[{"krate":0,"index":1823},{"krate":0,"index":1826},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1836},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1910},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1952},{"krate":0,"index":1956},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1982},{"krate":0,"index":1990},{"krate":0,"index":1996},{"krate":0,"index":2008},{"krate":0,"index":3897},{"krate":0,"index":3908},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3919},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3935},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3943},{"krate":0,"index":3947},{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3955},{"krate":0,"index":3956},{"krate":0,"index":2013},{"krate":0,"index":2021},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2041},{"krate":0,"index":2043},{"krate":0,"index":2045}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":8364,"byte_end":8387,"line_start":239,"line_end":239,"column_start":5,"column_end":28}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354439,"byte_end":354478,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354479,"byte_end":354482,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354483,"byte_end":354573,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354574,"byte_end":354577,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354578,"byte_end":354597,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354598,"byte_end":354655,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":354656,"byte_end":354659,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1940},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355653,"byte_end":355662,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::codecs::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355463,"byte_end":355477,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355478,"byte_end":355481,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355482,"byte_end":355541,"line_start":31,"line_end":31,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355542,"byte_end":355603,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355604,"byte_end":355641,"line_start":33,"line_end":33,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":356581,"byte_end":356585,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"read","qualname":"<PngReader<R> as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4629},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357338,"byte_end":357349,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"read_to_end","qualname":"<PngReader<R> as std::io::Read>::read_to_end","value":"fn read_to_end<'_, '_>(&'_ mut Self, &'_ mut Vec<u8>) -> io::Result<usize>","parent":{"krate":1,"index":4628},"children":[],"decl_id":{"krate":1,"index":4633},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357867,"byte_end":357877,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::codecs::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357840,"byte_end":357855,"line_start":111,"line_end":111,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":358055,"byte_end":358058,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357981,"byte_end":358043,"line_start":118,"line_end":118,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361997,"byte_end":362001,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361350,"byte_end":361407,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361412,"byte_end":361415,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361420,"byte_end":361511,"line_start":189,"line_end":189,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361516,"byte_end":361606,"line_start":190,"line_end":190,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361611,"byte_end":361701,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361706,"byte_end":361760,"line_start":192,"line_end":192,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361765,"byte_end":361768,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361773,"byte_end":361866,"line_start":194,"line_end":194,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361871,"byte_end":361964,"line_start":195,"line_end":195,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":361969,"byte_end":361985,"line_start":196,"line_end":196,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362424,"byte_end":362431,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"fn is_apng<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362070,"byte_end":362117,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362122,"byte_end":362125,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362130,"byte_end":362220,"line_start":203,"line_end":203,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362225,"byte_end":362309,"line_start":204,"line_end":204,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362314,"byte_end":362317,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362322,"byte_end":362412,"line_start":206,"line_end":206,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362827,"byte_end":362837,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<PngDecoder<R> as image::ImageDecoder>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3073},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362909,"byte_end":362919,"line_start":226,"line_end":226,"column_start":8,"column_end":18},"name":"color_type","qualname":"<PngDecoder<R> as image::ImageDecoder>::color_type","value":"fn color_type<'_>(&'_ Self) -> ColorType","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3074},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362980,"byte_end":362991,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"into_reader","qualname":"<PngDecoder<R> as image::ImageDecoder>::into_reader","value":"fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3076},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":363079,"byte_end":363089,"line_start":234,"line_end":234,"column_start":8,"column_end":18},"name":"read_image","qualname":"<PngDecoder<R> as image::ImageDecoder>::read_image","value":"fn read_image<'_>(Self, &'_ mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3079},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":363977,"byte_end":363991,"line_start":256,"line_end":256,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"<PngDecoder<R> as image::ImageDecoder>::scanline_bytes","value":"fn scanline_bytes<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":3070},"children":[],"decl_id":{"krate":0,"index":3078},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364400,"byte_end":364411,"line_start":269,"line_end":269,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::codecs::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364114,"byte_end":364168,"line_start":262,"line_end":262,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364169,"byte_end":364172,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364173,"byte_end":364223,"line_start":264,"line_end":264,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364224,"byte_end":364227,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364228,"byte_end":364284,"line_start":266,"line_end":266,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364285,"byte_end":364327,"line_start":267,"line_end":267,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364328,"byte_end":364388,"line_start":268,"line_end":268,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":370548,"byte_end":370559,"line_start":431,"line_end":431,"column_start":8,"column_end":19},"name":"into_frames","qualname":"<ApngDecoder<R> as image::AnimationDecoder>::into_frames","value":"fn into_frames(Self) -> Frames","parent":{"krate":0,"index":3090},"children":[],"decl_id":{"krate":0,"index":3092},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2008},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371727,"byte_end":371737,"line_start":463,"line_end":463,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::codecs::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371700,"byte_end":371715,"line_start":462,"line_end":462,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3898},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372020,"byte_end":372027,"line_start":474,"line_end":474,"column_start":5,"column_end":12},"name":"Default","qualname":"::codecs::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":3897},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371986,"byte_end":372015,"line_start":473,"line_end":473,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3900},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372067,"byte_end":372071,"line_start":476,"line_end":476,"column_start":5,"column_end":9},"name":"Fast","qualname":"::codecs::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":3897},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372033,"byte_end":372062,"line_start":475,"line_end":475,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3902},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372108,"byte_end":372112,"line_start":478,"line_end":478,"column_start":5,"column_end":9},"name":"Best","qualname":"::codecs::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":3897},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372077,"byte_end":372103,"line_start":477,"line_end":477,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3904},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372245,"byte_end":372252,"line_start":481,"line_end":481,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::codecs::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":3897},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372118,"byte_end":372148,"line_start":479,"line_end":479,"column_start":5,"column_end":35}},{"value":"deprecated(note =\n\"use one of the other compression levels instead, such as 'Fast'\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372153,"byte_end":372240,"line_start":480,"line_end":480,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3906},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372390,"byte_end":372393,"line_start":484,"line_end":484,"column_start":5,"column_end":8},"name":"Rle","qualname":"::codecs::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":3897},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372258,"byte_end":372293,"line_start":482,"line_end":482,"column_start":5,"column_end":40}},{"value":"deprecated(note =\n\"use one of the other compression levels instead, such as 'Fast'\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372298,"byte_end":372385,"line_start":483,"line_end":483,"column_start":5,"column_end":92}}]},{"kind":"Enum","id":{"krate":0,"index":3897},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371964,"byte_end":371979,"line_start":472,"line_end":472,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::codecs::png::CompressionType","value":"enum CompressionType { Default, Fast, Best, Huffman, Rle, }","parent":null,"children":[{"krate":0,"index":3898},{"krate":0,"index":3900},{"krate":0,"index":3902},{"krate":0,"index":3904},{"krate":0,"index":3906}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371821,"byte_end":371891,"line_start":469,"line_end":469,"column_start":1,"column_end":71}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":371937,"byte_end":371954,"line_start":471,"line_end":471,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3920},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372707,"byte_end":372715,"line_start":495,"line_end":495,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::codecs::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth grayscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth grayscale or data with a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372602,"byte_end":372678,"line_start":493,"line_end":493,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372683,"byte_end":372702,"line_start":494,"line_end":494,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3922},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372782,"byte_end":372785,"line_start":497,"line_end":497,"column_start":5,"column_end":8},"name":"Sub","qualname":"::codecs::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372721,"byte_end":372777,"line_start":496,"line_end":496,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3924},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372835,"byte_end":372837,"line_start":499,"line_end":499,"column_start":5,"column_end":7},"name":"Up","qualname":"::codecs::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372791,"byte_end":372830,"line_start":498,"line_end":498,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3926},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372914,"byte_end":372917,"line_start":501,"line_end":501,"column_start":5,"column_end":8},"name":"Avg","qualname":"::codecs::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372843,"byte_end":372909,"line_start":500,"line_end":500,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3928},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373004,"byte_end":373009,"line_start":503,"line_end":503,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::codecs::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372923,"byte_end":372999,"line_start":502,"line_end":502,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3930},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373149,"byte_end":373157,"line_start":506,"line_end":506,"column_start":5,"column_end":13},"name":"Adaptive","qualname":"::codecs::png::FilterType::Adaptive","value":"FilterType::Adaptive","parent":{"krate":0,"index":3919},"children":[],"decl_id":null,"docs":" Uses a heuristic to select one of the preceding filters for each\n scanline rather than one filter for the entire image\n","sig":null,"attributes":[{"value":"/ Uses a heuristic to select one of the preceding filters for each","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373015,"byte_end":373083,"line_start":504,"line_end":504,"column_start":5,"column_end":73}},{"value":"/ scanline rather than one filter for the entire image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373088,"byte_end":373144,"line_start":505,"line_end":505,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":3919},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372585,"byte_end":372595,"line_start":492,"line_end":492,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::codecs::png::FilterType","value":"enum FilterType { NoFilter, Sub, Up, Avg, Paeth, Adaptive, }","parent":null,"children":[{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3924},{"krate":0,"index":3926},{"krate":0,"index":3928},{"krate":0,"index":3930}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372398,"byte_end":372470,"line_start":487,"line_end":487,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372471,"byte_end":372474,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Adaptive`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372475,"byte_end":372512,"line_start":489,"line_end":489,"column_start":1,"column_end":38}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":372558,"byte_end":372575,"line_start":491,"line_end":491,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373387,"byte_end":373390,"line_start":517,"line_end":517,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373317,"byte_end":373375,"line_start":516,"line_end":516,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374391,"byte_end":374407,"line_start":537,"line_end":537,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373569,"byte_end":373664,"line_start":525,"line_end":525,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373669,"byte_end":373695,"line_start":526,"line_end":526,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373700,"byte_end":373703,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373708,"byte_end":373803,"line_start":528,"line_end":528,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373808,"byte_end":373901,"line_start":529,"line_end":529,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373906,"byte_end":373998,"line_start":530,"line_end":530,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374003,"byte_end":374094,"line_start":531,"line_end":531,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374099,"byte_end":374147,"line_start":532,"line_end":532,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374152,"byte_end":374155,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type, so an adaptive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374160,"byte_end":374235,"line_start":534,"line_end":534,"column_start":5,"column_end":80}},{"value":"/ filter type is selected as the default. The filter which best minimizes","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374240,"byte_end":374315,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ file size may change with the type of compression used.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374320,"byte_end":374379,"line_start":536,"line_end":536,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374887,"byte_end":374893,"line_start":553,"line_end":553,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"fn encode<'_>(Self, &'_ [u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374616,"byte_end":374706,"line_start":549,"line_end":549,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374711,"byte_end":374714,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Expects data in big endian.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374719,"byte_end":374750,"line_start":551,"line_end":551,"column_start":5,"column_end":36}},{"value":"deprecated =\n\"Use `PngEncoder::write_image` instead. Beware that `write_image` has a different endianness convention\"","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":374755,"byte_end":374875,"line_start":552,"line_end":552,"column_start":5,"column_end":125}}]},{"kind":"Method","id":{"krate":0,"index":2023},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377962,"byte_end":377973,"line_start":620,"line_end":620,"column_start":8,"column_end":19},"name":"write_image","qualname":"<PngEncoder<W> as image::ImageEncoder>::write_image","value":"fn write_image<'_>(Self, &'_ [u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3093},"children":[],"decl_id":{"krate":0,"index":3094},"docs":" Write a PNG image with the specified width, height, and color type.","sig":null,"attributes":[{"value":"/ Write a PNG image with the specified width, height, and color type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377656,"byte_end":377727,"line_start":615,"line_end":615,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377732,"byte_end":377735,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ For color types with 16-bit per channel or larger, the contents of `buf` should be in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377740,"byte_end":377829,"line_start":617,"line_end":617,"column_start":5,"column_end":94}},{"value":"/ native endian. PngEncoder will automatically convert to big endian as required by the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377834,"byte_end":377923,"line_start":618,"line_end":618,"column_start":5,"column_end":94}},{"value":"/ underlying PNG format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377928,"byte_end":377954,"line_start":619,"line_end":619,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380368,"byte_end":380375,"line_start":681,"line_end":681,"column_start":8,"column_end":15},"name":"default","qualname":"<CompressionType as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380464,"byte_end":380471,"line_start":687,"line_end":687,"column_start":8,"column_end":15},"name":"default","qualname":"<FilterType as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2062},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382748,"byte_end":382754,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2064}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382663,"byte_end":382736,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382935,"byte_end":382938,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn new(Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382855,"byte_end":382923,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383330,"byte_end":383344,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383049,"byte_end":383143,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383148,"byte_end":383160,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383165,"byte_end":383227,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383232,"byte_end":383235,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383240,"byte_end":383318,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383490,"byte_end":383494,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"next","qualname":"<Frames as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<ImageResult<Frame>>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3959},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383633,"byte_end":383638,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":3960},{"krate":0,"index":3961},{"krate":0,"index":3962},{"krate":0,"index":3963}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383576,"byte_end":383604,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3966},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383920,"byte_end":383925,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":3967}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383797,"byte_end":383851,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384028,"byte_end":384031,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Constructs a new frame without any delay.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383971,"byte_end":384016,"line_start":56,"line_end":56,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384260,"byte_end":384270,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new frame\n","sig":null,"attributes":[{"value":"/ Constructs a new frame","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384222,"byte_end":384248,"line_start":66,"line_end":66,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384482,"byte_end":384487,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn delay<'_>(&'_ Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384447,"byte_end":384470,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384576,"byte_end":384582,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn buffer<'_>(&'_ Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384536,"byte_end":384564,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384684,"byte_end":384694,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"buffer_mut","qualname":"<Frame>::buffer_mut","value":"fn buffer_mut<'_>(&'_ mut Self) -> &mut RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable image buffer\n","sig":null,"attributes":[{"value":"/ Returns a mutable image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384638,"byte_end":384672,"line_start":86,"line_end":86,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384802,"byte_end":384813,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384762,"byte_end":384790,"line_start":91,"line_end":91,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384902,"byte_end":384906,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn left<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384866,"byte_end":384890,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384988,"byte_end":384991,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn top<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":384952,"byte_end":384976,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385256,"byte_end":385275,"line_start":116,"line_end":116,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385051,"byte_end":385099,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385104,"byte_end":385107,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385112,"byte_end":385126,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385131,"byte_end":385134,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385139,"byte_end":385146,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385151,"byte_end":385172,"line_start":113,"line_end":113,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385177,"byte_end":385232,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385237,"byte_end":385244,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385939,"byte_end":385963,"line_start":136,"line_end":136,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385416,"byte_end":385498,"line_start":122,"line_end":122,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385503,"byte_end":385506,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385511,"byte_end":385605,"line_start":124,"line_end":124,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385610,"byte_end":385688,"line_start":125,"line_end":125,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385693,"byte_end":385696,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385701,"byte_end":385715,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385720,"byte_end":385723,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385728,"byte_end":385735,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385740,"byte_end":385768,"line_start":130,"line_end":130,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385773,"byte_end":385794,"line_start":131,"line_end":131,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385799,"byte_end":385802,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385807,"byte_end":385852,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385857,"byte_end":385915,"line_start":134,"line_end":134,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385920,"byte_end":385927,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":387143,"byte_end":387157,"line_start":165,"line_end":165,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":386917,"byte_end":386980,"line_start":161,"line_end":161,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":386985,"byte_end":386988,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":386993,"byte_end":387088,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":387093,"byte_end":387131,"line_start":164,"line_end":164,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":391251,"byte_end":391255,"line_start":271,"line_end":271,"column_start":8,"column_end":12},"name":"from","qualname":"<Duration as std::convert::From>::from","value":"fn from(Delay) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2200},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394634,"byte_end":394640,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2203}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394594,"byte_end":394622,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394867,"byte_end":394871,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"next","qualname":"<Pixels as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a P>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394842,"byte_end":394859,"line_start":32,"line_end":32,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395002,"byte_end":395011,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Pixels as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394977,"byte_end":394994,"line_start":37,"line_end":37,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395207,"byte_end":395210,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"len","qualname":"<Pixels as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395384,"byte_end":395393,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Pixels as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<&'a P>","parent":{"krate":2,"index":8420},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395359,"byte_end":395376,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395550,"byte_end":395555,"line_start":64,"line_end":64,"column_start":8,"column_end":13},"name":"clone","qualname":"<Pixels as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2225},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395738,"byte_end":395741,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Pixels as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395945,"byte_end":395954,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2229}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395897,"byte_end":395933,"line_start":82,"line_end":82,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396191,"byte_end":396195,"line_start":97,"line_end":97,"column_start":8,"column_end":12},"name":"next","qualname":"<PixelsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<&'a mut P>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396166,"byte_end":396183,"line_start":96,"line_end":96,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396334,"byte_end":396343,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<PixelsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396309,"byte_end":396326,"line_start":101,"line_end":101,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396542,"byte_end":396545,"line_start":112,"line_end":112,"column_start":8,"column_end":11},"name":"len","qualname":"<PixelsMut as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396722,"byte_end":396731,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"next_back","qualname":"<PixelsMut as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<&'a mut P>","parent":{"krate":2,"index":8420},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396697,"byte_end":396714,"line_start":121,"line_end":121,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396965,"byte_end":396968,"line_start":133,"line_end":133,"column_start":8,"column_end":11},"name":"fmt","qualname":"<PixelsMut as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2249},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397333,"byte_end":397337,"line_start":145,"line_end":145,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":2252}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397127,"byte_end":397160,"line_start":140,"line_end":140,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397161,"byte_end":397164,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397165,"byte_end":397251,"line_start":142,"line_end":142,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397252,"byte_end":397255,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397256,"byte_end":397321,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398490,"byte_end":398494,"line_start":181,"line_end":181,"column_start":8,"column_end":12},"name":"next","qualname":"<Rows as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Pixels>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398465,"byte_end":398482,"line_start":180,"line_end":180,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398783,"byte_end":398792,"line_start":190,"line_end":190,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Rows as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398758,"byte_end":398775,"line_start":189,"line_end":189,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398986,"byte_end":398989,"line_start":200,"line_end":200,"column_start":8,"column_end":11},"name":"len","qualname":"<Rows as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399161,"byte_end":399170,"line_start":210,"line_end":210,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Rows as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Pixels>","parent":{"krate":2,"index":8420},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399136,"byte_end":399153,"line_start":209,"line_end":209,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399483,"byte_end":399488,"line_start":220,"line_end":220,"column_start":8,"column_end":13},"name":"clone","qualname":"<Rows as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399667,"byte_end":399670,"line_start":231,"line_end":231,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Rows as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2277},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":400050,"byte_end":400057,"line_start":243,"line_end":243,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":2280}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399824,"byte_end":399865,"line_start":238,"line_end":238,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399866,"byte_end":399869,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399870,"byte_end":399960,"line_start":240,"line_end":240,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399961,"byte_end":399964,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399965,"byte_end":400038,"line_start":242,"line_end":242,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401244,"byte_end":401248,"line_start":279,"line_end":279,"column_start":8,"column_end":12},"name":"next","qualname":"<RowsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<PixelsMut>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401219,"byte_end":401236,"line_start":278,"line_end":278,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401547,"byte_end":401556,"line_start":288,"line_end":288,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<RowsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401522,"byte_end":401539,"line_start":287,"line_end":287,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401753,"byte_end":401756,"line_start":298,"line_end":298,"column_start":8,"column_end":11},"name":"len","qualname":"<RowsMut as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401931,"byte_end":401940,"line_start":308,"line_end":308,"column_start":8,"column_end":17},"name":"next_back","qualname":"<RowsMut as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<PixelsMut>","parent":{"krate":2,"index":8420},"children":[],"decl_id":{"krate":2,"index":8421},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401906,"byte_end":401923,"line_start":307,"line_end":307,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402306,"byte_end":402309,"line_start":321,"line_end":321,"column_start":8,"column_end":11},"name":"fmt","qualname":"<RowsMut as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2302},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402515,"byte_end":402530,"line_start":329,"line_end":329,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402466,"byte_end":402503,"line_start":328,"line_end":328,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402814,"byte_end":402818,"line_start":346,"line_end":346,"column_start":8,"column_end":12},"name":"next","qualname":"<EnumeratePixels as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(u32, u32, &'a P)>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402789,"byte_end":402806,"line_start":345,"line_end":345,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403096,"byte_end":403105,"line_start":357,"line_end":357,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EnumeratePixels as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403071,"byte_end":403088,"line_start":356,"line_end":356,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403310,"byte_end":403313,"line_start":367,"line_end":367,"column_start":8,"column_end":11},"name":"len","qualname":"<EnumeratePixels as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403424,"byte_end":403429,"line_start":373,"line_end":373,"column_start":8,"column_end":13},"name":"clone","qualname":"<EnumeratePixels as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403650,"byte_end":403653,"line_start":385,"line_end":385,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EnumeratePixels as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2326},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403972,"byte_end":403985,"line_start":396,"line_end":396,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403925,"byte_end":403960,"line_start":395,"line_end":395,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404263,"byte_end":404267,"line_start":412,"line_end":412,"column_start":8,"column_end":12},"name":"next","qualname":"<EnumerateRows as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(u32, EnumeratePixels)>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404238,"byte_end":404255,"line_start":411,"line_end":411,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404668,"byte_end":404677,"line_start":429,"line_end":429,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EnumerateRows as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404643,"byte_end":404660,"line_start":428,"line_end":428,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404880,"byte_end":404883,"line_start":439,"line_end":439,"column_start":8,"column_end":11},"name":"len","qualname":"<EnumerateRows as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404990,"byte_end":404995,"line_start":445,"line_end":445,"column_start":8,"column_end":13},"name":"clone","qualname":"<EnumerateRows as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405208,"byte_end":405211,"line_start":457,"line_end":457,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EnumerateRows as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2349},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405493,"byte_end":405511,"line_start":467,"line_end":467,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405444,"byte_end":405481,"line_start":466,"line_end":466,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405805,"byte_end":405809,"line_start":484,"line_end":484,"column_start":8,"column_end":12},"name":"next","qualname":"<EnumeratePixelsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(u32, u32, &'a mut P)>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405780,"byte_end":405797,"line_start":483,"line_end":483,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406091,"byte_end":406100,"line_start":495,"line_end":495,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EnumeratePixelsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406066,"byte_end":406083,"line_start":494,"line_end":494,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406308,"byte_end":406311,"line_start":505,"line_end":505,"column_start":8,"column_end":11},"name":"len","qualname":"<EnumeratePixelsMut as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406465,"byte_end":406468,"line_start":514,"line_end":514,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EnumeratePixelsMut as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2370},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406790,"byte_end":406806,"line_start":525,"line_end":525,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406743,"byte_end":406778,"line_start":524,"line_end":524,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407093,"byte_end":407097,"line_start":541,"line_end":541,"column_start":8,"column_end":12},"name":"next","qualname":"<EnumerateRowsMut as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(u32, EnumeratePixelsMut)>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407068,"byte_end":407085,"line_start":540,"line_end":540,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407504,"byte_end":407513,"line_start":558,"line_end":558,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<EnumerateRowsMut as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8580},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407479,"byte_end":407496,"line_start":557,"line_end":557,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407719,"byte_end":407722,"line_start":568,"line_end":568,"column_start":8,"column_end":11},"name":"len","qualname":"<EnumerateRowsMut as std::iter::ExactSizeIterator>::len","value":"fn len<'_>(&'_ Self) -> usize","parent":{"krate":2,"index":8445},"children":[],"decl_id":{"krate":2,"index":8446},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407872,"byte_end":407875,"line_start":577,"line_end":577,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EnumerateRowsMut as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10266},"children":[],"decl_id":{"krate":2,"index":10267},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3982},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410492,"byte_end":410503,"line_start":655,"line_end":655,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":3985},{"krate":0,"index":3986},{"krate":0,"index":3987},{"krate":0,"index":3988}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408111,"byte_end":408135,"line_start":586,"line_end":586,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408136,"byte_end":408139,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408140,"byte_end":408234,"line_start":588,"line_end":588,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408235,"byte_end":408324,"line_start":589,"line_end":589,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408325,"byte_end":408420,"line_start":590,"line_end":590,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408421,"byte_end":408516,"line_start":591,"line_end":591,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408517,"byte_end":408555,"line_start":592,"line_end":592,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408556,"byte_end":408559,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408560,"byte_end":408659,"line_start":594,"line_end":594,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408660,"byte_end":408695,"line_start":595,"line_end":595,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408696,"byte_end":408699,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408700,"byte_end":408745,"line_start":597,"line_end":597,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408746,"byte_end":408799,"line_start":598,"line_end":598,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408800,"byte_end":408836,"line_start":599,"line_end":599,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408837,"byte_end":408875,"line_start":600,"line_end":600,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408876,"byte_end":408879,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408880,"byte_end":408956,"line_start":602,"line_end":602,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408957,"byte_end":408960,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":408961,"byte_end":409048,"line_start":604,"line_end":604,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409049,"byte_end":409147,"line_start":605,"line_end":605,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409148,"byte_end":409223,"line_start":606,"line_end":606,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409224,"byte_end":409227,"line_start":607,"line_end":607,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409228,"byte_end":409272,"line_start":608,"line_end":608,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409273,"byte_end":409321,"line_start":609,"line_end":609,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409322,"byte_end":409378,"line_start":610,"line_end":610,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409379,"byte_end":409382,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409383,"byte_end":409398,"line_start":612,"line_end":612,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409399,"byte_end":409402,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409403,"byte_end":409454,"line_start":614,"line_end":614,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409455,"byte_end":409458,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409459,"byte_end":409466,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409467,"byte_end":409498,"line_start":617,"line_end":617,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409499,"byte_end":409502,"line_start":618,"line_end":618,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409503,"byte_end":409543,"line_start":619,"line_end":619,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409544,"byte_end":409547,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409548,"byte_end":409570,"line_start":621,"line_end":621,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409571,"byte_end":409595,"line_start":622,"line_end":622,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409596,"byte_end":409646,"line_start":623,"line_end":623,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409647,"byte_end":409697,"line_start":624,"line_end":624,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409698,"byte_end":409707,"line_start":625,"line_end":625,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409708,"byte_end":409713,"line_start":626,"line_end":626,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409714,"byte_end":409721,"line_start":627,"line_end":627,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409722,"byte_end":409725,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409726,"byte_end":409785,"line_start":629,"line_end":629,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409786,"byte_end":409789,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409790,"byte_end":409803,"line_start":631,"line_end":631,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409804,"byte_end":409871,"line_start":632,"line_end":632,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409872,"byte_end":409875,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb8();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409876,"byte_end":409939,"line_start":634,"line_end":634,"column_start":1,"column_end":64}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409940,"byte_end":409997,"line_start":635,"line_end":635,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":409998,"byte_end":410027,"line_start":636,"line_end":636,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410028,"byte_end":410061,"line_start":637,"line_end":637,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410062,"byte_end":410078,"line_start":638,"line_end":638,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410079,"byte_end":410118,"line_start":639,"line_end":639,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410119,"byte_end":410128,"line_start":640,"line_end":640,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410129,"byte_end":410136,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410137,"byte_end":410140,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410141,"byte_end":410199,"line_start":643,"line_end":643,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410200,"byte_end":410207,"line_start":644,"line_end":644,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410208,"byte_end":410211,"line_start":645,"line_end":645,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410212,"byte_end":410252,"line_start":646,"line_end":646,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410253,"byte_end":410256,"line_start":647,"line_end":647,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410257,"byte_end":410270,"line_start":648,"line_end":648,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410271,"byte_end":410307,"line_start":649,"line_end":649,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410308,"byte_end":410311,"line_start":650,"line_end":650,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba8();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410312,"byte_end":410374,"line_start":651,"line_end":651,"column_start":1,"column_end":63}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma8();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410375,"byte_end":410434,"line_start":652,"line_end":652,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410435,"byte_end":410442,"line_start":653,"line_end":653,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411075,"byte_end":411083,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Constructs a buffer from a generic container","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410789,"byte_end":410837,"line_start":668,"line_end":668,"column_start":5,"column_end":53}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410842,"byte_end":410878,"line_start":669,"line_end":669,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410883,"byte_end":410886,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410891,"byte_end":410981,"line_start":671,"line_end":671,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410986,"byte_end":411063,"line_start":672,"line_end":672,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411489,"byte_end":411497,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411440,"byte_end":411477,"line_start":686,"line_end":686,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411597,"byte_end":411603,"line_start":692,"line_end":692,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"fn as_raw<'_>(&'_ Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411548,"byte_end":411585,"line_start":691,"line_end":691,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411708,"byte_end":411718,"line_start":697,"line_end":697,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411657,"byte_end":411696,"line_start":696,"line_end":696,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411827,"byte_end":411832,"line_start":702,"line_end":702,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn width<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411787,"byte_end":411815,"line_start":701,"line_end":701,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411920,"byte_end":411926,"line_start":707,"line_end":707,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn height<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":411879,"byte_end":411908,"line_start":706,"line_end":706,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412322,"byte_end":412328,"line_start":719,"line_end":719,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn pixels<'_>(&'_ Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412189,"byte_end":412243,"line_start":717,"line_end":717,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412248,"byte_end":412310,"line_start":718,"line_end":718,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412862,"byte_end":412866,"line_start":732,"line_end":732,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn rows<'_>(&'_ Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412515,"byte_end":412567,"line_start":727,"line_end":727,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412572,"byte_end":412575,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412580,"byte_end":412671,"line_start":729,"line_end":729,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412676,"byte_end":412769,"line_start":730,"line_end":730,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412774,"byte_end":412850,"line_start":731,"line_end":731,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2402},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413217,"byte_end":413233,"line_start":741,"line_end":741,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn enumerate_pixels<'_>(&'_ Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n Starting from the top left.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":412960,"byte_end":413004,"line_start":736,"line_end":736,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413009,"byte_end":413062,"line_start":737,"line_end":737,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413067,"byte_end":413102,"line_start":738,"line_end":738,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413107,"byte_end":413169,"line_start":739,"line_end":739,"column_start":5,"column_end":67}},{"value":"/ Starting from the top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413174,"byte_end":413205,"line_start":740,"line_end":740,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413565,"byte_end":413579,"line_start":753,"line_end":753,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn enumerate_rows<'_>(&'_ Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413414,"byte_end":413456,"line_start":750,"line_end":750,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413461,"byte_end":413513,"line_start":751,"line_end":751,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413518,"byte_end":413553,"line_start":752,"line_end":752,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2404},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413914,"byte_end":413923,"line_start":767,"line_end":767,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413734,"byte_end":413788,"line_start":761,"line_end":761,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413793,"byte_end":413796,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413801,"byte_end":413813,"line_start":763,"line_end":763,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413818,"byte_end":413821,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413826,"byte_end":413888,"line_start":765,"line_end":765,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":413893,"byte_end":413902,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":414414,"byte_end":414431,"line_start":780,"line_end":780,"column_start":12,"column_end":29},"name":"get_pixel_checked","qualname":"<ImageBuffer<P, Container>>::get_pixel_checked","value":"fn get_pixel_checked<'_>(&'_ Self, u32, u32) -> Option<&P>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)` or returns `None` if\n the index is out of the bounds `(width, height)`.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)` or returns `None` if","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":414269,"byte_end":414344,"line_start":778,"line_end":778,"column_start":5,"column_end":80}},{"value":"/ the index is out of the bounds `(width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":414349,"byte_end":414402,"line_start":779,"line_end":779,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416352,"byte_end":416365,"line_start":829,"line_end":829,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn sample_layout<'_>(&'_ Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416272,"byte_end":416340,"line_start":828,"line_end":828,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416978,"byte_end":416995,"line_start":840,"line_end":840,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416568,"byte_end":416642,"line_start":834,"line_end":834,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416647,"byte_end":416650,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is laid out by","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416655,"byte_end":416742,"line_start":836,"line_end":836,"column_start":5,"column_end":92}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416747,"byte_end":416840,"line_start":837,"line_end":837,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416845,"byte_end":416939,"line_start":838,"line_end":838,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":416944,"byte_end":416966,"line_start":839,"line_end":839,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417555,"byte_end":417570,"line_start":856,"line_end":856,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn as_flat_samples<'_>(&'_ Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417413,"byte_end":417456,"line_start":853,"line_end":853,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417461,"byte_end":417464,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417469,"byte_end":417543,"line_start":855,"line_end":855,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2417},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":418080,"byte_end":418099,"line_start":871,"line_end":871,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"fn as_flat_samples_mut<'_>(&'_ mut Self) -> FlatSamples<&mut [P::Subpixel]>\nwhere Container: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417930,"byte_end":417981,"line_start":868,"line_end":868,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417986,"byte_end":417989,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":417994,"byte_end":418068,"line_start":870,"line_end":870,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":418887,"byte_end":418897,"line_start":896,"line_end":896,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn pixels_mut<'_>(&'_ mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":418813,"byte_end":418875,"line_start":895,"line_end":895,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419457,"byte_end":419465,"line_start":909,"line_end":909,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn rows_mut<'_>(&'_ mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419102,"byte_end":419162,"line_start":904,"line_end":904,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419167,"byte_end":419170,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419175,"byte_end":419266,"line_start":906,"line_end":906,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419271,"byte_end":419364,"line_start":907,"line_end":907,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419369,"byte_end":419445,"line_start":908,"line_end":908,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419735,"byte_end":419755,"line_start":916,"line_end":916,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn enumerate_pixels_mut<'_>(&'_ mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419573,"byte_end":419617,"line_start":913,"line_end":913,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419622,"byte_end":419675,"line_start":914,"line_end":914,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419680,"byte_end":419723,"line_start":915,"line_end":915,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420129,"byte_end":420147,"line_start":929,"line_end":929,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn enumerate_rows_mut<'_>(&'_ mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":419970,"byte_end":420012,"line_start":926,"line_end":926,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420017,"byte_end":420069,"line_start":927,"line_end":927,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420074,"byte_end":420117,"line_start":928,"line_end":928,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420524,"byte_end":420537,"line_start":944,"line_end":944,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420336,"byte_end":420398,"line_start":938,"line_end":938,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420403,"byte_end":420406,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420411,"byte_end":420423,"line_start":940,"line_end":940,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420428,"byte_end":420431,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420436,"byte_end":420498,"line_start":942,"line_end":942,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420503,"byte_end":420512,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421052,"byte_end":421073,"line_start":957,"line_end":957,"column_start":12,"column_end":33},"name":"get_pixel_mut_checked","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut_checked","value":"fn get_pixel_mut_checked<'_>(&'_ mut Self, u32, u32) -> Option<&mut P>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)` or returns\n `None` if the index is out of the bounds `(width, height)`.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)` or returns","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420899,"byte_end":420972,"line_start":955,"line_end":955,"column_start":5,"column_end":78}},{"value":"/ `None` if the index is out of the bounds `(width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":420977,"byte_end":421040,"line_start":956,"line_end":956,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421710,"byte_end":421719,"line_start":977,"line_end":977,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421561,"byte_end":421598,"line_start":972,"line_end":972,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421603,"byte_end":421606,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421611,"byte_end":421623,"line_start":974,"line_end":974,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421628,"byte_end":421631,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421636,"byte_end":421698,"line_start":976,"line_end":976,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422097,"byte_end":422101,"line_start":991,"line_end":991,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn save<Q, '_>(&'_ Self, Q) -> ImageResult<()> where Q: AsRef<Path>,\nP: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421963,"byte_end":422016,"line_start":988,"line_end":988,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422021,"byte_end":422024,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422029,"byte_end":422085,"line_start":990,"line_end":990,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422777,"byte_end":422793,"line_start":1017,"line_end":1017,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn save_with_format<Q, '_>(&'_ Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>, P: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422570,"byte_end":422625,"line_start":1012,"line_end":1012,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422630,"byte_end":422655,"line_start":1013,"line_end":1013,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422660,"byte_end":422663,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422668,"byte_end":422740,"line_start":1015,"line_end":1015,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422745,"byte_end":422765,"line_start":1016,"line_end":1016,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2443},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423674,"byte_end":423682,"line_start":1047,"line_end":1047,"column_start":12,"column_end":20},"name":"write_to","qualname":"<ImageBuffer<P, Container>>::write_to","value":"fn write_to<W, F, '_, '_>(&'_ Self, &'_ mut W, F) -> ImageResult<()> where\nW: std::io::Write + std::io::Seek, F: Into<ImageOutputFormat>,\nP: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Writes the buffer to a writer in the specified format.","sig":null,"attributes":[{"value":"/ Writes the buffer to a writer in the specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423363,"byte_end":423421,"line_start":1040,"line_end":1040,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423426,"byte_end":423429,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423434,"byte_end":423484,"line_start":1042,"line_end":1042,"column_start":5,"column_end":55}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423489,"byte_end":423559,"line_start":1043,"line_end":1043,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423564,"byte_end":423567,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ See [`ImageOutputFormat`](../enum.ImageOutputFormat.html) for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423572,"byte_end":423637,"line_start":1045,"line_end":1045,"column_start":5,"column_end":70}},{"value":"/ supported types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423642,"byte_end":423662,"line_start":1046,"line_end":1046,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424267,"byte_end":424274,"line_start":1070,"line_end":1070,"column_start":8,"column_end":15},"name":"default","qualname":"<ImageBuffer<P, Container> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424603,"byte_end":424608,"line_start":1087,"line_end":1087,"column_start":8,"column_end":13},"name":"deref","qualname":"<ImageBuffer<P, Container> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &<Self as Deref>::Target","parent":{"krate":2,"index":3468},"children":[],"decl_id":{"krate":2,"index":3470},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424819,"byte_end":424828,"line_start":1097,"line_end":1097,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<ImageBuffer<P, Container> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &mut <Self as Deref>::Target","parent":{"krate":2,"index":3481},"children":[],"decl_id":{"krate":2,"index":3482},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425071,"byte_end":425076,"line_start":1109,"line_end":1109,"column_start":8,"column_end":13},"name":"index","qualname":"<ImageBuffer<P, Container> as std::ops::Index>::index","value":"fn index<'_>(&'_ Self, (u32, u32)) -> &P","parent":{"krate":2,"index":3553},"children":[],"decl_id":{"krate":2,"index":3556},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425306,"byte_end":425315,"line_start":1119,"line_end":1119,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<ImageBuffer<P, Container> as std::ops::IndexMut>::index_mut","value":"fn index_mut<'_>(&'_ mut Self, (u32, u32)) -> &mut P","parent":{"krate":2,"index":3557},"children":[],"decl_id":{"krate":2,"index":3559},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425539,"byte_end":425544,"line_start":1129,"line_end":1129,"column_start":8,"column_end":13},"name":"clone","qualname":"<ImageBuffer<P, Container> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> ImageBuffer<P, Container>","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425930,"byte_end":425940,"line_start":1146,"line_end":1146,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<ImageBuffer<P, Container> as image::GenericImageView>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3105},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426004,"byte_end":426010,"line_start":1150,"line_end":1150,"column_start":8,"column_end":14},"name":"bounds","qualname":"<ImageBuffer<P, Container> as image::GenericImageView>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426098,"byte_end":426107,"line_start":1154,"line_end":1154,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<ImageBuffer<P, Container> as image::GenericImageView>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> P","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2479},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426282,"byte_end":426298,"line_start":1160,"line_end":1160,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"<ImageBuffer<P, Container> as image::GenericImageView>::unsafe_get_pixel","value":"unsafe fn unsafe_get_pixel<'_>(&'_ Self, u32, u32) -> P","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3111},"docs":" Returns the pixel located at (x, y), ignoring bounds checking.\n","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y), ignoring bounds checking.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426179,"byte_end":426245,"line_start":1158,"line_end":1158,"column_start":5,"column_end":71}},{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426250,"byte_end":426267,"line_start":1159,"line_end":1159,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426612,"byte_end":426625,"line_start":1171,"line_end":1171,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container> as image::GenericImage>::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut P","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426712,"byte_end":426721,"line_start":1175,"line_end":1175,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"<ImageBuffer<P, Container> as image::GenericImage>::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, P)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426913,"byte_end":426929,"line_start":1181,"line_end":1181,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"<ImageBuffer<P, Container> as image::GenericImage>::unsafe_put_pixel","value":"unsafe fn unsafe_put_pixel<'_>(&'_ mut Self, u32, u32, P)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3117},"docs":" Puts a pixel at location (x, y), ignoring bounds checking.\n","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y), ignoring bounds checking.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426814,"byte_end":426876,"line_start":1179,"line_end":1179,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426881,"byte_end":426898,"line_start":1180,"line_end":1180,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":427310,"byte_end":427321,"line_start":1190,"line_end":1190,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"<ImageBuffer<P, Container> as image::GenericImage>::blend_pixel","value":"fn blend_pixel<'_>(&'_ mut Self, u32, u32, P)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3118},"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":427141,"byte_end":427211,"line_start":1187,"line_end":1187,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":427216,"byte_end":427219,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":427224,"byte_end":427302,"line_start":1189,"line_end":1189,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":427414,"byte_end":427425,"line_start":1194,"line_end":1194,"column_start":8,"column_end":19},"name":"copy_within","qualname":"<ImageBuffer<P, Container> as image::GenericImage>::copy_within","value":"fn copy_within<'_>(&'_ mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3121},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2490},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429403,"byte_end":429406,"line_start":1244,"line_end":1244,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429213,"byte_end":429274,"line_start":1239,"line_end":1239,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429279,"byte_end":429282,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429287,"byte_end":429299,"line_start":1241,"line_end":1241,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429304,"byte_end":429307,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429312,"byte_end":429391,"line_start":1243,"line_end":1243,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429944,"byte_end":429954,"line_start":1260,"line_end":1260,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429764,"byte_end":429815,"line_start":1255,"line_end":1255,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429820,"byte_end":429823,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429828,"byte_end":429840,"line_start":1257,"line_end":1257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429845,"byte_end":429848,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429853,"byte_end":429932,"line_start":1259,"line_end":1259,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430469,"byte_end":430476,"line_start":1275,"line_end":1275,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430175,"byte_end":430257,"line_start":1268,"line_end":1268,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430262,"byte_end":430265,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430270,"byte_end":430340,"line_start":1270,"line_end":1270,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430345,"byte_end":430348,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430353,"byte_end":430365,"line_start":1272,"line_end":1272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430370,"byte_end":430373,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430378,"byte_end":430457,"line_start":1274,"line_end":1274,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430887,"byte_end":430895,"line_start":1288,"line_end":1288,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430767,"byte_end":430821,"line_start":1286,"line_end":1286,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":430826,"byte_end":430875,"line_start":1287,"line_end":1287,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431182,"byte_end":431190,"line_start":1298,"line_end":1298,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431082,"byte_end":431143,"line_start":1296,"line_end":1296,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431148,"byte_end":431170,"line_start":1297,"line_end":1297,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431318,"byte_end":431331,"line_start":1304,"line_end":1304,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":2498}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431252,"byte_end":431307,"line_start":1303,"line_end":1303,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431518,"byte_end":431525,"line_start":1309,"line_end":1309,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"fn convert<'_>(&'_ Self) -> T","parent":{"krate":0,"index":2496},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431341,"byte_end":431382,"line_start":1305,"line_end":1305,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431387,"byte_end":431390,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431395,"byte_end":431481,"line_start":1307,"line_end":1307,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431486,"byte_end":431510,"line_start":1308,"line_end":1308,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431793,"byte_end":431807,"line_start":1317,"line_end":1317,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn expand_palette<'_>(Self, &'_ [(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431603,"byte_end":431663,"line_start":1314,"line_end":1314,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431668,"byte_end":431736,"line_start":1315,"line_end":1315,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431741,"byte_end":431781,"line_start":1316,"line_end":1316,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433498,"byte_end":433505,"line_start":1369,"line_end":1369,"column_start":8,"column_end":15},"name":"convert","qualname":"<ImageBuffer<FromType, Container> as buffer_::ConvertBuffer>::convert","value":"fn convert<'_>(&'_ Self) -> ImageBuffer<ToType, Vec<ToType::Subpixel>>","parent":{"krate":0,"index":2496},"children":[],"decl_id":{"krate":0,"index":2498},"docs":" # Examples\n Convert RGB image to gray image.\n ```no_run\n use image::buffer::ConvertBuffer;\n use image::GrayImage;","sig":null,"attributes":[{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433105,"byte_end":433119,"line_start":1356,"line_end":1356,"column_start":5,"column_end":19}},{"value":"/ Convert RGB image to gray image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433124,"byte_end":433160,"line_start":1357,"line_end":1357,"column_start":5,"column_end":41}},{"value":"/ ```no_run","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433165,"byte_end":433178,"line_start":1358,"line_end":1358,"column_start":5,"column_end":18}},{"value":"/ use image::buffer::ConvertBuffer;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433183,"byte_end":433220,"line_start":1359,"line_end":1359,"column_start":5,"column_end":42}},{"value":"/ use image::GrayImage;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433225,"byte_end":433250,"line_start":1360,"line_end":1360,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433255,"byte_end":433258,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ let image_path = \"examples/fractal.png\";","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433263,"byte_end":433307,"line_start":1362,"line_end":1362,"column_start":5,"column_end":49}},{"value":"/ let image = image::open(&image_path)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433312,"byte_end":433352,"line_start":1363,"line_end":1363,"column_start":5,"column_end":45}},{"value":"/     .expect(\"Open file failed\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433357,"byte_end":433392,"line_start":1364,"line_end":1364,"column_start":5,"column_end":40}},{"value":"/     .to_rgba8();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433397,"byte_end":433417,"line_start":1365,"line_end":1365,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433422,"byte_end":433425,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let gray_image: GrayImage = image.convert();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433430,"byte_end":433478,"line_start":1367,"line_end":1367,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433483,"byte_end":433490,"line_start":1368,"line_end":1368,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":2509},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433857,"byte_end":433865,"line_start":1380,"line_end":1380,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433818,"byte_end":433847,"line_start":1379,"line_end":1379,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433954,"byte_end":433963,"line_start":1382,"line_end":1382,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433899,"byte_end":433944,"line_start":1381,"line_end":1381,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2511},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434043,"byte_end":434052,"line_start":1384,"line_end":1384,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":433998,"byte_end":434033,"line_start":1383,"line_end":1383,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":2512},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434148,"byte_end":434162,"line_start":1386,"line_end":1386,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434087,"byte_end":434138,"line_start":1385,"line_end":1385,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434774,"byte_end":434785,"line_start":1398,"line_end":1398,"column_start":10,"column_end":21},"name":"Rgb32FImage","qualname":"::buffer_::Rgb32FImage","value":"ImageBuffer<Rgb<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" An image buffer for 32-bit float RGB pixels,\n where the backing container is a flattened vector of floats.\n","sig":null,"attributes":[{"value":"/ An image buffer for 32-bit float RGB pixels,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434651,"byte_end":434699,"line_start":1396,"line_end":1396,"column_start":1,"column_end":49}},{"value":"/ where the backing container is a flattened vector of floats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434700,"byte_end":434764,"line_start":1397,"line_end":1397,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":2518},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434946,"byte_end":434958,"line_start":1402,"line_end":1402,"column_start":10,"column_end":22},"name":"Rgba32FImage","qualname":"::buffer_::Rgba32FImage","value":"ImageBuffer<Rgba<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" An image buffer for 32-bit float RGBA pixels,\n where the backing container is a flattened vector of floats.\n","sig":null,"attributes":[{"value":"/ An image buffer for 32-bit float RGBA pixels,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434822,"byte_end":434871,"line_start":1400,"line_end":1400,"column_start":1,"column_end":50}},{"value":"/ where the backing container is a flattened vector of floats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":434872,"byte_end":434936,"line_start":1401,"line_end":1401,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4014},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446346,"byte_end":446348,"line_start":12,"line_end":12,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446313,"byte_end":446341,"line_start":11,"line_end":11,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4016},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446409,"byte_end":446412,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446354,"byte_end":446404,"line_start":13,"line_end":13,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4018},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446467,"byte_end":446471,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446418,"byte_end":446462,"line_start":15,"line_end":15,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4020},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446526,"byte_end":446531,"line_start":18,"line_end":18,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446477,"byte_end":446521,"line_start":17,"line_end":17,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4022},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446572,"byte_end":446575,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446538,"byte_end":446567,"line_start":20,"line_end":20,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4024},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446637,"byte_end":446641,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446581,"byte_end":446632,"line_start":22,"line_end":22,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4026},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446675,"byte_end":446680,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446647,"byte_end":446670,"line_start":24,"line_end":24,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4028},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446715,"byte_end":446721,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446686,"byte_end":446710,"line_start":26,"line_end":26,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4030},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446762,"byte_end":446768,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Rgb32F","qualname":"::color::ColorType::Rgb32F","value":"ColorType::Rgb32F","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGB","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446728,"byte_end":446757,"line_start":29,"line_end":29,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4032},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446809,"byte_end":446816,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Rgba32F","qualname":"::color::ColorType::Rgba32F","value":"ColorType::Rgba32F","parent":{"krate":0,"index":4013},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGBA","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446774,"byte_end":446804,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":4013},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446297,"byte_end":446306,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"enum ColorType {\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Rgb32F,\n    Rgba32F,\n}","parent":null,"children":[{"krate":0,"index":4014},{"krate":0,"index":4016},{"krate":0,"index":4018},{"krate":0,"index":4020},{"krate":0,"index":4022},{"krate":0,"index":4024},{"krate":0,"index":4026},{"krate":0,"index":4028},{"krate":0,"index":4030},{"krate":0,"index":4032}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446158,"byte_end":446218,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446270,"byte_end":446287,"line_start":9,"line_end":9,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446929,"byte_end":446944,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446842,"byte_end":446917,"line_start":36,"line_end":36,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447375,"byte_end":447384,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447322,"byte_end":447363,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447662,"byte_end":447671,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447583,"byte_end":447650,"line_start":59,"line_end":59,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448004,"byte_end":448018,"line_start":70,"line_end":70,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447870,"byte_end":447966,"line_start":68,"line_end":68,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":447971,"byte_end":447992,"line_start":69,"line_end":69,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448181,"byte_end":448194,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448105,"byte_end":448169,"line_start":74,"line_end":74,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4049},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448870,"byte_end":448872,"line_start":93,"line_end":93,"column_start":5,"column_end":7},"name":"A8","qualname":"::color::ExtendedColorType::A8","value":"ExtendedColorType::A8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 8-bit alpha\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448841,"byte_end":448865,"line_start":92,"line_end":92,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4051},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448911,"byte_end":448913,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448878,"byte_end":448906,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4053},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448974,"byte_end":448977,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448919,"byte_end":448969,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4055},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449032,"byte_end":449036,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448983,"byte_end":449027,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4057},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449091,"byte_end":449096,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449042,"byte_end":449086,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4059},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449135,"byte_end":449137,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449102,"byte_end":449130,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4061},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449198,"byte_end":449201,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449143,"byte_end":449193,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4063},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449256,"byte_end":449260,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449207,"byte_end":449251,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4065},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449315,"byte_end":449320,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449266,"byte_end":449310,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4067},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449359,"byte_end":449361,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449326,"byte_end":449354,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4069},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449422,"byte_end":449425,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449367,"byte_end":449417,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4071},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449480,"byte_end":449484,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449431,"byte_end":449475,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4073},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449539,"byte_end":449544,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449490,"byte_end":449534,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4075},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449583,"byte_end":449585,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449550,"byte_end":449578,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4077},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449646,"byte_end":449649,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449591,"byte_end":449641,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4079},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449704,"byte_end":449708,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449655,"byte_end":449699,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4081},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449763,"byte_end":449768,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449714,"byte_end":449758,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4083},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449808,"byte_end":449811,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449774,"byte_end":449803,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4085},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449873,"byte_end":449877,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449817,"byte_end":449868,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4087},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449933,"byte_end":449938,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449883,"byte_end":449928,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4089},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449994,"byte_end":450000,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":449944,"byte_end":449989,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4091},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450055,"byte_end":450059,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450006,"byte_end":450050,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4093},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450114,"byte_end":450119,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450065,"byte_end":450109,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4095},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450183,"byte_end":450189,"line_start":141,"line_end":141,"column_start":5,"column_end":11},"name":"Rgb32F","qualname":"::color::ExtendedColorType::Rgb32F","value":"ExtendedColorType::Rgb32F","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGB","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450149,"byte_end":450178,"line_start":140,"line_end":140,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4097},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450230,"byte_end":450237,"line_start":143,"line_end":143,"column_start":5,"column_end":12},"name":"Rgba32F","qualname":"::color::ExtendedColorType::Rgba32F","value":"ExtendedColorType::Rgba32F","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGBA","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450195,"byte_end":450225,"line_start":142,"line_end":142,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4099},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450466,"byte_end":450473,"line_start":148,"line_end":148,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":4048},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450244,"byte_end":450338,"line_start":145,"line_end":145,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450343,"byte_end":450435,"line_start":146,"line_end":146,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450440,"byte_end":450461,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":4101},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450474,"byte_end":450476,"line_start":148,"line_end":148,"column_start":13,"column_end":15},"name":"0","qualname":"::color::ExtendedColorType::Unknown::0","value":"u8","parent":{"krate":0,"index":4099},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4048},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448817,"byte_end":448834,"line_start":91,"line_end":91,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"enum ExtendedColorType {\n    A8,\n    L1,\n    La1,\n    Rgb1,\n    Rgba1,\n    L2,\n    La2,\n    Rgb2,\n    Rgba2,\n    L4,\n    La4,\n    Rgb4,\n    Rgba4,\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Bgr8,\n    Bgra8,\n    Rgb32F,\n    Rgba32F,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":4049},{"krate":0,"index":4051},{"krate":0,"index":4053},{"krate":0,"index":4055},{"krate":0,"index":4057},{"krate":0,"index":4059},{"krate":0,"index":4061},{"krate":0,"index":4063},{"krate":0,"index":4065},{"krate":0,"index":4067},{"krate":0,"index":4069},{"krate":0,"index":4071},{"krate":0,"index":4073},{"krate":0,"index":4075},{"krate":0,"index":4077},{"krate":0,"index":4079},{"krate":0,"index":4081},{"krate":0,"index":4083},{"krate":0,"index":4085},{"krate":0,"index":4087},{"krate":0,"index":4089},{"krate":0,"index":4091},{"krate":0,"index":4093},{"krate":0,"index":4095},{"krate":0,"index":4097},{"krate":0,"index":4099}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448292,"byte_end":448355,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448356,"byte_end":448359,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448360,"byte_end":448457,"line_start":83,"line_end":83,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448458,"byte_end":448555,"line_start":84,"line_end":84,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448556,"byte_end":448585,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448586,"byte_end":448589,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448590,"byte_end":448682,"line_start":87,"line_end":87,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448683,"byte_end":448738,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":448790,"byte_end":448807,"line_start":90,"line_end":90,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450725,"byte_end":450738,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450511,"byte_end":450566,"line_start":152,"line_end":152,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450571,"byte_end":450574,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450579,"byte_end":450673,"line_start":154,"line_end":154,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450678,"byte_end":450713,"line_start":155,"line_end":155,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":451852,"byte_end":451856,"line_start":188,"line_end":188,"column_start":8,"column_end":12},"name":"from","qualname":"<ExtendedColorType as std::convert::From>::from","value":"fn from(ColorType) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4305},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":456732,"byte_end":456735,"line_start":363,"line_end":363,"column_start":16,"column_end":19},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" RGB colors.","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452789,"byte_end":452799,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452800,"byte_end":452822,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4334},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":456823,"byte_end":456827,"line_start":365,"line_end":365,"column_start":16,"column_end":20},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":" Grayscale colors.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452789,"byte_end":452799,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452800,"byte_end":452822,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4363},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":456910,"byte_end":456914,"line_start":367,"line_end":367,"column_start":16,"column_end":20},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":" RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452789,"byte_end":452799,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452800,"byte_end":452822,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4392},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457018,"byte_end":457023,"line_start":369,"line_end":369,"column_start":16,"column_end":21},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":" Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452789,"byte_end":452799,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":452800,"byte_end":452822,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2560},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457178,"byte_end":457191,"line_start":373,"line_end":373,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::color::FromPrimitive","value":"FromPrimitive<Component>","parent":null,"children":[{"krate":0,"index":2562}],"decl_id":null,"docs":" Convert from one pixel component type to another. For example, convert from `u8` to `f32` pixel values.\n","sig":null,"attributes":[{"value":"/ Convert from one pixel component type to another. For example, convert from `u8` to `f32` pixel values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457060,"byte_end":457167,"line_start":372,"line_end":372,"column_start":1,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457273,"byte_end":457287,"line_start":375,"line_end":375,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"::color::FromPrimitive::from_primitive","value":"fn from_primitive(Component) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":" Converts from any pixel component type to this type.\n","sig":null,"attributes":[{"value":"/ Converts from any pixel component type to this type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457209,"byte_end":457265,"line_start":374,"line_end":374,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457373,"byte_end":457387,"line_start":379,"line_end":379,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<T as color::FromPrimitive>::from_primitive","value":"fn from_primitive(T) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457652,"byte_end":457666,"line_start":389,"line_end":389,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<u8 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(f32) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457847,"byte_end":457861,"line_start":396,"line_end":396,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<u16 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(f32) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":458056,"byte_end":458070,"line_start":405,"line_end":405,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<u8 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(u16) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":458623,"byte_end":458637,"line_start":420,"line_end":420,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<f32 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(u16) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":458775,"byte_end":458789,"line_start":428,"line_end":428,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<f32 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(u8) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":458912,"byte_end":458926,"line_start":434,"line_end":434,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"<u16 as color::FromPrimitive>::from_primitive","value":"fn from_primitive(u8) -> Self","parent":{"krate":0,"index":2560},"children":[],"decl_id":{"krate":0,"index":2562},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2580},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459109,"byte_end":459118,"line_start":441,"line_end":441,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":2582}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459037,"byte_end":459098,"line_start":440,"line_end":440,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459208,"byte_end":459218,"line_start":443,"line_end":443,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Other)","parent":{"krate":0,"index":2580},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459132,"byte_end":459200,"line_start":442,"line_end":442,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460677,"byte_end":460687,"line_start":485,"line_end":485,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Luma<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Luma<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2602},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460955,"byte_end":460965,"line_start":496,"line_end":496,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Luma<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ LumaA<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461195,"byte_end":461205,"line_start":505,"line_end":505,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Luma<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgb<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461493,"byte_end":461503,"line_start":516,"line_end":516,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Luma<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgba<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461825,"byte_end":461835,"line_start":530,"line_end":530,"column_start":8,"column_end":18},"name":"from_color","qualname":"<LumaA<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ LumaA<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462163,"byte_end":462173,"line_start":542,"line_end":542,"column_start":8,"column_end":18},"name":"from_color","qualname":"<LumaA<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgb<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462508,"byte_end":462518,"line_start":554,"line_end":554,"column_start":8,"column_end":18},"name":"from_color","qualname":"<LumaA<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgba<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462848,"byte_end":462858,"line_start":566,"line_end":566,"column_start":8,"column_end":18},"name":"from_color","qualname":"<LumaA<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Luma<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463171,"byte_end":463181,"line_start":579,"line_end":579,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgba<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgba<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463569,"byte_end":463579,"line_start":593,"line_end":593,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgba<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgb<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463958,"byte_end":463968,"line_start":607,"line_end":607,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgba<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ LumaA<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464356,"byte_end":464366,"line_start":621,"line_end":621,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgba<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Luma<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464762,"byte_end":464772,"line_start":637,"line_end":637,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgb<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgb<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465113,"byte_end":465123,"line_start":650,"line_end":650,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgb<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Rgba<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465462,"byte_end":465472,"line_start":663,"line_end":663,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgb<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ LumaA<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465804,"byte_end":465814,"line_start":676,"line_end":676,"column_start":8,"column_end":18},"name":"from_color","qualname":"<Rgb<T> as color::FromColor>::from_color","value":"fn from_color<'_, '_>(&'_ mut Self, &'_ Luma<S>)","parent":{"krate":0,"index":2580},"children":[],"decl_id":{"krate":0,"index":2582},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4422},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476847,"byte_end":476857,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476800,"byte_end":476842,"line_start":56,"line_end":56,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4424},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476858,"byte_end":476867,"line_start":57,"line_end":57,"column_start":16,"column_end":25},"name":"0","qualname":"::dynimage::DynamicImage::ImageLuma8::0","value":"buffer_::ImageBuffer<color::Luma<u8>, std::vec::Vec<u8>>","parent":{"krate":0,"index":4422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4425},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476933,"byte_end":476944,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476875,"byte_end":476928,"line_start":59,"line_end":59,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4427},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476945,"byte_end":476959,"line_start":60,"line_end":60,"column_start":17,"column_end":31},"name":"0","qualname":"::dynimage::DynamicImage::ImageLumaA8::0","value":"buffer_::ImageBuffer<color::LumaA<u8>, std::vec::Vec<u8>>","parent":{"krate":0,"index":4425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4428},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477013,"byte_end":477022,"line_start":63,"line_end":63,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476967,"byte_end":477008,"line_start":62,"line_end":62,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4430},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477023,"byte_end":477031,"line_start":63,"line_end":63,"column_start":15,"column_end":23},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgb8::0","value":"buffer_::ImageBuffer<color::Rgb<u8>, std::vec::Vec<u8>>","parent":{"krate":0,"index":4428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4431},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477096,"byte_end":477106,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477039,"byte_end":477091,"line_start":65,"line_end":65,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":4433},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477107,"byte_end":477116,"line_start":66,"line_end":66,"column_start":16,"column_end":25},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgba8::0","value":"buffer_::ImageBuffer<color::Rgba<u8>, std::vec::Vec<u8>>","parent":{"krate":0,"index":4431},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4434},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477172,"byte_end":477183,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477124,"byte_end":477167,"line_start":68,"line_end":68,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":4436},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477184,"byte_end":477195,"line_start":69,"line_end":69,"column_start":17,"column_end":28},"name":"0","qualname":"::dynimage::DynamicImage::ImageLuma16::0","value":"buffer_::ImageBuffer<color::Luma<u16>, std::vec::Vec<u16>>","parent":{"krate":0,"index":4434},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4437},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477262,"byte_end":477274,"line_start":72,"line_end":72,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477203,"byte_end":477257,"line_start":71,"line_end":71,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4439},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477275,"byte_end":477291,"line_start":72,"line_end":72,"column_start":18,"column_end":34},"name":"0","qualname":"::dynimage::DynamicImage::ImageLumaA16::0","value":"buffer_::ImageBuffer<color::LumaA<u16>, std::vec::Vec<u16>>","parent":{"krate":0,"index":4437},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4440},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477346,"byte_end":477356,"line_start":75,"line_end":75,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477299,"byte_end":477341,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4442},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477357,"byte_end":477367,"line_start":75,"line_end":75,"column_start":16,"column_end":26},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgb16::0","value":"buffer_::ImageBuffer<color::Rgb<u16>, std::vec::Vec<u16>>","parent":{"krate":0,"index":4440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4443},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477433,"byte_end":477444,"line_start":78,"line_end":78,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477375,"byte_end":477428,"line_start":77,"line_end":77,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4445},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477445,"byte_end":477456,"line_start":78,"line_end":78,"column_start":17,"column_end":28},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgba16::0","value":"buffer_::ImageBuffer<color::Rgba<u16>, std::vec::Vec<u16>>","parent":{"krate":0,"index":4443},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4446},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477517,"byte_end":477528,"line_start":81,"line_end":81,"column_start":5,"column_end":16},"name":"ImageRgb32F","qualname":"::dynimage::DynamicImage::ImageRgb32F","value":"DynamicImage::ImageRgb32F(Rgb32FImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 32-bit float Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 32-bit float Rgb","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477464,"byte_end":477512,"line_start":80,"line_end":80,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4448},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477529,"byte_end":477540,"line_start":81,"line_end":81,"column_start":17,"column_end":28},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgb32F::0","value":"buffer_::ImageBuffer<color::Rgb<f32>, std::vec::Vec<f32>>","parent":{"krate":0,"index":4446},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4449},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477612,"byte_end":477624,"line_start":84,"line_end":84,"column_start":5,"column_end":17},"name":"ImageRgba32F","qualname":"::dynimage::DynamicImage::ImageRgba32F","value":"DynamicImage::ImageRgba32F(Rgba32FImage)","parent":{"krate":0,"index":4421},"children":[],"decl_id":null,"docs":" Each pixel in this image is 32-bit float Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 32-bit float Rgb with alpha","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477548,"byte_end":477607,"line_start":83,"line_end":83,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4451},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":477625,"byte_end":477637,"line_start":84,"line_end":84,"column_start":18,"column_end":30},"name":"0","qualname":"::dynimage::DynamicImage::ImageRgba32F::0","value":"buffer_::ImageBuffer<color::Rgba<f32>, std::vec::Vec<f32>>","parent":{"krate":0,"index":4449},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4421},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476781,"byte_end":476793,"line_start":55,"line_end":55,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"enum DynamicImage {\n    ImageLuma8(GrayImage),\n    ImageLumaA8(GrayAlphaImage),\n    ImageRgb8(RgbImage),\n    ImageRgba8(RgbaImage),\n    ImageLuma16(Gray16Image),\n    ImageLumaA16(GrayAlpha16Image),\n    ImageRgb16(Rgb16Image),\n    ImageRgba16(Rgba16Image),\n    ImageRgb32F(Rgb32FImage),\n    ImageRgba32F(Rgba32FImage),\n}","parent":null,"children":[{"krate":0,"index":4422},{"krate":0,"index":4425},{"krate":0,"index":4428},{"krate":0,"index":4431},{"krate":0,"index":4434},{"krate":0,"index":4437},{"krate":0,"index":4440},{"krate":0,"index":4443},{"krate":0,"index":4446},{"krate":0,"index":4449}],"decl_id":null,"docs":" A Dynamic Image","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":475766,"byte_end":475785,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":475786,"byte_end":475789,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This represents a _matrix_ of _pixels_ which are _convertible_ from and to an _RGBA_","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":475790,"byte_end":475878,"line_start":32,"line_end":32,"column_start":1,"column_end":89}},{"value":"/ representation. More variants that adhere to these principles may get added in the future, in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":475879,"byte_end":475976,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ particular to cover other combinations typically used.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":475977,"byte_end":476035,"line_start":34,"line_end":34,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476036,"byte_end":476039,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476040,"byte_end":476051,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476052,"byte_end":476055,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This type can act as a converter between specific `ImageBuffer` instances.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476056,"byte_end":476134,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476135,"byte_end":476138,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476139,"byte_end":476146,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use image::{DynamicImage, GrayImage, RgbImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476147,"byte_end":476198,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476199,"byte_end":476202,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let rgb: RgbImage = RgbImage::new(10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476203,"byte_end":476249,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/ let luma: GrayImage = DynamicImage::ImageRgb8(rgb).into_luma8();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476250,"byte_end":476318,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476319,"byte_end":476326,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476327,"byte_end":476330,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Design","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476331,"byte_end":476343,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476344,"byte_end":476347,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ There is no goal to provide an all-encompassing type with all possible memory layouts. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476348,"byte_end":476443,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ would hardly be feasible as a simple enum, due to the sheer number of combinations of channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476444,"byte_end":476541,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/ kinds, channel order, and bit depth. Rather, this type provides an opinionated selection with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476542,"byte_end":476639,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ normalized channel order which can store common pixel values without loss.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476640,"byte_end":476718,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":476754,"byte_end":476771,"line_start":54,"line_end":54,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479259,"byte_end":479268,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479185,"byte_end":479247,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2819},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479471,"byte_end":479482,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479371,"byte_end":479425,"line_start":126,"line_end":126,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479430,"byte_end":479459,"line_start":127,"line_end":127,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479659,"byte_end":479667,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479586,"byte_end":479647,"line_start":132,"line_end":132,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479843,"byte_end":479852,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479769,"byte_end":479831,"line_start":137,"line_end":137,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480029,"byte_end":480039,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479955,"byte_end":480017,"line_start":142,"line_end":142,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480243,"byte_end":480255,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480143,"byte_end":480197,"line_start":147,"line_end":147,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480202,"byte_end":480231,"line_start":148,"line_end":148,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480433,"byte_end":480442,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480360,"byte_end":480421,"line_start":153,"line_end":153,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480619,"byte_end":480629,"line_start":159,"line_end":159,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480545,"byte_end":480607,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480806,"byte_end":480816,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"new_rgb32f","qualname":"<DynamicImage>::new_rgb32f","value":"fn new_rgb32f(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480733,"byte_end":480794,"line_start":163,"line_end":163,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480994,"byte_end":481005,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"new_rgba32f","qualname":"<DynamicImage>::new_rgba32f","value":"fn new_rgba32f(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":480920,"byte_end":480982,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481172,"byte_end":481184,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn from_decoder<'a, impl ImageDecoder<'a>>(impl ImageDecoder<'a>)\n-> ImageResult<Self> where impl ImageDecoder<'a>: ImageDecoder","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481110,"byte_end":481160,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481350,"byte_end":481357,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"to_rgb8","qualname":"<DynamicImage>::to_rgb8","value":"fn to_rgb8<'_>(&'_ Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481289,"byte_end":481338,"line_start":178,"line_end":178,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481500,"byte_end":481508,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"to_rgb16","qualname":"<DynamicImage>::to_rgb16","value":"fn to_rgb16<'_>(&'_ Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481439,"byte_end":481488,"line_start":183,"line_end":183,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481653,"byte_end":481662,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"to_rgb32f","qualname":"<DynamicImage>::to_rgb32f","value":"fn to_rgb32f<'_>(&'_ Self) -> Rgb32FImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481592,"byte_end":481641,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481809,"byte_end":481817,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"to_rgba8","qualname":"<DynamicImage>::to_rgba8","value":"fn to_rgba8<'_>(&'_ Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481747,"byte_end":481797,"line_start":193,"line_end":193,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481962,"byte_end":481971,"line_start":199,"line_end":199,"column_start":12,"column_end":21},"name":"to_rgba16","qualname":"<DynamicImage>::to_rgba16","value":"fn to_rgba16<'_>(&'_ Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":481900,"byte_end":481950,"line_start":198,"line_end":198,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482118,"byte_end":482128,"line_start":204,"line_end":204,"column_start":12,"column_end":22},"name":"to_rgba32f","qualname":"<DynamicImage>::to_rgba32f","value":"fn to_rgba32f<'_>(&'_ Self) -> Rgba32FImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482056,"byte_end":482106,"line_start":203,"line_end":203,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482275,"byte_end":482283,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"to_luma8","qualname":"<DynamicImage>::to_luma8","value":"fn to_luma8<'_>(&'_ Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482214,"byte_end":482263,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482427,"byte_end":482436,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"to_luma16","qualname":"<DynamicImage>::to_luma16","value":"fn to_luma16<'_>(&'_ Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482366,"byte_end":482415,"line_start":213,"line_end":213,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482582,"byte_end":482592,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"to_luma32f","qualname":"<DynamicImage>::to_luma32f","value":"fn to_luma32f<'_>(&'_ Self) -> ImageBuffer<Luma<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482521,"byte_end":482570,"line_start":218,"line_end":218,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482760,"byte_end":482774,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"to_luma_alpha8","qualname":"<DynamicImage>::to_luma_alpha8","value":"fn to_luma_alpha8<'_>(&'_ Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482698,"byte_end":482748,"line_start":223,"line_end":223,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482924,"byte_end":482939,"line_start":229,"line_end":229,"column_start":12,"column_end":27},"name":"to_luma_alpha16","qualname":"<DynamicImage>::to_luma_alpha16","value":"fn to_luma_alpha16<'_>(&'_ Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":482862,"byte_end":482912,"line_start":228,"line_end":228,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483091,"byte_end":483107,"line_start":234,"line_end":234,"column_start":12,"column_end":28},"name":"to_luma_alpha32f","qualname":"<DynamicImage>::to_luma_alpha32f","value":"fn to_luma_alpha32f<'_>(&'_ Self) -> ImageBuffer<LumaA<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483029,"byte_end":483079,"line_start":233,"line_end":233,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2843},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483393,"byte_end":483402,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"into_rgb8","qualname":"<DynamicImage>::into_rgb8","value":"fn into_rgb8(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483214,"byte_end":483260,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483265,"byte_end":483268,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483273,"byte_end":483343,"line_start":240,"line_end":240,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483348,"byte_end":483381,"line_start":241,"line_end":241,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483719,"byte_end":483729,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"into_rgb16","qualname":"<DynamicImage>::into_rgb16","value":"fn into_rgb16(Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483540,"byte_end":483586,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483591,"byte_end":483594,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483599,"byte_end":483669,"line_start":251,"line_end":251,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483674,"byte_end":483707,"line_start":252,"line_end":252,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484050,"byte_end":484061,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"into_rgb32f","qualname":"<DynamicImage>::into_rgb32f","value":"fn into_rgb32f(Self) -> Rgb32FImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483871,"byte_end":483917,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483922,"byte_end":483925,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":483930,"byte_end":484000,"line_start":262,"line_end":262,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484005,"byte_end":484038,"line_start":263,"line_end":263,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484386,"byte_end":484396,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"into_rgba8","qualname":"<DynamicImage>::into_rgba8","value":"fn into_rgba8(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484206,"byte_end":484253,"line_start":271,"line_end":271,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484258,"byte_end":484261,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484266,"byte_end":484336,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484341,"byte_end":484374,"line_start":274,"line_end":274,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2847},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484717,"byte_end":484728,"line_start":286,"line_end":286,"column_start":12,"column_end":23},"name":"into_rgba16","qualname":"<DynamicImage>::into_rgba16","value":"fn into_rgba16(Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484537,"byte_end":484584,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484589,"byte_end":484592,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484597,"byte_end":484667,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484672,"byte_end":484705,"line_start":285,"line_end":285,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2848},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485053,"byte_end":485065,"line_start":297,"line_end":297,"column_start":12,"column_end":24},"name":"into_rgba32f","qualname":"<DynamicImage>::into_rgba32f","value":"fn into_rgba32f(Self) -> Rgba32FImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484873,"byte_end":484920,"line_start":293,"line_end":293,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484925,"byte_end":484928,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":484933,"byte_end":485003,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485008,"byte_end":485041,"line_start":296,"line_end":296,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2849},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485393,"byte_end":485403,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"into_luma8","qualname":"<DynamicImage>::into_luma8","value":"fn into_luma8(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485213,"byte_end":485260,"line_start":304,"line_end":304,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485265,"byte_end":485268,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485273,"byte_end":485343,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485348,"byte_end":485381,"line_start":307,"line_end":307,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2850},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485724,"byte_end":485735,"line_start":319,"line_end":319,"column_start":12,"column_end":23},"name":"into_luma16","qualname":"<DynamicImage>::into_luma16","value":"fn into_luma16(Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485544,"byte_end":485591,"line_start":315,"line_end":315,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485596,"byte_end":485599,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485604,"byte_end":485674,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485679,"byte_end":485712,"line_start":318,"line_end":318,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2851},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486061,"byte_end":486077,"line_start":330,"line_end":330,"column_start":12,"column_end":28},"name":"into_luma_alpha8","qualname":"<DynamicImage>::into_luma_alpha8","value":"fn into_luma_alpha8(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485880,"byte_end":485928,"line_start":326,"line_end":326,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485933,"byte_end":485936,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":485941,"byte_end":486011,"line_start":328,"line_end":328,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486016,"byte_end":486049,"line_start":329,"line_end":329,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486411,"byte_end":486428,"line_start":341,"line_end":341,"column_start":12,"column_end":29},"name":"into_luma_alpha16","qualname":"<DynamicImage>::into_luma_alpha16","value":"fn into_luma_alpha16(Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486230,"byte_end":486278,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486283,"byte_end":486286,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486291,"byte_end":486361,"line_start":339,"line_end":339,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486366,"byte_end":486399,"line_start":340,"line_end":340,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486815,"byte_end":486819,"line_start":352,"line_end":352,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn crop<'_>(&'_ mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486585,"byte_end":486656,"line_start":348,"line_end":348,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486661,"byte_end":486664,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486669,"byte_end":486720,"line_start":350,"line_end":350,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486725,"byte_end":486803,"line_start":351,"line_end":351,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487076,"byte_end":487084,"line_start":357,"line_end":357,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"fn crop_imm<'_>(&'_ Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":486993,"byte_end":487064,"line_start":356,"line_end":356,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2855},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487309,"byte_end":487316,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn as_rgb8<'_>(&'_ Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487254,"byte_end":487297,"line_start":361,"line_end":361,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487531,"byte_end":487542,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn as_mut_rgb8<'_>(&'_ mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487468,"byte_end":487519,"line_start":369,"line_end":369,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2857},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487762,"byte_end":487770,"line_start":378,"line_end":378,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn as_rgba8<'_>(&'_ Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487706,"byte_end":487750,"line_start":377,"line_end":377,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2858},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487988,"byte_end":488000,"line_start":386,"line_end":386,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn as_mut_rgba8<'_>(&'_ mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":487924,"byte_end":487976,"line_start":385,"line_end":385,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2859},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488227,"byte_end":488235,"line_start":394,"line_end":394,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn as_luma8<'_>(&'_ Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488166,"byte_end":488215,"line_start":393,"line_end":393,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2860},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488458,"byte_end":488470,"line_start":402,"line_end":402,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn as_mut_luma8<'_>(&'_ mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488389,"byte_end":488446,"line_start":401,"line_end":401,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2861},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488719,"byte_end":488733,"line_start":410,"line_end":410,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn as_luma_alpha8<'_>(&'_ Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488636,"byte_end":488707,"line_start":409,"line_end":409,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2862},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488984,"byte_end":489002,"line_start":418,"line_end":418,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn as_mut_luma_alpha8<'_>(&'_ mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":488893,"byte_end":488972,"line_start":417,"line_end":417,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489230,"byte_end":489238,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"fn as_rgb16<'_>(&'_ Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489174,"byte_end":489218,"line_start":425,"line_end":425,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489457,"byte_end":489469,"line_start":434,"line_end":434,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"fn as_mut_rgb16<'_>(&'_ mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489393,"byte_end":489445,"line_start":433,"line_end":433,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2865},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489693,"byte_end":489702,"line_start":442,"line_end":442,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"fn as_rgba16<'_>(&'_ Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489636,"byte_end":489681,"line_start":441,"line_end":441,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489924,"byte_end":489937,"line_start":450,"line_end":450,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"fn as_mut_rgba16<'_>(&'_ mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":489859,"byte_end":489912,"line_start":449,"line_end":449,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490162,"byte_end":490171,"line_start":458,"line_end":458,"column_start":12,"column_end":21},"name":"as_rgb32f","qualname":"<DynamicImage>::as_rgb32f","value":"fn as_rgb32f<'_>(&'_ Self) -> Option<&Rgb32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490106,"byte_end":490150,"line_start":457,"line_end":457,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490392,"byte_end":490405,"line_start":466,"line_end":466,"column_start":12,"column_end":25},"name":"as_mut_rgb32f","qualname":"<DynamicImage>::as_mut_rgb32f","value":"fn as_mut_rgb32f<'_>(&'_ mut Self) -> Option<&mut Rgb32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 32bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 32bit RGB image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490328,"byte_end":490380,"line_start":465,"line_end":465,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490631,"byte_end":490641,"line_start":474,"line_end":474,"column_start":12,"column_end":22},"name":"as_rgba32f","qualname":"<DynamicImage>::as_rgba32f","value":"fn as_rgba32f<'_>(&'_ Self) -> Option<&Rgba32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 32bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 32bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490574,"byte_end":490619,"line_start":473,"line_end":473,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490865,"byte_end":490879,"line_start":482,"line_end":482,"column_start":12,"column_end":26},"name":"as_mut_rgba32f","qualname":"<DynamicImage>::as_mut_rgba32f","value":"fn as_mut_rgba32f<'_>(&'_ mut Self) -> Option<&mut Rgba32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":490800,"byte_end":490853,"line_start":481,"line_end":481,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491112,"byte_end":491121,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"fn as_luma16<'_>(&'_ Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491050,"byte_end":491100,"line_start":489,"line_end":489,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491348,"byte_end":491361,"line_start":498,"line_end":498,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"fn as_mut_luma16<'_>(&'_ mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491278,"byte_end":491336,"line_start":497,"line_end":497,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2873},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491614,"byte_end":491629,"line_start":506,"line_end":506,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"fn as_luma_alpha16<'_>(&'_ Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491530,"byte_end":491602,"line_start":505,"line_end":505,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491884,"byte_end":491903,"line_start":514,"line_end":514,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"fn as_mut_luma_alpha16<'_>(&'_ mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":491792,"byte_end":491872,"line_start":513,"line_end":513,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2875},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":492162,"byte_end":492180,"line_start":522,"line_end":522,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"fn as_flat_samples_u8<'_>(&'_ Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":492078,"byte_end":492150,"line_start":521,"line_end":521,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":492667,"byte_end":492686,"line_start":533,"line_end":533,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"fn as_flat_samples_u16<'_>(&'_ Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":492582,"byte_end":492655,"line_start":532,"line_end":532,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2877},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":493177,"byte_end":493196,"line_start":544,"line_end":544,"column_start":12,"column_end":31},"name":"as_flat_samples_f32","qualname":"<DynamicImage>::as_flat_samples_f32","value":"fn as_flat_samples_f32<'_>(&'_ Self) -> Option<FlatSamples<&[f32]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 32bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 32bit per channel images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":493093,"byte_end":493165,"line_start":543,"line_end":543,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":493527,"byte_end":493535,"line_start":553,"line_end":553,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<DynamicImage>::as_bytes","value":"fn as_bytes<'_>(&'_ Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a native endian byte slice.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a native endian byte slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":493454,"byte_end":493515,"line_start":552,"line_end":552,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":494248,"byte_end":494258,"line_start":571,"line_end":571,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<DynamicImage>::into_bytes","value":"fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector. If the `ImageBuffer`\n container is `Vec<u8>`, this operation is free. Otherwise, a copy\n is returned.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector. If the `ImageBuffer`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":494072,"byte_end":494141,"line_start":568,"line_end":568,"column_start":5,"column_end":74}},{"value":"/ container is `Vec<u8>`, this operation is free. Otherwise, a copy","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":494146,"byte_end":494215,"line_start":569,"line_end":569,"column_start":5,"column_end":74}},{"value":"/ is returned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":494220,"byte_end":494236,"line_start":570,"line_end":570,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495380,"byte_end":495388,"line_start":594,"line_end":594,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"fn to_bytes<'_>(&'_ Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of this image's pixels as a byte vector.\n Deprecated, because it does nothing but hide an expensive clone operation.\n","sig":null,"attributes":[{"value":"/ Return a copy of this image's pixels as a byte vector.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495095,"byte_end":495153,"line_start":588,"line_end":588,"column_start":5,"column_end":63}},{"value":"/ Deprecated, because it does nothing but hide an expensive clone operation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495158,"byte_end":495236,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"deprecated(since = \"0.24.0\", note =\n\"use `image.into_bytes()` or `image.as_bytes().to_vec()` instead\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495241,"byte_end":495368,"line_start":590,"line_end":593,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495500,"byte_end":495505,"line_start":599,"line_end":599,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn color<'_>(&'_ Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":495453,"byte_end":495488,"line_start":598,"line_end":598,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2883},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496317,"byte_end":496322,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"name":"width","qualname":"<DynamicImage>::width","value":"fn width<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of the underlying image\n","sig":null,"attributes":[{"value":"/ Returns the width of the underlying image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496260,"byte_end":496305,"line_start":614,"line_end":614,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496459,"byte_end":496465,"line_start":620,"line_end":620,"column_start":12,"column_end":18},"name":"height","qualname":"<DynamicImage>::height","value":"fn height<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the height of the underlying image\n","sig":null,"attributes":[{"value":"/ Returns the height of the underlying image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496401,"byte_end":496447,"line_start":619,"line_end":619,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496737,"byte_end":496746,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn grayscale<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n Returns `Luma` images in most cases. However, for `f32` images,\n this will return a grayscale `Rgb/Rgba` image instead.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496545,"byte_end":496590,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/ Returns `Luma` images in most cases. However, for `f32` images,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496595,"byte_end":496662,"line_start":625,"line_end":625,"column_start":5,"column_end":72}},{"value":"/ this will return a grayscale `Rgb/Rgba` image instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":496667,"byte_end":496725,"line_start":626,"line_end":626,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498099,"byte_end":498105,"line_start":656,"line_end":656,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn invert<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498013,"byte_end":498049,"line_start":654,"line_end":654,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498054,"byte_end":498087,"line_start":655,"line_end":655,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2887},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498460,"byte_end":498466,"line_start":664,"line_end":664,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn resize<'_>(&'_ Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by `nwidth` and `nheight`.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498191,"byte_end":498250,"line_start":660,"line_end":660,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498255,"byte_end":498318,"line_start":661,"line_end":661,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498323,"byte_end":498385,"line_start":662,"line_end":662,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by `nwidth` and `nheight`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498390,"byte_end":498448,"line_start":663,"line_end":663,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498922,"byte_end":498934,"line_start":674,"line_end":674,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn resize_exact<'_>(&'_ Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n `nwidth` and `nheight` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498728,"byte_end":498787,"line_start":671,"line_end":671,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498792,"byte_end":498848,"line_start":672,"line_end":672,"column_start":5,"column_end":61}},{"value":"/ `nwidth` and `nheight` are the new image's dimensions","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":498853,"byte_end":498910,"line_start":673,"line_end":673,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499617,"byte_end":499626,"line_start":691,"line_end":691,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn thumbnail<'_>(&'_ Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by `nwidth` and `nheight`.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499150,"byte_end":499206,"line_start":683,"line_end":683,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499211,"byte_end":499274,"line_start":684,"line_end":684,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499279,"byte_end":499341,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by `nwidth` and `nheight`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499346,"byte_end":499404,"line_start":686,"line_end":686,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499409,"byte_end":499412,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499417,"byte_end":499480,"line_start":688,"line_end":688,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499485,"byte_end":499535,"line_start":689,"line_end":689,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499540,"byte_end":499605,"line_start":690,"line_end":690,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500226,"byte_end":500241,"line_start":703,"line_end":703,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn thumbnail_exact<'_>(&'_ Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n `nwidth` and `nheight` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499852,"byte_end":499897,"line_start":697,"line_end":697,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499902,"byte_end":499958,"line_start":698,"line_end":698,"column_start":5,"column_end":61}},{"value":"/ `nwidth` and `nheight` are the new image's dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":499963,"byte_end":500021,"line_start":699,"line_end":699,"column_start":5,"column_end":63}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500026,"byte_end":500089,"line_start":700,"line_end":700,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500094,"byte_end":500144,"line_start":701,"line_end":701,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500149,"byte_end":500214,"line_start":702,"line_end":702,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2891},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500753,"byte_end":500767,"line_start":713,"line_end":713,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn resize_to_fill<'_>(&'_ Self, u32, u32, imageops::FilterType)\n-> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by `nwidth` and `nheight`, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500383,"byte_end":500442,"line_start":707,"line_end":707,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500447,"byte_end":500510,"line_start":708,"line_end":708,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500515,"byte_end":500577,"line_start":709,"line_end":709,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500582,"byte_end":500644,"line_start":710,"line_end":710,"column_start":5,"column_end":67}},{"value":"/ specified by `nwidth` and `nheight`, then cropped to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500649,"byte_end":500705,"line_start":711,"line_end":711,"column_start":5,"column_end":61}},{"value":"/ fit within the other bound.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":500710,"byte_end":500741,"line_start":712,"line_end":712,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501583,"byte_end":501587,"line_start":736,"line_end":736,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn blur<'_>(&'_ Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n `sigma` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501475,"byte_end":501518,"line_start":734,"line_end":734,"column_start":5,"column_end":48}},{"value":"/ `sigma` is a measure of how much to blur by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501523,"byte_end":501571,"line_start":735,"line_end":735,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2893},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501957,"byte_end":501966,"line_start":745,"line_end":745,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn unsharpen<'_>(&'_ Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n `sigma` is the amount to blur the image by.\n `threshold` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501699,"byte_end":501744,"line_start":740,"line_end":740,"column_start":5,"column_end":50}},{"value":"/ `sigma` is the amount to blur the image by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501749,"byte_end":501796,"line_start":741,"line_end":741,"column_start":5,"column_end":52}},{"value":"/ `threshold` is a control of how much to sharpen.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501801,"byte_end":501853,"line_start":742,"line_end":742,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501858,"byte_end":501861,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":501866,"byte_end":501945,"line_start":744,"line_end":744,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502175,"byte_end":502184,"line_start":750,"line_end":750,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn filter3x3<'_, '_>(&'_ Self, &'_ [f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502110,"byte_end":502163,"line_start":749,"line_end":749,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2895},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502590,"byte_end":502605,"line_start":761,"line_end":761,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn adjust_contrast<'_>(&'_ Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n `contrast` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502391,"byte_end":502429,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/ `contrast` is the amount to adjust the contrast by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502434,"byte_end":502489,"line_start":759,"line_end":759,"column_start":5,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502494,"byte_end":502578,"line_start":760,"line_end":760,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502901,"byte_end":502909,"line_start":768,"line_end":768,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn brighten<'_>(&'_ Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n `value` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502713,"byte_end":502751,"line_start":765,"line_end":765,"column_start":5,"column_end":43}},{"value":"/ `value` is the amount to brighten each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502756,"byte_end":502808,"line_start":766,"line_end":766,"column_start":5,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":502813,"byte_end":502889,"line_start":767,"line_end":767,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503257,"byte_end":503266,"line_start":776,"line_end":776,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn huerotate<'_>(&'_ Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503025,"byte_end":503059,"line_start":772,"line_end":772,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503064,"byte_end":503115,"line_start":773,"line_end":773,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503120,"byte_end":503189,"line_start":774,"line_end":774,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503194,"byte_end":503245,"line_start":775,"line_end":775,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503425,"byte_end":503430,"line_start":781,"line_end":781,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn flipv<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503383,"byte_end":503413,"line_start":780,"line_end":780,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2899},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503576,"byte_end":503581,"line_start":786,"line_end":786,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn fliph<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503532,"byte_end":503564,"line_start":785,"line_end":785,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503740,"byte_end":503748,"line_start":791,"line_end":791,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn rotate90<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503685,"byte_end":503728,"line_start":790,"line_end":790,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2901},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503901,"byte_end":503910,"line_start":796,"line_end":796,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn rotate180<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":503845,"byte_end":503889,"line_start":795,"line_end":795,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2902},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504064,"byte_end":504073,"line_start":801,"line_end":801,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn rotate270<'_>(&'_ Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504008,"byte_end":504052,"line_start":800,"line_end":800,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2903},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504367,"byte_end":504375,"line_start":809,"line_end":809,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn write_to<W, F, '_, '_>(&'_ Self, &'_ mut W, F) -> ImageResult<()> where\nW: Write + Seek, F: Into<ImageOutputFormat>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```.","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504171,"byte_end":504217,"line_start":805,"line_end":805,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504222,"byte_end":504225,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504230,"byte_end":504280,"line_start":807,"line_end":807,"column_start":5,"column_end":55}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":504285,"byte_end":504355,"line_start":808,"line_end":808,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506000,"byte_end":506004,"line_start":857,"line_end":857,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn save<Q, '_>(&'_ Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":505866,"byte_end":505919,"line_start":854,"line_end":854,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":505924,"byte_end":505927,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":505932,"byte_end":505988,"line_start":856,"line_end":856,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2908},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506351,"byte_end":506367,"line_start":869,"line_end":869,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn save_with_format<Q, '_>(&'_ Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506144,"byte_end":506199,"line_start":864,"line_end":864,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506204,"byte_end":506229,"line_start":865,"line_end":865,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506234,"byte_end":506237,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506242,"byte_end":506314,"line_start":867,"line_end":867,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506319,"byte_end":506339,"line_start":868,"line_end":868,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2911},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506593,"byte_end":506597,"line_start":878,"line_end":878,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(GrayImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506727,"byte_end":506731,"line_start":884,"line_end":884,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(GrayAlphaImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2915},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506861,"byte_end":506865,"line_start":890,"line_end":890,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(RgbImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2917},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506988,"byte_end":506992,"line_start":896,"line_end":896,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(RgbaImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2919},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507119,"byte_end":507123,"line_start":902,"line_end":902,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(Gray16Image) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507258,"byte_end":507262,"line_start":908,"line_end":908,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(GrayAlpha16Image) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2923},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507397,"byte_end":507401,"line_start":914,"line_end":914,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(Rgb16Image) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2925},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507529,"byte_end":507533,"line_start":920,"line_end":920,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(Rgba16Image) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507663,"byte_end":507667,"line_start":926,"line_end":926,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(Rgb32FImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507798,"byte_end":507802,"line_start":932,"line_end":932,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(Rgba32FImage) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507955,"byte_end":507959,"line_start":938,"line_end":938,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(ImageBuffer<Luma<f32>, Vec<f32>>) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508142,"byte_end":508146,"line_start":944,"line_end":944,"column_start":8,"column_end":12},"name":"from","qualname":"<DynamicImage as std::convert::From>::from","value":"fn from(ImageBuffer<LumaA<f32>, Vec<f32>>) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508431,"byte_end":508441,"line_start":953,"line_end":953,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<DynamicImage as image::GenericImageView>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3105},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508531,"byte_end":508537,"line_start":957,"line_end":957,"column_start":8,"column_end":14},"name":"bounds","qualname":"<DynamicImage as image::GenericImageView>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508633,"byte_end":508642,"line_start":961,"line_end":961,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<DynamicImage as image::GenericImageView>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> color::Rgba<u8>","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508839,"byte_end":508848,"line_start":968,"line_end":968,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"<DynamicImage as image::GenericImage>::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, color::Rgba<u8>)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":509913,"byte_end":509924,"line_start":985,"line_end":985,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"<DynamicImage as image::GenericImage>::blend_pixel","value":"fn blend_pixel<'_>(&'_ mut Self, u32, u32, color::Rgba<u8>)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":511124,"byte_end":511137,"line_start":1007,"line_end":1007,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"<DynamicImage as image::GenericImage>::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut color::Rgba<u8>","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3115},"docs":" Do not use is function: It is unimplemented!\n","sig":null,"attributes":[{"value":"/ Do not use is function: It is unimplemented!","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":511068,"byte_end":511116,"line_start":1006,"line_end":1006,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":511264,"byte_end":511271,"line_start":1013,"line_end":1013,"column_start":8,"column_end":15},"name":"default","qualname":"<DynamicImage as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3227},"children":[],"decl_id":{"krate":2,"index":3228},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2948},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514243,"byte_end":514247,"line_start":1101,"line_end":1101,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":513941,"byte_end":513990,"line_start":1094,"line_end":1094,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":513991,"byte_end":514059,"line_start":1095,"line_end":1095,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514060,"byte_end":514063,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514064,"byte_end":514160,"line_start":1097,"line_end":1097,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514161,"byte_end":514189,"line_start":1098,"line_end":1098,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514190,"byte_end":514193,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514194,"byte_end":514235,"line_start":1100,"line_end":1100,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2950},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514826,"byte_end":514842,"line_start":1116,"line_end":1116,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read a tuple containing the (width, height) of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read a tuple containing the (width, height) of the image located at the specified path.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514437,"byte_end":514528,"line_start":1109,"line_end":1109,"column_start":1,"column_end":92}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514529,"byte_end":514609,"line_start":1110,"line_end":1110,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514610,"byte_end":514613,"line_start":1111,"line_end":1111,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514614,"byte_end":514710,"line_start":1112,"line_end":1112,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514711,"byte_end":514772,"line_start":1113,"line_end":1113,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514773,"byte_end":514776,"line_start":1114,"line_end":1114,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":514777,"byte_end":514818,"line_start":1115,"line_end":1115,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2952},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515425,"byte_end":515436,"line_start":1131,"line_end":1131,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn save_buffer<P, '_>(P, &'_ [u8], u32, u32, color::ColorType)\n-> ImageResult<()> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515042,"byte_end":515104,"line_start":1124,"line_end":1124,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515105,"byte_end":515108,"line_start":1125,"line_end":1125,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515109,"byte_end":515195,"line_start":1126,"line_end":1126,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515196,"byte_end":515257,"line_start":1127,"line_end":1127,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515258,"byte_end":515261,"line_start":1128,"line_end":1128,"column_start":1,"column_end":4}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515262,"byte_end":515353,"line_start":1129,"line_end":1129,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp, exr and tiff files are supported.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515354,"byte_end":515417,"line_start":1130,"line_end":1130,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":2954},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516095,"byte_end":516118,"line_start":1153,"line_end":1153,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn save_buffer_with_format<P,\n'_>(P, &'_ [u8], u32, u32, color::ColorType, ImageFormat) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515742,"byte_end":515803,"line_start":1145,"line_end":1145,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515804,"byte_end":515832,"line_start":1146,"line_end":1146,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515833,"byte_end":515836,"line_start":1147,"line_end":1147,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515837,"byte_end":515899,"line_start":1148,"line_end":1148,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515900,"byte_end":515932,"line_start":1149,"line_end":1149,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515933,"byte_end":515993,"line_start":1150,"line_end":1150,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp, exr and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":515994,"byte_end":516057,"line_start":1151,"line_end":1151,"column_start":1,"column_end":64}},{"value":"/ tiff files are supported.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516058,"byte_end":516087,"line_start":1152,"line_end":1152,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2956},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516912,"byte_end":516936,"line_start":1180,"line_end":1180,"column_start":8,"column_end":32},"name":"write_buffer_with_format","qualname":"::dynimage::write_buffer_with_format","value":"fn write_buffer_with_format<W, F, '_,\n'_>(&'_ mut W, &'_ [u8], u32, u32, color::ColorType, F) -> ImageResult<()>\nwhere W: Write + Seek, F: Into<ImageOutputFormat>","parent":null,"children":[],"decl_id":null,"docs":" Writes the supplied buffer to a writer in the specified format.","sig":null,"attributes":[{"value":"/ Writes the supplied buffer to a writer in the specified format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516437,"byte_end":516504,"line_start":1168,"line_end":1168,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516505,"byte_end":516508,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516509,"byte_end":516571,"line_start":1170,"line_end":1170,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516572,"byte_end":516604,"line_start":1171,"line_end":1171,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted writers if the buffer contains","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516605,"byte_end":516667,"line_start":1172,"line_end":1172,"column_start":1,"column_end":63}},{"value":"/ malformed data.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516668,"byte_end":516687,"line_start":1173,"line_end":1173,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516688,"byte_end":516691,"line_start":1174,"line_end":1174,"column_start":1,"column_end":4}},{"value":"/ See [`ImageOutputFormat`](../enum.ImageOutputFormat.html) for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516692,"byte_end":516757,"line_start":1175,"line_end":1175,"column_start":1,"column_end":66}},{"value":"/ supported types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516758,"byte_end":516778,"line_start":1176,"line_end":1176,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516779,"byte_end":516782,"line_start":1177,"line_end":1177,"column_start":1,"column_end":4}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516783,"byte_end":516833,"line_start":1178,"line_end":1178,"column_start":1,"column_end":51}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":516834,"byte_end":516904,"line_start":1179,"line_end":1179,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":2959},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517539,"byte_end":517555,"line_start":1204,"line_end":1204,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn load_from_memory<'_>(&'_ [u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517295,"byte_end":517335,"line_start":1196,"line_end":1196,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517336,"byte_end":517339,"line_start":1197,"line_end":1197,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517340,"byte_end":517391,"line_start":1198,"line_end":1198,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517392,"byte_end":517434,"line_start":1199,"line_end":1199,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517435,"byte_end":517438,"line_start":1200,"line_end":1200,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517439,"byte_end":517485,"line_start":1201,"line_end":1201,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517486,"byte_end":517489,"line_start":1202,"line_end":1202,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517490,"byte_end":517531,"line_start":1203,"line_end":1203,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2960},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":518037,"byte_end":518065,"line_start":1219,"line_end":1219,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn load_from_memory_with_format<'_>(&'_ [u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517710,"byte_end":517750,"line_start":1209,"line_end":1209,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517751,"byte_end":517754,"line_start":1210,"line_end":1210,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517755,"byte_end":517852,"line_start":1211,"line_end":1211,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517853,"byte_end":517887,"line_start":1212,"line_end":1212,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517888,"byte_end":517891,"line_start":1213,"line_end":1213,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517892,"byte_end":517938,"line_start":1214,"line_end":1214,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517939,"byte_end":517942,"line_start":1215,"line_end":1215,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517943,"byte_end":517969,"line_start":1216,"line_end":1216,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":517970,"byte_end":518011,"line_start":1217,"line_end":1217,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":518012,"byte_end":518029,"line_start":1218,"line_end":1218,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4476},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522825,"byte_end":522828,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522794,"byte_end":522820,"line_start":29,"line_end":29,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4478},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522867,"byte_end":522871,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522835,"byte_end":522862,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4480},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522909,"byte_end":522912,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522878,"byte_end":522904,"line_start":35,"line_end":35,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4482},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522951,"byte_end":522955,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522919,"byte_end":522946,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4484},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523001,"byte_end":523004,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522962,"byte_end":522996,"line_start":41,"line_end":41,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4486},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523043,"byte_end":523047,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523011,"byte_end":523038,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4488},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523085,"byte_end":523088,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523054,"byte_end":523080,"line_start":47,"line_end":47,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4490},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523126,"byte_end":523129,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523095,"byte_end":523121,"line_start":50,"line_end":50,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4492},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523167,"byte_end":523170,"line_start":54,"line_end":54,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523136,"byte_end":523162,"line_start":53,"line_end":53,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4494},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523208,"byte_end":523211,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523177,"byte_end":523203,"line_start":56,"line_end":56,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4496},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523258,"byte_end":523261,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523218,"byte_end":523253,"line_start":59,"line_end":59,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4498},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523303,"byte_end":523310,"line_start":63,"line_end":63,"column_start":5,"column_end":12},"name":"OpenExr","qualname":"::image::ImageFormat::OpenExr","value":"ImageFormat::OpenExr","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in OpenEXR Format\n","sig":null,"attributes":[{"value":"/ An Image in OpenEXR Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523268,"byte_end":523298,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4500},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523353,"byte_end":523361,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523317,"byte_end":523348,"line_start":65,"line_end":65,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4502},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523401,"byte_end":523405,"line_start":69,"line_end":69,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":4475},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523368,"byte_end":523396,"line_start":68,"line_end":68,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":4475},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522776,"byte_end":522787,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"enum ImageFormat {\n    Png,\n    Jpeg,\n    Gif,\n    WebP,\n    Pnm,\n    Tiff,\n    Tga,\n    Dds,\n    Bmp,\n    Ico,\n    Hdr,\n    OpenExr,\n    Farbfeld,\n    Avif,\n}","parent":null,"children":[{"krate":0,"index":4476},{"krate":0,"index":4478},{"krate":0,"index":4480},{"krate":0,"index":4482},{"krate":0,"index":4484},{"krate":0,"index":4486},{"krate":0,"index":4488},{"krate":0,"index":4490},{"krate":0,"index":4492},{"krate":0,"index":4494},{"krate":0,"index":4496},{"krate":0,"index":4498},{"krate":0,"index":4500},{"krate":0,"index":4502}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522595,"byte_end":522641,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522642,"byte_end":522697,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":522749,"byte_end":522766,"line_start":27,"line_end":27,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":3029},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523732,"byte_end":523746,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"from_extension","qualname":"<ImageFormat>::from_extension","value":"fn from_extension<S>(S) -> Option<Self> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by a path's file extension.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523433,"byte_end":523498,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523503,"byte_end":523506,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523511,"byte_end":523524,"line_start":75,"line_end":75,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523529,"byte_end":523532,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523537,"byte_end":523544,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523549,"byte_end":523576,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523581,"byte_end":523584,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_extension(\"jpg\");","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523589,"byte_end":523641,"line_start":80,"line_end":80,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(format, Some(ImageFormat::Jpeg));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523646,"byte_end":523694,"line_start":81,"line_end":81,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523699,"byte_end":523706,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523711,"byte_end":523720,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3032},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525149,"byte_end":525158,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524788,"byte_end":524855,"line_start":114,"line_end":114,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524860,"byte_end":524863,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524868,"byte_end":524881,"line_start":116,"line_end":116,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524886,"byte_end":524889,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524894,"byte_end":524901,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524906,"byte_end":524933,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524938,"byte_end":524941,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_path(\"images/ferris.png\")?;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":524946,"byte_end":525008,"line_start":121,"line_end":121,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525013,"byte_end":525054,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525059,"byte_end":525062,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Ok::<(), image::error::ImageError>(())","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525067,"byte_end":525111,"line_start":124,"line_end":124,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525116,"byte_end":525123,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525128,"byte_end":525137,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3036},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":526130,"byte_end":526144,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"from_mime_type","qualname":"<ImageFormat>::from_mime_type","value":"fn from_mime_type<M>(M) -> Option<Self> where M: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a MIME type.","sig":null,"attributes":[{"value":"/ Return the image format specified by a MIME type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525849,"byte_end":525902,"line_start":148,"line_end":148,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525907,"byte_end":525910,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525915,"byte_end":525928,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525933,"byte_end":525936,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525941,"byte_end":525948,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525953,"byte_end":525980,"line_start":153,"line_end":153,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525985,"byte_end":525988,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_mime_type(\"image/png\").unwrap();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":525993,"byte_end":526060,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":526065,"byte_end":526106,"line_start":156,"line_end":156,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":526111,"byte_end":526118,"line_start":157,"line_end":157,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":527229,"byte_end":527237,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"can_read","qualname":"<ImageFormat>::can_read","value":"fn can_read<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be decoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be decoded by the lib.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":527147,"byte_end":527203,"line_start":183,"line_end":183,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":527208,"byte_end":527217,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3039},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528021,"byte_end":528030,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"can_write","qualname":"<ImageFormat>::can_write","value":"fn can_write<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be encoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be encoded by the lib.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":527939,"byte_end":527995,"line_start":205,"line_end":205,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528000,"byte_end":528009,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3040},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529347,"byte_end":529361,"line_start":236,"line_end":236,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528757,"byte_end":528816,"line_start":227,"line_end":227,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528821,"byte_end":528824,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528829,"byte_end":528916,"line_start":229,"line_end":229,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":528921,"byte_end":529015,"line_start":230,"line_end":230,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529020,"byte_end":529115,"line_start":231,"line_end":231,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529120,"byte_end":529131,"line_start":232,"line_end":232,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529136,"byte_end":529139,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529144,"byte_end":529238,"line_start":234,"line_end":234,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":529243,"byte_end":529335,"line_start":235,"line_end":235,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4519},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530373,"byte_end":530376,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":4518},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530314,"byte_end":530337,"line_start":261,"line_end":261,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530342,"byte_end":530368,"line_start":262,"line_end":262,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4521},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530467,"byte_end":530471,"line_start":267,"line_end":267,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":4518},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530383,"byte_end":530407,"line_start":265,"line_end":265,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530412,"byte_end":530462,"line_start":266,"line_end":266,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":4523},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530472,"byte_end":530474,"line_start":267,"line_end":267,"column_start":10,"column_end":12},"name":"0","qualname":"::image::ImageOutputFormat::Jpeg::0","value":"u8","parent":{"krate":0,"index":4521},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4524},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530772,"byte_end":530775,"line_start":283,"line_end":283,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":4518},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530713,"byte_end":530736,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530741,"byte_end":530767,"line_start":282,"line_end":282,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4526},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531490,"byte_end":531501,"line_start":312,"line_end":312,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":4518},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531245,"byte_end":531317,"line_start":309,"line_end":309,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":4528},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531502,"byte_end":531508,"line_start":312,"line_end":312,"column_start":17,"column_end":23},"name":"0","qualname":"::image::ImageOutputFormat::Unsupported::0","value":"std::string::String","parent":{"krate":0,"index":4526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4518},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530290,"byte_end":530307,"line_start":260,"line_end":260,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"enum ImageOutputFormat { Png, Jpeg(u8), Bmp, Unsupported(String), }","parent":null,"children":[{"krate":0,"index":4519},{"krate":0,"index":4521},{"krate":0,"index":4524},{"krate":0,"index":4526}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530164,"byte_end":530223,"line_start":257,"line_end":257,"column_start":1,"column_end":60}},{"value":"non_exhaustive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":530263,"byte_end":530280,"line_start":259,"line_end":259,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":3042},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531568,"byte_end":531572,"line_start":316,"line_end":316,"column_start":8,"column_end":12},"name":"from","qualname":"<ImageOutputFormat as std::convert::From>::from","value":"fn from(ImageFormat) -> Self","parent":{"krate":2,"index":3155},"children":[],"decl_id":{"krate":2,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4540},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542456,"byte_end":542464,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":4541},{"krate":0,"index":4542}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542052,"byte_end":542102,"line_start":595,"line_end":595,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542103,"byte_end":542106,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542107,"byte_end":542204,"line_start":597,"line_end":597,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542205,"byte_end":542299,"line_start":598,"line_end":598,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542300,"byte_end":542399,"line_start":599,"line_end":599,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542770,"byte_end":542777,"line_start":613,"line_end":613,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542722,"byte_end":542758,"line_start":612,"line_end":612,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542950,"byte_end":542955,"line_start":620,"line_end":620,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542825,"byte_end":542870,"line_start":617,"line_end":617,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542875,"byte_end":542878,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542883,"byte_end":542938,"line_start":619,"line_end":619,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543065,"byte_end":543074,"line_start":625,"line_end":625,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543001,"byte_end":543053,"line_start":624,"line_end":624,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":3070},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543203,"byte_end":543215,"line_start":631,"line_end":631,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":3072},{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3081},{"krate":0,"index":3083}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543151,"byte_end":543192,"line_start":630,"line_end":630,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3072},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543292,"byte_end":543298,"line_start":633,"line_end":633,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543233,"byte_end":543282,"line_start":632,"line_end":632,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543388,"byte_end":543398,"line_start":636,"line_end":636,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543316,"byte_end":543380,"line_start":635,"line_end":635,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543503,"byte_end":543513,"line_start":639,"line_end":639,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"fn color_type<'_>(&'_ Self) -> ColorType","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543426,"byte_end":543495,"line_start":638,"line_end":638,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3075},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543608,"byte_end":543627,"line_start":642,"line_end":642,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"fn original_color_type<'_>(&'_ Self) -> ExtendedColorType","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image file before decoding","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543540,"byte_end":543600,"line_start":641,"line_end":641,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543968,"byte_end":543979,"line_start":649,"line_end":649,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543702,"byte_end":543786,"line_start":646,"line_end":646,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543791,"byte_end":543887,"line_start":647,"line_end":647,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543892,"byte_end":543960,"line_start":648,"line_end":648,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3077},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544437,"byte_end":544448,"line_start":657,"line_end":657,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn total_bytes<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544021,"byte_end":544080,"line_start":651,"line_end":651,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544085,"byte_end":544088,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544093,"byte_end":544166,"line_start":653,"line_end":653,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544171,"byte_end":544247,"line_start":654,"line_end":654,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544252,"byte_end":544344,"line_start":655,"line_end":655,"column_start":5,"column_end":97}},{"value":"/ into. If, however, the size does not fit in a u64 then u64::MAX is returned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544349,"byte_end":544429,"line_start":656,"line_end":656,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544887,"byte_end":544901,"line_start":666,"line_end":666,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn scanline_bytes<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544729,"byte_end":544825,"line_start":664,"line_end":664,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544830,"byte_end":544879,"line_start":665,"line_end":665,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545802,"byte_end":545812,"line_start":691,"line_end":691,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn read_image<'_>(Self, &'_ mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":544956,"byte_end":544995,"line_start":670,"line_end":670,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545000,"byte_end":545003,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545008,"byte_end":545096,"line_start":672,"line_end":672,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545101,"byte_end":545194,"line_start":673,"line_end":673,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545199,"byte_end":545297,"line_start":674,"line_end":674,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545302,"byte_end":545372,"line_start":675,"line_end":675,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545377,"byte_end":545380,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545385,"byte_end":545397,"line_start":677,"line_end":677,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545402,"byte_end":545405,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545410,"byte_end":545470,"line_start":679,"line_end":679,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545475,"byte_end":545478,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545483,"byte_end":545497,"line_start":681,"line_end":681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545502,"byte_end":545505,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545510,"byte_end":545525,"line_start":683,"line_end":683,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545530,"byte_end":545569,"line_start":684,"line_end":684,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545574,"byte_end":545638,"line_start":685,"line_end":685,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545643,"byte_end":545708,"line_start":686,"line_end":686,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545713,"byte_end":545756,"line_start":687,"line_end":687,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545761,"byte_end":545772,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545777,"byte_end":545782,"line_start":689,"line_end":689,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545787,"byte_end":545794,"line_start":690,"line_end":690,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3081},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":546040,"byte_end":546064,"line_start":697,"line_end":697,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn read_image_with_progress<F, '_>(Self, &'_ mut [u8], F) -> ImageResult<()>\nwhere F: Fn(Progress) -> ()","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":545918,"byte_end":546014,"line_start":695,"line_end":695,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":546019,"byte_end":546032,"line_start":696,"line_end":696,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":3083},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547652,"byte_end":547662,"line_start":740,"line_end":740,"column_start":8,"column_end":18},"name":"set_limits","qualname":"::image::ImageDecoder::set_limits","value":"fn set_limits<'_>(&'_ mut Self, crate::io::Limits) -> ImageResult<()>","parent":{"krate":0,"index":3070},"children":[],"decl_id":null,"docs":" Set decoding limits for this decoder. See [`Limits`] for the different kinds of\n limits that is possible to set.","sig":null,"attributes":[{"value":"/ Set decoding limits for this decoder. See [`Limits`] for the different kinds of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547016,"byte_end":547099,"line_start":729,"line_end":729,"column_start":5,"column_end":88}},{"value":"/ limits that is possible to set.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547104,"byte_end":547139,"line_start":730,"line_end":730,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547144,"byte_end":547147,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ Note to implementors: make sure you call [`Limits::check_support`] so that","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547152,"byte_end":547230,"line_start":732,"line_end":732,"column_start":5,"column_end":83}},{"value":"/ decoding fails if any unsupported strict limits are set. Also make sure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547235,"byte_end":547310,"line_start":733,"line_end":733,"column_start":5,"column_end":80}},{"value":"/ you call [`Limits::check_dimensions`] to check the `max_image_width` and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547315,"byte_end":547391,"line_start":734,"line_end":734,"column_start":5,"column_end":81}},{"value":"/ `max_image_height` limits.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547396,"byte_end":547426,"line_start":735,"line_end":735,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547431,"byte_end":547434,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ [`Limits`]: ./io/struct.Limits.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547439,"byte_end":547478,"line_start":737,"line_end":737,"column_start":5,"column_end":44}},{"value":"/ [`Limits::check_support`]: ./io/struct.Limits.html#method.check_support","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547483,"byte_end":547558,"line_start":738,"line_end":738,"column_start":5,"column_end":80}},{"value":"/ [`Limits::check_dimensions`]: ./io/struct.Limits.html#method.check_dimensions","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547563,"byte_end":547644,"line_start":739,"line_end":739,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":3084},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547987,"byte_end":548003,"line_start":751,"line_end":751,"column_start":11,"column_end":27},"name":"ImageDecoderRect","qualname":"::image::ImageDecoderRect","value":"ImageDecoderRect<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":3086},{"krate":0,"index":3088}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":547914,"byte_end":547976,"line_start":750,"line_end":750,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548158,"byte_end":548167,"line_start":753,"line_end":753,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderRect::read_rect","value":"fn read_rect<'_, '_>(&'_ mut Self, u32, u32, u32, u32, &'_ mut [u8])\n-> ImageResult<()>","parent":{"krate":0,"index":3084},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548040,"byte_end":548150,"line_start":752,"line_end":752,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":3088},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549110,"byte_end":549133,"line_start":776,"line_end":776,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderRect::read_rect_with_progress","value":"fn read_rect_with_progress<F, '_,\n'_>(&'_ mut Self, u32, u32, u32, u32, &'_ mut [u8], F) -> ImageResult<()>\nwhere F: Fn(Progress) -> ()","parent":{"krate":0,"index":3084},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548394,"byte_end":548473,"line_start":764,"line_end":764,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548478,"byte_end":548481,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548486,"byte_end":548547,"line_start":766,"line_end":766,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548552,"byte_end":548626,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548631,"byte_end":548690,"line_start":768,"line_end":768,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548695,"byte_end":548698,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548703,"byte_end":548795,"line_start":770,"line_end":770,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548800,"byte_end":548859,"line_start":771,"line_end":771,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548864,"byte_end":548924,"line_start":772,"line_end":772,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548929,"byte_end":548932,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548937,"byte_end":549001,"line_start":774,"line_end":774,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549006,"byte_end":549102,"line_start":775,"line_end":775,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":3090},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549364,"byte_end":549380,"line_start":788,"line_end":788,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3092}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549327,"byte_end":549353,"line_start":787,"line_end":787,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549452,"byte_end":549463,"line_start":790,"line_end":790,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn into_frames(Self) -> Frames","parent":{"krate":0,"index":3090},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549391,"byte_end":549444,"line_start":789,"line_end":789,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":3093},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549535,"byte_end":549547,"line_start":794,"line_end":794,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":3094}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549488,"byte_end":549524,"line_start":793,"line_end":793,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550097,"byte_end":550108,"line_start":805,"line_end":805,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"fn write_image<'_>(Self, &'_ [u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549554,"byte_end":549606,"line_start":795,"line_end":795,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549611,"byte_end":549614,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549619,"byte_end":549690,"line_start":797,"line_end":797,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549695,"byte_end":549771,"line_start":798,"line_end":798,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549776,"byte_end":549851,"line_start":799,"line_end":799,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianness","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549856,"byte_end":549931,"line_start":800,"line_end":800,"column_start":5,"column_end":80}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549936,"byte_end":549984,"line_start":801,"line_end":801,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549989,"byte_end":549992,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":549997,"byte_end":550066,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550071,"byte_end":550089,"line_start":804,"line_end":804,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4555},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550302,"byte_end":550308,"line_start":816,"line_end":816,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":4558},{"krate":0,"index":4559},{"krate":0,"index":4560},{"krate":0,"index":4561},{"krate":0,"index":4562}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550245,"byte_end":550273,"line_start":814,"line_end":814,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3099},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550514,"byte_end":550518,"line_start":827,"line_end":827,"column_start":8,"column_end":12},"name":"next","qualname":"<Pixels as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(u32, u32, I::Pixel)>","parent":{"krate":2,"index":8574},"children":[],"decl_id":{"krate":2,"index":8576},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3102},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550949,"byte_end":550954,"line_start":847,"line_end":847,"column_start":8,"column_end":13},"name":"clone","qualname":"<Pixels as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2871},"children":[],"decl_id":{"krate":2,"index":2872},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3103},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551226,"byte_end":551242,"line_start":860,"line_end":860,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3108},{"krate":0,"index":3109},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3113}],"decl_id":null,"docs":" Trait to inspect an image.","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551008,"byte_end":551038,"line_start":852,"line_end":852,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551039,"byte_end":551042,"line_start":853,"line_end":853,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551043,"byte_end":551050,"line_start":854,"line_end":854,"column_start":1,"column_end":8}},{"value":"/ use image::{GenericImageView, Rgb, RgbImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551051,"byte_end":551100,"line_start":855,"line_end":855,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551101,"byte_end":551104,"line_start":856,"line_end":856,"column_start":1,"column_end":4}},{"value":"/ let buffer = RgbImage::new(10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551105,"byte_end":551144,"line_start":857,"line_end":857,"column_start":1,"column_end":40}},{"value":"/ let image: &dyn GenericImageView<Pixel=Rgb<u8>> = &buffer;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551145,"byte_end":551207,"line_start":858,"line_end":858,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551208,"byte_end":551215,"line_start":859,"line_end":859,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":3104},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551281,"byte_end":551286,"line_start":862,"line_end":862,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551249,"byte_end":551271,"line_start":861,"line_end":861,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3105},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551347,"byte_end":551357,"line_start":865,"line_end":865,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551300,"byte_end":551339,"line_start":864,"line_end":864,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551421,"byte_end":551426,"line_start":868,"line_end":868,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn width<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551385,"byte_end":551413,"line_start":867,"line_end":867,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3107},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551541,"byte_end":551547,"line_start":874,"line_end":874,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn height<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551504,"byte_end":551533,"line_start":873,"line_end":873,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3108},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551674,"byte_end":551680,"line_start":880,"line_end":880,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551625,"byte_end":551666,"line_start":879,"line_end":879,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3109},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551797,"byte_end":551806,"line_start":883,"line_end":883,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn in_bounds<'_>(&'_ Self, u32, u32) -> bool","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551718,"byte_end":551789,"line_start":882,"line_end":882,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552103,"byte_end":552112,"line_start":893,"line_end":893,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":551954,"byte_end":552017,"line_start":888,"line_end":888,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552022,"byte_end":552025,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552030,"byte_end":552042,"line_start":890,"line_end":890,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552047,"byte_end":552050,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552055,"byte_end":552095,"line_start":892,"line_end":892,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3111},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552457,"byte_end":552473,"line_start":903,"line_end":903,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"unsafe fn unsafe_get_pixel<'_>(&'_ Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552157,"byte_end":552220,"line_start":895,"line_end":895,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552225,"byte_end":552228,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552233,"byte_end":552308,"line_start":897,"line_end":897,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552313,"byte_end":552325,"line_start":898,"line_end":898,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552330,"byte_end":552333,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552338,"byte_end":552393,"line_start":900,"line_end":900,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552398,"byte_end":552401,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552406,"byte_end":552442,"line_start":902,"line_end":902,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552705,"byte_end":552711,"line_start":910,"line_end":910,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn pixels<'_>(&'_ Self) -> Pixels<, Self> where Self: Sized","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552554,"byte_end":552608,"line_start":907,"line_end":907,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552613,"byte_end":552666,"line_start":908,"line_end":908,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552671,"byte_end":552697,"line_start":909,"line_end":909,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3113},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553194,"byte_end":553198,"line_start":928,"line_end":928,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn view<'_>(&'_ Self, u32, u32, u32, u32) -> SubImage<&Self> where Self: Sized","parent":{"krate":0,"index":3103},"children":[],"decl_id":null,"docs":" Returns a subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n The coordinates set the position of the top left corner of the view.\n","sig":null,"attributes":[{"value":"/ Returns a subimage that is an immutable view into this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":552960,"byte_end":553025,"line_start":925,"line_end":925,"column_start":5,"column_end":70}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553030,"byte_end":553109,"line_start":926,"line_end":926,"column_start":5,"column_end":84}},{"value":"/ The coordinates set the position of the top left corner of the view.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553114,"byte_end":553186,"line_start":927,"line_end":927,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":3114},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553540,"byte_end":553552,"line_start":939,"line_end":939,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3121},{"krate":0,"index":3123}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553493,"byte_end":553529,"line_start":938,"line_end":938,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3115},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554426,"byte_end":554439,"line_start":961,"line_end":961,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553577,"byte_end":553663,"line_start":940,"line_end":940,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553668,"byte_end":553671,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553676,"byte_end":553688,"line_start":942,"line_end":942,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553693,"byte_end":553696,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553701,"byte_end":553741,"line_start":944,"line_end":944,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553746,"byte_end":553749,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ Panics for dynamic images (this method is deprecated and will be removed).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553754,"byte_end":553832,"line_start":946,"line_end":946,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553837,"byte_end":553840,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ## Known issues","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553845,"byte_end":553864,"line_start":948,"line_end":948,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553869,"byte_end":553872,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ This requires the buffer to contain a unique set of continuous channels in the exact order","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553877,"byte_end":553971,"line_start":950,"line_end":950,"column_start":5,"column_end":99}},{"value":"/ and byte representation that the pixel type requires. This is somewhat restrictive.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553976,"byte_end":554063,"line_start":951,"line_end":951,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554068,"byte_end":554071,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ TODO: Maybe use some kind of entry API? this would allow pixel type conversion on the fly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554076,"byte_end":554169,"line_start":953,"line_end":953,"column_start":5,"column_end":98}},{"value":"/ while still doing only one array lookup:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554174,"byte_end":554218,"line_start":954,"line_end":954,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554223,"byte_end":554226,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554231,"byte_end":554244,"line_start":956,"line_end":956,"column_start":5,"column_end":18}},{"value":"/ let px = image.pixel_entry_at(x,y);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554249,"byte_end":554288,"line_start":957,"line_end":957,"column_start":5,"column_end":44}},{"value":"/ px.set_from_rgba(rgba)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554293,"byte_end":554319,"line_start":958,"line_end":958,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554324,"byte_end":554331,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.24.0\", note =\n\"Use `get_pixel` and `put_pixel` instead.\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554336,"byte_end":554418,"line_start":960,"line_end":960,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554637,"byte_end":554646,"line_start":968,"line_end":968,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y). Indexed from top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554493,"byte_end":554551,"line_start":963,"line_end":963,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554556,"byte_end":554559,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554564,"byte_end":554576,"line_start":965,"line_end":965,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554581,"byte_end":554584,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554589,"byte_end":554629,"line_start":967,"line_end":967,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3117},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555024,"byte_end":555040,"line_start":978,"line_end":978,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"unsafe fn unsafe_put_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y). Indexed from top left.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554700,"byte_end":554759,"line_start":970,"line_end":970,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554764,"byte_end":554767,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554772,"byte_end":554847,"line_start":972,"line_end":972,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554852,"byte_end":554864,"line_start":973,"line_end":973,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554869,"byte_end":554872,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554877,"byte_end":554932,"line_start":975,"line_end":975,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554937,"byte_end":554940,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":554945,"byte_end":555009,"line_start":977,"line_end":977,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555339,"byte_end":555350,"line_start":987,"line_end":987,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn blend_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555138,"byte_end":555208,"line_start":982,"line_end":982,"column_start":5,"column_end":75}},{"value":"deprecated(since = \"0.24.0\", note =\n\"Use iterator `pixels_mut` to blend the pixels directly\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555213,"byte_end":555331,"line_start":983,"line_end":986,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":556112,"byte_end":556121,"line_start":1004,"line_end":1004,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn copy_from<O, '_, '_>(&'_ mut Self, &'_ O, u32, u32) -> ImageResult<()>\nwhere O: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555404,"byte_end":555468,"line_start":989,"line_end":989,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555473,"byte_end":555476,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555481,"byte_end":555542,"line_start":991,"line_end":991,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555547,"byte_end":555580,"line_start":992,"line_end":992,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555585,"byte_end":555588,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555593,"byte_end":555678,"line_start":994,"line_end":994,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555683,"byte_end":555686,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555691,"byte_end":555783,"line_start":996,"line_end":996,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555788,"byte_end":555854,"line_start":997,"line_end":997,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555859,"byte_end":555862,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555867,"byte_end":555880,"line_start":999,"line_end":999,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555885,"byte_end":555966,"line_start":1000,"line_end":1000,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555971,"byte_end":555974,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":555979,"byte_end":556050,"line_start":1002,"line_end":1002,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":556055,"byte_end":556104,"line_start":1003,"line_end":1003,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3121},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":557168,"byte_end":557179,"line_start":1032,"line_end":1032,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"fn copy_within<'_>(&'_ mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":556820,"byte_end":556907,"line_start":1025,"line_end":1025,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":556912,"byte_end":556915,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":556920,"byte_end":557017,"line_start":1027,"line_end":1027,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":557022,"byte_end":557025,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":557030,"byte_end":557043,"line_start":1029,"line_end":1029,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":557048,"byte_end":557117,"line_start":1030,"line_end":1030,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":557122,"byte_end":557160,"line_start":1031,"line_end":1031,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3123},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559063,"byte_end":559072,"line_start":1075,"line_end":1075,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn sub_image<'_>(&'_ mut Self, u32, u32, u32, u32) -> SubImage<&mut Self>\nwhere Self: Sized","parent":{"krate":0,"index":3114},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":558830,"byte_end":558892,"line_start":1072,"line_end":1072,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":558897,"byte_end":558974,"line_start":1073,"line_end":1073,"column_start":5,"column_end":82}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":558979,"byte_end":559055,"line_start":1074,"line_end":1074,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":4567},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560573,"byte_end":560581,"line_start":1107,"line_end":1107,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":4569}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559375,"byte_end":559404,"line_start":1085,"line_end":1085,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559405,"byte_end":559408,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559409,"byte_end":559459,"line_start":1087,"line_end":1087,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559460,"byte_end":559521,"line_start":1088,"line_end":1088,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559522,"byte_end":559585,"line_start":1089,"line_end":1089,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559586,"byte_end":559647,"line_start":1090,"line_end":1090,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559648,"byte_end":559651,"line_start":1091,"line_end":1091,"column_start":1,"column_end":4}},{"value":"/ Note that this does _not_ implement `GenericImage`, but it dereferences to one which allows you","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559652,"byte_end":559751,"line_start":1092,"line_end":1092,"column_start":1,"column_end":100}},{"value":"/ to use it as if it did. See [Design Considerations](#Design-Considerations) below for details.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559752,"byte_end":559850,"line_start":1093,"line_end":1093,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559851,"byte_end":559854,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ # Design Considerations","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559855,"byte_end":559882,"line_start":1095,"line_end":1095,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559883,"byte_end":559886,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ For reasons relating to coherence, this is not itself a `GenericImage` or a `GenericImageView`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559887,"byte_end":559986,"line_start":1097,"line_end":1097,"column_start":1,"column_end":100}},{"value":"/ In short, we want to reserve the ability of adding traits implemented for _all_ generic images","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":559987,"byte_end":560085,"line_start":1098,"line_end":1098,"column_start":1,"column_end":99}},{"value":"/ but in a different manner for `SubImage`. This may be required to ensure that stacking","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560086,"byte_end":560176,"line_start":1099,"line_end":1099,"column_start":1,"column_end":91}},{"value":"/ sub-images comes at no double indirect cost.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560177,"byte_end":560225,"line_start":1100,"line_end":1100,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560226,"byte_end":560229,"line_start":1101,"line_end":1101,"column_start":1,"column_end":4}},{"value":"/ If, ultimately, this is not needed then a directly implementation of `GenericImage` can and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560230,"byte_end":560325,"line_start":1102,"line_end":1102,"column_start":1,"column_end":96}},{"value":"/ will get added. This inconvenience may alternatively get resolved if Rust allows some forms of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560326,"byte_end":560424,"line_start":1103,"line_end":1103,"column_start":1,"column_end":99}},{"value":"/ specialization, which might make this trick unnecessary and thus also allows for a direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560425,"byte_end":560518,"line_start":1104,"line_end":1104,"column_start":1,"column_end":94}},{"value":"/ implementation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560519,"byte_end":560538,"line_start":1105,"line_end":1105,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4575},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560865,"byte_end":560878,"line_start":1116,"line_end":1116,"column_start":12,"column_end":25},"name":"SubImageInner","qualname":"::image::SubImageInner","value":"SubImageInner {  }","parent":null,"children":[{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4581}],"decl_id":null,"docs":" The inner type of `SubImage` that implements `GenericImage{,View}`.","sig":null,"attributes":[{"value":"/ The inner type of `SubImage` that implements `GenericImage{,View}`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560619,"byte_end":560690,"line_start":1111,"line_end":1111,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560691,"byte_end":560694,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ This type is _nominally_ `pub` but it is not exported from the crate. It should be regarded as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560695,"byte_end":560793,"line_start":1113,"line_end":1113,"column_start":1,"column_end":99}},{"value":"/ an existential type in any case.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":560794,"byte_end":560830,"line_start":1114,"line_end":1114,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3130},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561347,"byte_end":561350,"line_start":1133,"line_end":1133,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561226,"byte_end":561254,"line_start":1131,"line_end":1131,"column_start":5,"column_end":33}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561259,"byte_end":561335,"line_start":1132,"line_end":1132,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3131},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561709,"byte_end":561722,"line_start":1146,"line_end":1146,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn change_bounds<'_>(&'_ mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561653,"byte_end":561697,"line_start":1145,"line_end":1145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561980,"byte_end":561988,"line_start":1154,"line_end":1154,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn to_image<'_>(&'_ Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImageView + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561925,"byte_end":561968,"line_start":1153,"line_end":1153,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3135},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563433,"byte_end":563437,"line_start":1197,"line_end":1197,"column_start":12,"column_end":16},"name":"view","qualname":"<SubImage<I>>::view","value":"fn view<'_>(&'_ Self, u32, u32, u32, u32) -> SubImage<&I::Target>","parent":null,"children":[],"decl_id":null,"docs":" Create a sub-view of the image.","sig":null,"attributes":[{"value":"/ Create a sub-view of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562636,"byte_end":562671,"line_start":1179,"line_end":1179,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562676,"byte_end":562679,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ The coordinates given are relative to the current view on the underlying image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562684,"byte_end":562767,"line_start":1181,"line_end":1181,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562772,"byte_end":562775,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ Note that this method is preferred to the one from `GenericImageView`. This is accessible","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562780,"byte_end":562873,"line_start":1183,"line_end":1183,"column_start":5,"column_end":98}},{"value":"/ with the explicit method call syntax but it should rarely be needed due to causing an","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562878,"byte_end":562967,"line_start":1184,"line_end":1184,"column_start":5,"column_end":94}},{"value":"/ extra level of indirection.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562972,"byte_end":563003,"line_start":1185,"line_end":1185,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563008,"byte_end":563011,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563016,"byte_end":563023,"line_start":1187,"line_end":1187,"column_start":5,"column_end":12}},{"value":"/ use image::{GenericImageView, RgbImage, SubImage};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563028,"byte_end":563082,"line_start":1188,"line_end":1188,"column_start":5,"column_end":59}},{"value":"/ let buffer = RgbImage::new(10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563087,"byte_end":563126,"line_start":1189,"line_end":1189,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563131,"byte_end":563134,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ let subimage: SubImage<&RgbImage> = buffer.view(0, 0, 10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563139,"byte_end":563205,"line_start":1191,"line_end":1191,"column_start":5,"column_end":71}},{"value":"/ let subview: SubImage<&RgbImage> = subimage.view(0, 0, 10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563210,"byte_end":563277,"line_start":1192,"line_end":1192,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563282,"byte_end":563285,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ // Less efficient and NOT &RgbImage","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563290,"byte_end":563329,"line_start":1194,"line_end":1194,"column_start":5,"column_end":44}},{"value":"/ let _: SubImage<&_> = GenericImageView::view(&*subimage, 0, 0, 10, 10);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563334,"byte_end":563409,"line_start":1195,"line_end":1195,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563414,"byte_end":563421,"line_start":1196,"line_end":1196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563908,"byte_end":563913,"line_start":1207,"line_end":1207,"column_start":12,"column_end":17},"name":"inner","qualname":"<SubImage<I>>::inner","value":"fn inner<'_>(&'_ Self) -> &I::Target","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563852,"byte_end":563896,"line_start":1206,"line_end":1206,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564201,"byte_end":564210,"line_start":1220,"line_end":1220,"column_start":12,"column_end":21},"name":"sub_image","qualname":"<SubImage<I>>::sub_image","value":"fn sub_image<'_>(&'_ mut Self, u32, u32, u32, u32) -> SubImage<&mut I::Target>","parent":null,"children":[],"decl_id":null,"docs":" Create a mutable sub-view of the image.","sig":null,"attributes":[{"value":"/ Create a mutable sub-view of the image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564050,"byte_end":564093,"line_start":1217,"line_end":1217,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564098,"byte_end":564101,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ The coordinates given are relative to the current view on the underlying image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564106,"byte_end":564189,"line_start":1219,"line_end":1219,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3143},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564706,"byte_end":564715,"line_start":1235,"line_end":1235,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<SubImage<I>>::inner_mut","value":"fn inner_mut<'_>(&'_ mut Self) -> &mut I::Target","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying image.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564642,"byte_end":564694,"line_start":1234,"line_end":1234,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3147},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564881,"byte_end":564886,"line_start":1245,"line_end":1245,"column_start":8,"column_end":13},"name":"deref","qualname":"<SubImage<I> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &Self::Target","parent":{"krate":2,"index":3468},"children":[],"decl_id":{"krate":2,"index":3470},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3150},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565007,"byte_end":565016,"line_start":1254,"line_end":1254,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<SubImage<I> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &mut Self::Target","parent":{"krate":2,"index":3481},"children":[],"decl_id":{"krate":2,"index":3482},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3154},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565246,"byte_end":565256,"line_start":1267,"line_end":1267,"column_start":8,"column_end":18},"name":"dimensions","qualname":"<SubImageInner<I> as image::GenericImageView>::dimensions","value":"fn dimensions<'_>(&'_ Self) -> (u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3105},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3155},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565331,"byte_end":565337,"line_start":1271,"line_end":1271,"column_start":8,"column_end":14},"name":"bounds","qualname":"<SubImageInner<I> as image::GenericImageView>::bounds","value":"fn bounds<'_>(&'_ Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3156},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565450,"byte_end":565459,"line_start":1275,"line_end":1275,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"<SubImageInner<I> as image::GenericImageView>::get_pixel","value":"fn get_pixel<'_>(&'_ Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3103},"children":[],"decl_id":{"krate":0,"index":3110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565706,"byte_end":565719,"line_start":1286,"line_end":1286,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"<SubImageInner<I> as image::GenericImage>::get_pixel_mut","value":"fn get_pixel_mut<'_>(&'_ mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3115},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565852,"byte_end":565861,"line_start":1290,"line_end":1290,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"<SubImageInner<I> as image::GenericImage>::put_pixel","value":"fn put_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":566093,"byte_end":566104,"line_start":1296,"line_end":1296,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"<SubImageInner<I> as image::GenericImage>::blend_pixel","value":"fn blend_pixel<'_>(&'_ mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3114},"children":[],"decl_id":{"krate":0,"index":3118},"docs":" DEPRECATED: This method will be removed. Blend the pixel directly instead.\n","sig":null,"attributes":[{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":566007,"byte_end":566085,"line_start":1295,"line_end":1295,"column_start":5,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":3192},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583066,"byte_end":583081,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":3193}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":582953,"byte_end":583031,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583032,"byte_end":583055,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3193},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583152,"byte_end":583160,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"fn as_bytes<'_>(&'_ Self) -> &[u8]","parent":{"krate":0,"index":3192},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583112,"byte_end":583144,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3195},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583220,"byte_end":583228,"line_start":18,"line_end":18,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"<[u8] as traits::EncodableLayout>::as_bytes","value":"fn as_bytes<'_>(&'_ Self) -> &[u8]","parent":{"krate":0,"index":3192},"children":[],"decl_id":{"krate":0,"index":3193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3197},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583331,"byte_end":583339,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"<[u16] as traits::EncodableLayout>::as_bytes","value":"fn as_bytes<'_>(&'_ Self) -> &[u8]","parent":{"krate":0,"index":3192},"children":[],"decl_id":{"krate":0,"index":3193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3199},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583442,"byte_end":583450,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"<[f32] as traits::EncodableLayout>::as_bytes","value":"fn as_bytes<'_>(&'_ Self) -> &[u8]","parent":{"krate":0,"index":3192},"children":[],"decl_id":{"krate":0,"index":3193},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3200},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583682,"byte_end":583691,"line_start":37,"line_end":37,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[{"krate":0,"index":3201},{"krate":0,"index":3202}],"decl_id":null,"docs":" The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.\n","sig":null,"attributes":[{"value":"/ The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583513,"byte_end":583598,"line_start":35,"line_end":35,"column_start":1,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":3201},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583949,"byte_end":583966,"line_start":40,"line_end":40,"column_start":11,"column_end":28},"name":"DEFAULT_MAX_VALUE","qualname":"::traits::Primitive::DEFAULT_MAX_VALUE","value":"Self","parent":{"krate":0,"index":3200},"children":[],"decl_id":null,"docs":" The maximum value for this type of primitive within the context of color.\n For floats, the maximum is `1.0`, whereas the integer types inherit their usual maximum values.\n","sig":null,"attributes":[{"value":"/ The maximum value for this type of primitive within the context of color.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583757,"byte_end":583834,"line_start":38,"line_end":38,"column_start":5,"column_end":82}},{"value":"/ For floats, the maximum is `1.0`, whereas the integer types inherit their usual maximum values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583839,"byte_end":583938,"line_start":39,"line_end":39,"column_start":5,"column_end":104}}]},{"kind":"Const","id":{"krate":0,"index":3202},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":584171,"byte_end":584188,"line_start":44,"line_end":44,"column_start":11,"column_end":28},"name":"DEFAULT_MIN_VALUE","qualname":"::traits::Primitive::DEFAULT_MIN_VALUE","value":"Self","parent":{"krate":0,"index":3200},"children":[],"decl_id":null,"docs":" The minimum value for this type of primitive within the context of color.\n For floats, the minimum is `0.0`, whereas the integer types inherit their usual minimum values.\n","sig":null,"attributes":[{"value":"/ The minimum value for this type of primitive within the context of color.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583979,"byte_end":584056,"line_start":42,"line_end":42,"column_start":5,"column_end":82}},{"value":"/ For floats, the minimum is `0.0`, whereas the integer types inherit their usual minimum values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":584061,"byte_end":584160,"line_start":43,"line_end":43,"column_start":5,"column_end":104}}]},{"kind":"Trait","id":{"krate":0,"index":3204},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585102,"byte_end":585113,"line_start":72,"line_end":72,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3205},{"krate":0,"index":3206},{"krate":0,"index":3207}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":584959,"byte_end":585020,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585021,"byte_end":585091,"line_start":71,"line_end":71,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3205},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585152,"byte_end":585158,"line_start":73,"line_end":73,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Copy + NumCast + Num + PartialOrd<Self::Larger> + Clone + Bounded + AddAssign;","parent":{"krate":0,"index":3204},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3206},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585247,"byte_end":585257,"line_start":75,"line_end":75,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":3204},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3207},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585525,"byte_end":585534,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"to_larger","qualname":"::traits::Enlargeable::to_larger","value":"fn to_larger(Self) -> Self::Larger","parent":{"krate":0,"index":3204},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3232},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586437,"byte_end":586441,"line_start":130,"line_end":130,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3234}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586366,"byte_end":586426,"line_start":129,"line_end":129,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3233},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586472,"byte_end":586477,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586498,"byte_end":586502,"line_start":133,"line_end":133,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":3232},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587153,"byte_end":587157,"line_start":164,"line_end":164,"column_start":8,"column_end":12},"name":"lerp","qualname":"<f32 as traits::Lerp>::lerp","value":"fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":3232},"children":[],"decl_id":{"krate":0,"index":3234},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3244},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587373,"byte_end":587391,"line_start":171,"line_end":171,"column_start":11,"column_end":29},"name":"PixelWithColorType","qualname":"::traits::PixelWithColorType","value":"PixelWithColorType: Pixel + self::private::SealedPixelWithColorType","parent":null,"children":[{"krate":0,"index":3245}],"decl_id":null,"docs":" The pixel with an associated `ColorType`.\n Not all possible pixels represent one of the predefined `ColorType`s.\n","sig":null,"attributes":[{"value":"/ The pixel with an associated `ColorType`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587243,"byte_end":587288,"line_start":169,"line_end":169,"column_start":1,"column_end":46}},{"value":"/ Not all possible pixels represent one of the predefined `ColorType`s.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587289,"byte_end":587362,"line_start":170,"line_end":170,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":3245},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587677,"byte_end":587687,"line_start":176,"line_end":176,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::PixelWithColorType::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3244},"children":[],"decl_id":null,"docs":" This pixel has the format of one of the predefined `ColorType`s,\n such as `Rgb8`, `La16` or `Rgba32F`.\n This is needed for automatically detecting\n a color format when saving an image as a file.\n","sig":null,"attributes":[{"value":"/ This pixel has the format of one of the predefined `ColorType`s,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587447,"byte_end":587515,"line_start":172,"line_end":172,"column_start":5,"column_end":73}},{"value":"/ such as `Rgb8`, `La16` or `Rgba32F`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587520,"byte_end":587560,"line_start":173,"line_end":173,"column_start":5,"column_end":45}},{"value":"/ This is needed for automatically detecting","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587565,"byte_end":587611,"line_start":174,"line_end":174,"column_start":5,"column_end":51}},{"value":"/ a color format when saving an image as a file.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587616,"byte_end":587666,"line_start":175,"line_end":175,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":3247},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587751,"byte_end":587761,"line_start":180,"line_end":180,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgb<u8> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3249},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587843,"byte_end":587853,"line_start":183,"line_end":183,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgb<u16> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3251},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587936,"byte_end":587946,"line_start":186,"line_end":186,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgb<f32> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3253},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588031,"byte_end":588041,"line_start":190,"line_end":190,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgba<u8> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3252},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3255},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588125,"byte_end":588135,"line_start":193,"line_end":193,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgba<u16> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3257},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588220,"byte_end":588230,"line_start":196,"line_end":196,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Rgba<f32> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3259},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588316,"byte_end":588326,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Luma<u8> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3261},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588407,"byte_end":588417,"line_start":203,"line_end":203,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::Luma<u16> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3260},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3263},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588499,"byte_end":588509,"line_start":206,"line_end":206,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::LumaA<u8> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3265},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588592,"byte_end":588602,"line_start":209,"line_end":209,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::<color::LumaA<u16> as traits::PixelWithColorType>::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3264},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3268},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588761,"byte_end":588785,"line_start":216,"line_end":216,"column_start":15,"column_end":39},"name":"SealedPixelWithColorType","qualname":"::traits::private::SealedPixelWithColorType","value":"SealedPixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3279},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589425,"byte_end":589430,"line_start":235,"line_end":235,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":3280},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3283},{"krate":0,"index":3284},{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3288},{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3297},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":3306},{"krate":0,"index":3309},{"krate":0,"index":3311},{"krate":0,"index":3313},{"krate":0,"index":3314}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589300,"byte_end":589324,"line_start":232,"line_end":232,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589325,"byte_end":589328,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589329,"byte_end":589414,"line_start":234,"line_end":234,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":3280},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589530,"byte_end":589538,"line_start":237,"line_end":237,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" The scalar type that is used to store each channel in this pixel.\n","sig":null,"attributes":[{"value":"/ The scalar type that is used to store each channel in this pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589451,"byte_end":589520,"line_start":236,"line_end":236,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":3281},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589613,"byte_end":589626,"line_start":240,"line_end":240,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589556,"byte_end":589602,"line_start":239,"line_end":239,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3282},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589683,"byte_end":589691,"line_start":243,"line_end":243,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"fn channels<'_>(&'_ Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589637,"byte_end":589675,"line_start":242,"line_end":242,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3283},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589779,"byte_end":589791,"line_start":246,"line_end":246,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"fn channels_mut<'_>(&'_ mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589726,"byte_end":589771,"line_start":245,"line_end":245,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3284},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589957,"byte_end":589968,"line_start":250,"line_end":250,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589834,"byte_end":589898,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589903,"byte_end":589946,"line_start":249,"line_end":249,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3285},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590225,"byte_end":590234,"line_start":255,"line_end":255,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"fn channels4<'_>(&'_ Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value\n","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589989,"byte_end":590054,"line_start":252,"line_end":252,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590059,"byte_end":590134,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"deprecated(since = \"0.24.0\", note = \"Use `channels()` or `channels_mut()`\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590139,"byte_end":590217,"line_start":254,"line_end":254,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3286},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590661,"byte_end":590674,"line_start":270,"line_end":270,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\nSelf::Subpixel) -> Self","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.\n","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590370,"byte_end":590426,"line_start":264,"line_end":264,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590431,"byte_end":590498,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"deprecated(since = \"0.24.0\", note =\n\"Use the constructor of the pixel, for example `Rgba([r,g,b,a])` or `Pixel::from_slice`\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590503,"byte_end":590653,"line_start":266,"line_end":269,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3287},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591028,"byte_end":591038,"line_start":281,"line_end":281,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"fn from_slice<'_>(&'_ [Self::Subpixel]) -> &Self","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590804,"byte_end":590836,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590841,"byte_end":590844,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590849,"byte_end":590933,"line_start":279,"line_end":279,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":590938,"byte_end":591020,"line_start":280,"line_end":280,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3288},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591318,"byte_end":591332,"line_start":287,"line_end":287,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"fn from_slice_mut<'_>(&'_ mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591080,"byte_end":591126,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591131,"byte_end":591134,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591139,"byte_end":591223,"line_start":285,"line_end":285,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591228,"byte_end":591310,"line_start":286,"line_end":286,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3289},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591419,"byte_end":591425,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"fn to_rgb<'_>(&'_ Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591382,"byte_end":591411,"line_start":289,"line_end":289,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3290},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591521,"byte_end":591528,"line_start":293,"line_end":293,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"fn to_rgba<'_>(&'_ Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591462,"byte_end":591513,"line_start":292,"line_end":292,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3291},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591604,"byte_end":591611,"line_start":296,"line_end":296,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"fn to_luma<'_>(&'_ Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591566,"byte_end":591596,"line_start":295,"line_end":295,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3292},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591709,"byte_end":591722,"line_start":299,"line_end":299,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"fn to_luma_alpha<'_>(&'_ Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591649,"byte_end":591701,"line_start":298,"line_end":298,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3293},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591830,"byte_end":591833,"line_start":302,"line_end":302,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"fn map<F, '_>(&'_ Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591761,"byte_end":591822,"line_start":301,"line_end":301,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3295},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591994,"byte_end":591999,"line_start":307,"line_end":307,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"fn apply<F, '_>(&'_ mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":591925,"byte_end":591986,"line_start":306,"line_end":306,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3297},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592224,"byte_end":592238,"line_start":313,"line_end":313,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"fn map_with_alpha<F, G, '_>(&'_ Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592087,"byte_end":592159,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592164,"byte_end":592216,"line_start":312,"line_end":312,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3300},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592544,"byte_end":592560,"line_start":320,"line_end":320,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"fn apply_with_alpha<F, G, '_>(&'_ mut Self, F, G) where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592391,"byte_end":592463,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592468,"byte_end":592536,"line_start":319,"line_end":319,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3303},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592789,"byte_end":592806,"line_start":326,"line_end":326,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"fn map_without_alpha<F, '_>(&'_ Self, F) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592709,"byte_end":592781,"line_start":325,"line_end":325,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3306},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593098,"byte_end":593117,"line_start":337,"line_end":337,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"fn apply_without_alpha<F, '_>(&'_ mut Self, F) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":592994,"byte_end":593066,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593071,"byte_end":593090,"line_start":336,"line_end":336,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3309},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593360,"byte_end":593364,"line_start":346,"line_end":346,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"fn map2<F, '_, '_>(&'_ Self, &'_ Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593258,"byte_end":593322,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593327,"byte_end":593352,"line_start":345,"line_end":345,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3311},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593604,"byte_end":593610,"line_start":352,"line_end":352,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"fn apply2<F, '_, '_>(&'_ mut Self, &'_ Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593486,"byte_end":593550,"line_start":350,"line_end":350,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593555,"byte_end":593596,"line_start":351,"line_end":351,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3313},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593757,"byte_end":593763,"line_start":357,"line_end":357,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"fn invert<'_>(&'_ mut Self)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593728,"byte_end":593749,"line_start":356,"line_end":356,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3314},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593874,"byte_end":593879,"line_start":360,"line_end":360,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"fn blend<'_, '_>(&'_ mut Self, &'_ Self)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593781,"byte_end":593866,"line_start":359,"line_end":359,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":3316},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":593988,"byte_end":594003,"line_start":365,"line_end":365,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16390,"byte_end":16406,"line_start":192,"line_end":192,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17071,"byte_end":17084,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17837,"byte_end":17850,"line_start":237,"line_end":237,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18604,"byte_end":18618,"line_start":262,"line_end":262,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18997,"byte_end":19007,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19343,"byte_end":19353,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19469,"byte_end":19484,"line_start":295,"line_end":295,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19613,"byte_end":19628,"line_start":301,"line_end":301,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19878,"byte_end":19894,"line_start":310,"line_end":310,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20197,"byte_end":20207,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20668,"byte_end":20678,"line_start":335,"line_end":335,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":21131,"byte_end":21147,"line_start":348,"line_end":348,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":22520,"byte_end":22536,"line_start":383,"line_end":383,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":22563,"byte_end":22577,"line_start":385,"line_end":385,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23450,"byte_end":23464,"line_start":411,"line_end":411,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23669,"byte_end":23682,"line_start":420,"line_end":420,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24065,"byte_end":24078,"line_start":433,"line_end":433,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24283,"byte_end":24296,"line_start":442,"line_end":442,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24774,"byte_end":24787,"line_start":456,"line_end":456,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24992,"byte_end":25002,"line_start":465,"line_end":465,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25506,"byte_end":25516,"line_start":478,"line_end":478,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25543,"byte_end":25558,"line_start":480,"line_end":480,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72605,"byte_end":72612,"line_start":403,"line_end":403,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73379,"byte_end":73387,"line_start":438,"line_end":438,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83707,"byte_end":83719,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92144,"byte_end":92156,"line_start":388,"line_end":388,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":121447,"byte_end":121458,"line_start":94,"line_end":94,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":122566,"byte_end":122576,"line_start":127,"line_end":127,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131368,"byte_end":131374,"line_start":70,"line_end":70,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133438,"byte_end":133444,"line_start":135,"line_end":135,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134268,"byte_end":134274,"line_start":160,"line_end":160,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112320,"byte_end":112332,"line_start":19,"line_end":19,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114381,"byte_end":114387,"line_start":62,"line_end":62,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114612,"byte_end":114618,"line_start":73,"line_end":73,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142160,"byte_end":142172,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154850,"byte_end":154853,"line_start":446,"line_end":446,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155113,"byte_end":155124,"line_start":461,"line_end":461,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172582,"byte_end":172593,"line_start":913,"line_end":913,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178569,"byte_end":178573,"line_start":1070,"line_end":1070,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184177,"byte_end":184184,"line_start":1206,"line_end":1206,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188615,"byte_end":188626,"line_start":1325,"line_end":1325,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189250,"byte_end":189261,"line_start":1346,"line_end":1346,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189879,"byte_end":189883,"line_start":1365,"line_end":1365,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191041,"byte_end":191048,"line_start":1408,"line_end":1408,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192225,"byte_end":192232,"line_start":1451,"line_end":1451,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193085,"byte_end":193095,"line_start":1477,"line_end":1477,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193247,"byte_end":193270,"line_start":1481,"line_end":1481,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193478,"byte_end":193501,"line_start":1486,"line_end":1486,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":194177,"byte_end":194182,"line_start":1506,"line_end":1506,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195117,"byte_end":195122,"line_start":1530,"line_end":1530,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195147,"byte_end":195157,"line_start":1532,"line_end":1532,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":204409,"byte_end":204420,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":206344,"byte_end":206356,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":208525,"byte_end":208535,"line_start":208,"line_end":208,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":208691,"byte_end":208703,"line_start":214,"line_end":214,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":209050,"byte_end":209067,"line_start":229,"line_end":229,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":216943,"byte_end":216951,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":218337,"byte_end":218346,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":219631,"byte_end":219646,"line_start":579,"line_end":579,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":221502,"byte_end":221512,"line_start":631,"line_end":631,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255302,"byte_end":255311,"line_start":1484,"line_end":1484,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1409},{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255731,"byte_end":255741,"line_start":1498,"line_end":1498,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":256517,"byte_end":256527,"line_start":1528,"line_end":1528,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261128,"byte_end":261138,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":269380,"byte_end":269390,"line_start":242,"line_end":242,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274647,"byte_end":274658,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276441,"byte_end":276451,"line_start":68,"line_end":68,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276864,"byte_end":276875,"line_start":82,"line_end":82,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":278656,"byte_end":278665,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":278958,"byte_end":278968,"line_start":157,"line_end":157,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":318141,"byte_end":318150,"line_start":184,"line_end":184,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1715},{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321625,"byte_end":321637,"line_start":316,"line_end":316,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321975,"byte_end":321987,"line_start":328,"line_end":328,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322617,"byte_end":322628,"line_start":353,"line_end":353,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1748},{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":333207,"byte_end":333218,"line_start":656,"line_end":656,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355758,"byte_end":355767,"line_start":40,"line_end":40,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1947}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":356559,"byte_end":356568,"line_start":66,"line_end":66,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1950},{"krate":0,"index":1951}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357961,"byte_end":357971,"line_start":117,"line_end":117,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362771,"byte_end":362781,"line_start":219,"line_end":219,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364842,"byte_end":364853,"line_start":283,"line_end":283,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1995}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":370524,"byte_end":370535,"line_start":430,"line_end":430,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1999}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":370673,"byte_end":370686,"line_start":434,"line_end":434,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2006},{"krate":0,"index":2007}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373297,"byte_end":373307,"line_start":515,"line_end":515,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377636,"byte_end":377646,"line_start":614,"line_end":614,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2023}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":379393,"byte_end":379403,"line_start":657,"line_end":657,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2037}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380343,"byte_end":380358,"line_start":680,"line_end":680,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380444,"byte_end":380454,"line_start":686,"line_end":686,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380544,"byte_end":380564,"line_start":692,"line_end":692,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380870,"byte_end":380890,"line_start":704,"line_end":704,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382838,"byte_end":382844,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2067},{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383434,"byte_end":383440,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2071},{"krate":0,"index":2072}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383959,"byte_end":383964,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385039,"byte_end":385044,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":391233,"byte_end":391241,"line_start":270,"line_end":270,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394771,"byte_end":394777,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395157,"byte_end":395163,"line_start":44,"line_end":44,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2214}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395312,"byte_end":395318,"line_start":53,"line_end":53,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395527,"byte_end":395533,"line_start":63,"line_end":63,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395680,"byte_end":395686,"line_start":71,"line_end":71,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396088,"byte_end":396097,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2236}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396489,"byte_end":396498,"line_start":108,"line_end":108,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396647,"byte_end":396656,"line_start":117,"line_end":117,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2244}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396904,"byte_end":396913,"line_start":129,"line_end":129,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2248}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397466,"byte_end":397470,"line_start":152,"line_end":152,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398388,"byte_end":398392,"line_start":174,"line_end":174,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398938,"byte_end":398942,"line_start":196,"line_end":196,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2266}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399091,"byte_end":399095,"line_start":205,"line_end":205,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399462,"byte_end":399466,"line_start":219,"line_end":219,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399611,"byte_end":399615,"line_start":227,"line_end":227,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2276}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":400189,"byte_end":400196,"line_start":250,"line_end":250,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2284}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401136,"byte_end":401143,"line_start":272,"line_end":272,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401702,"byte_end":401709,"line_start":294,"line_end":294,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401858,"byte_end":401865,"line_start":303,"line_end":303,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2298}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402247,"byte_end":402254,"line_start":317,"line_end":317,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2301}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402697,"byte_end":402712,"line_start":339,"line_end":339,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403251,"byte_end":403266,"line_start":363,"line_end":363,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403392,"byte_end":403407,"line_start":372,"line_end":372,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403583,"byte_end":403598,"line_start":381,"line_end":381,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404136,"byte_end":404149,"line_start":405,"line_end":405,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404823,"byte_end":404836,"line_start":435,"line_end":435,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404960,"byte_end":404973,"line_start":444,"line_end":444,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2345}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405143,"byte_end":405156,"line_start":453,"line_end":453,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405681,"byte_end":405699,"line_start":477,"line_end":477,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406246,"byte_end":406264,"line_start":501,"line_end":501,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406395,"byte_end":406413,"line_start":510,"line_end":510,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406960,"byte_end":406976,"line_start":534,"line_end":534,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407659,"byte_end":407675,"line_start":564,"line_end":564,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2386}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407804,"byte_end":407820,"line_start":573,"line_end":573,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2389}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410691,"byte_end":410702,"line_start":663,"line_end":663,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":418484,"byte_end":418495,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2429}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421829,"byte_end":421840,"line_start":982,"line_end":982,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422436,"byte_end":422447,"line_start":1006,"line_end":1006,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2438}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423229,"byte_end":423240,"line_start":1034,"line_end":1034,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424188,"byte_end":424199,"line_start":1065,"line_end":1065,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2449}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424468,"byte_end":424479,"line_start":1080,"line_end":1080,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424707,"byte_end":424718,"line_start":1092,"line_end":1092,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424948,"byte_end":424959,"line_start":1102,"line_end":1102,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2462},{"krate":0,"index":2463}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425194,"byte_end":425205,"line_start":1114,"line_end":1114,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425430,"byte_end":425441,"line_start":1124,"line_end":1124,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2471}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425800,"byte_end":425811,"line_start":1139,"line_end":1139,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426500,"byte_end":426511,"line_start":1166,"line_end":1166,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429174,"byte_end":429185,"line_start":1238,"line_end":1238,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2495}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431587,"byte_end":431596,"line_start":1313,"line_end":1313,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":432974,"byte_end":432985,"line_start":1351,"line_end":1351,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2508}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446826,"byte_end":446835,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450487,"byte_end":450504,"line_start":151,"line_end":151,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2556}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":451825,"byte_end":451842,"line_start":187,"line_end":187,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2558}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457362,"byte_end":457363,"line_start":378,"line_end":378,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2565}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459605,"byte_end":459606,"line_start":454,"line_end":454,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460629,"byte_end":460633,"line_start":481,"line_end":481,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2598}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460907,"byte_end":460911,"line_start":492,"line_end":492,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2602}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461147,"byte_end":461151,"line_start":501,"line_end":501,"column_start":70,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461445,"byte_end":461449,"line_start":512,"line_end":512,"column_start":71,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2610}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461776,"byte_end":461781,"line_start":526,"line_end":526,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2614}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462114,"byte_end":462119,"line_start":538,"line_end":538,"column_start":70,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2618}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462459,"byte_end":462464,"line_start":550,"line_end":550,"column_start":71,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462799,"byte_end":462804,"line_start":562,"line_end":562,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463123,"byte_end":463127,"line_start":575,"line_end":575,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463521,"byte_end":463525,"line_start":589,"line_end":589,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463910,"byte_end":463914,"line_start":603,"line_end":603,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464308,"byte_end":464312,"line_start":617,"line_end":617,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464715,"byte_end":464718,"line_start":633,"line_end":633,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465066,"byte_end":465069,"line_start":646,"line_end":646,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465415,"byte_end":465418,"line_start":659,"line_end":659,"column_start":58,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465757,"byte_end":465760,"line_start":672,"line_end":672,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2658}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":466208,"byte_end":466213,"line_start":691,"line_end":691,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2663}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":467224,"byte_end":467228,"line_start":724,"line_end":724,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":467338,"byte_end":467342,"line_start":730,"line_end":730,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":469725,"byte_end":469728,"line_start":794,"line_end":794,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2672}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":469946,"byte_end":469951,"line_start":806,"line_end":806,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2677}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470130,"byte_end":470134,"line_start":815,"line_end":815,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470328,"byte_end":470332,"line_start":826,"line_end":826,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2683}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470550,"byte_end":470553,"line_start":836,"line_end":836,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479166,"byte_end":479178,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844},{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2850},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2908}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506571,"byte_end":506583,"line_start":877,"line_end":877,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2911}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506705,"byte_end":506717,"line_start":883,"line_end":883,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2913}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506839,"byte_end":506851,"line_start":889,"line_end":889,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2915}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506966,"byte_end":506978,"line_start":895,"line_end":895,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507097,"byte_end":507109,"line_start":901,"line_end":901,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2919}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507236,"byte_end":507248,"line_start":907,"line_end":907,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2921}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507375,"byte_end":507387,"line_start":913,"line_end":913,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2923}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507507,"byte_end":507519,"line_start":919,"line_end":919,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2925}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507641,"byte_end":507653,"line_start":925,"line_end":925,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2927}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507776,"byte_end":507788,"line_start":931,"line_end":931,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2929}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507933,"byte_end":507945,"line_start":937,"line_end":937,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508120,"byte_end":508132,"line_start":943,"line_end":943,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2933}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508307,"byte_end":508319,"line_start":950,"line_end":950,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508817,"byte_end":508829,"line_start":967,"line_end":967,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":511242,"byte_end":511254,"line_start":1012,"line_end":1012,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2944}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523415,"byte_end":523426,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3036},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531541,"byte_end":531558,"line_start":315,"line_end":315,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3042}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":533260,"byte_end":533275,"line_start":361,"line_end":361,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3050},{"krate":0,"index":3051}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542509,"byte_end":542517,"line_start":606,"line_end":606,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3066},{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3069}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550452,"byte_end":550458,"line_start":824,"line_end":824,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3098},{"krate":0,"index":3099}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550926,"byte_end":550932,"line_start":846,"line_end":846,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3102}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561208,"byte_end":561216,"line_start":1130,"line_end":1130,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562565,"byte_end":562573,"line_start":1174,"line_end":1174,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3135},{"krate":0,"index":3139}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563980,"byte_end":563988,"line_start":1212,"line_end":1212,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3142},{"krate":0,"index":3143}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564804,"byte_end":564812,"line_start":1240,"line_end":1240,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3146},{"krate":0,"index":3147}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564963,"byte_end":564971,"line_start":1250,"line_end":1250,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3150}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565134,"byte_end":565147,"line_start":1260,"line_end":1260,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565620,"byte_end":565633,"line_start":1281,"line_end":1281,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587731,"byte_end":587734,"line_start":179,"line_end":179,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587822,"byte_end":587825,"line_start":182,"line_end":182,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3249}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587915,"byte_end":587918,"line_start":185,"line_end":185,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588010,"byte_end":588014,"line_start":189,"line_end":189,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3253}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588103,"byte_end":588107,"line_start":192,"line_end":192,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3255}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588198,"byte_end":588202,"line_start":195,"line_end":195,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588295,"byte_end":588299,"line_start":199,"line_end":199,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588385,"byte_end":588389,"line_start":202,"line_end":202,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3261}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588477,"byte_end":588482,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3263}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588569,"byte_end":588574,"line_start":208,"line_end":208,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3265}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588827,"byte_end":588830,"line_start":217,"line_end":217,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588876,"byte_end":588879,"line_start":218,"line_end":218,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588926,"byte_end":588929,"line_start":219,"line_end":219,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588977,"byte_end":588981,"line_start":221,"line_end":221,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589027,"byte_end":589031,"line_start":222,"line_end":222,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589078,"byte_end":589082,"line_start":223,"line_end":223,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589130,"byte_end":589134,"line_start":225,"line_end":225,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589180,"byte_end":589185,"line_start":226,"line_end":226,"column_start":39,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589232,"byte_end":589236,"line_start":228,"line_end":228,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589283,"byte_end":589288,"line_start":229,"line_end":229,"column_start":39,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5039,"byte_end":5044,"line_start":153,"line_end":153,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":144}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5381,"byte_end":5385,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":244}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5426,"byte_end":5434,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":257}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/mod.rs","byte_start":32303,"byte_end":32311,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":448}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5460,"byte_end":5462,"line_start":171,"line_end":171,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":714}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":5508,"byte_end":5512,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":929}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":7811,"byte_end":7814,"line_start":221,"line_end":221,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1145}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":8305,"byte_end":8309,"line_start":236,"line_end":236,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":1491}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/lib.rs","byte_start":8400,"byte_end":8403,"line_start":240,"line_end":240,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1822}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":16390,"byte_end":16406,"line_start":192,"line_end":192,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17071,"byte_end":17084,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":17837,"byte_end":17850,"line_start":237,"line_end":237,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18604,"byte_end":18618,"line_start":262,"line_end":262,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":18997,"byte_end":19007,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19343,"byte_end":19353,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3335},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19469,"byte_end":19484,"line_start":295,"line_end":295,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3444},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19613,"byte_end":19628,"line_start":301,"line_end":301,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3444},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":19878,"byte_end":19894,"line_start":310,"line_end":310,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3356},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20197,"byte_end":20207,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3335},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":20668,"byte_end":20678,"line_start":335,"line_end":335,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3335},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":21131,"byte_end":21147,"line_start":348,"line_end":348,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3356},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":22520,"byte_end":22536,"line_start":383,"line_end":383,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3356},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":22563,"byte_end":22577,"line_start":385,"line_end":385,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3387},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23450,"byte_end":23464,"line_start":411,"line_end":411,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3387},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":23669,"byte_end":23682,"line_start":420,"line_end":420,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3382},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24065,"byte_end":24078,"line_start":433,"line_end":433,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3382},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24283,"byte_end":24296,"line_start":442,"line_end":442,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3413},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24774,"byte_end":24787,"line_start":456,"line_end":456,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3413},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":24992,"byte_end":25002,"line_start":465,"line_end":465,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3418},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25506,"byte_end":25516,"line_start":478,"line_end":478,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":3418},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/error.rs","byte_start":25543,"byte_end":25558,"line_start":480,"line_end":480,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3444},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":72605,"byte_end":72612,"line_start":403,"line_end":403,"column_start":19,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3487},"to":{"krate":0,"index":531}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/colorops.rs","byte_start":73379,"byte_end":73387,"line_start":438,"line_end":438,"column_start":32,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":32,"index":26},"to":{"krate":0,"index":531}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":83707,"byte_end":83719,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":607},"to":{"krate":20,"index":311}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/imageops/sample.rs","byte_start":92144,"byte_end":92156,"line_start":388,"line_end":388,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":121447,"byte_end":121458,"line_start":94,"line_end":94,"column_start":29,"column_end":40},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":805},"to":{"krate":0,"index":795}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/free_functions.rs","byte_start":122566,"byte_end":122576,"line_start":127,"line_end":127,"column_start":29,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":816},"to":{"krate":0,"index":795}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":131368,"byte_end":131374,"line_start":70,"line_end":70,"column_start":15,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":133438,"byte_end":133444,"line_start":135,"line_end":135,"column_start":6,"column_end":12},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/reader.rs","byte_start":134268,"byte_end":134274,"line_start":160,"line_end":160,"column_start":25,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":112320,"byte_end":112332,"line_start":19,"line_end":19,"column_start":18,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3511},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114381,"byte_end":114387,"line_start":62,"line_end":62,"column_start":18,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3527},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/io/mod.rs","byte_start":114612,"byte_end":114618,"line_start":73,"line_end":73,"column_start":6,"column_end":12},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":3527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":142160,"byte_end":142172,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":3557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":154850,"byte_end":154853,"line_start":446,"line_end":446,"column_start":6,"column_end":9},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":3579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":155113,"byte_end":155124,"line_start":461,"line_end":461,"column_start":14,"column_end":25},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":3546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":172582,"byte_end":172593,"line_start":913,"line_end":913,"column_start":22,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":178569,"byte_end":178573,"line_start":1070,"line_end":1070,"column_start":24,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":184177,"byte_end":184184,"line_start":1206,"line_end":1206,"column_start":24,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":188615,"byte_end":188626,"line_start":1325,"line_end":1325,"column_start":40,"column_end":51},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3546},"to":{"krate":2,"index":3553}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189250,"byte_end":189261,"line_start":1346,"line_end":1346,"column_start":43,"column_end":54},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3546},"to":{"krate":2,"index":3557}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":189879,"byte_end":189883,"line_start":1365,"line_end":1365,"column_start":45,"column_end":49},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3599},"to":{"krate":0,"index":3103}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":191041,"byte_end":191048,"line_start":1408,"line_end":1408,"column_start":45,"column_end":52},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3612},"to":{"krate":0,"index":3103}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":192225,"byte_end":192232,"line_start":1451,"line_end":1451,"column_start":41,"column_end":48},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3612},"to":{"krate":0,"index":3114}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193085,"byte_end":193095,"line_start":1477,"line_end":1477,"column_start":22,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3335},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193247,"byte_end":193270,"line_start":1481,"line_end":1481,"column_start":31,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3674},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":193478,"byte_end":193501,"line_start":1486,"line_end":1486,"column_start":31,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3674},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":194177,"byte_end":194182,"line_start":1506,"line_end":1506,"column_start":23,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3625},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195117,"byte_end":195122,"line_start":1530,"line_end":1530,"column_start":23,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3625},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/flat.rs","byte_start":195147,"byte_end":195157,"line_start":1532,"line_end":1532,"column_start":21,"column_end":31},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3649},"to":{"krate":2,"index":2947}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":204409,"byte_end":204420,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1277},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":206344,"byte_end":206356,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3732},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":208525,"byte_end":208535,"line_start":208,"line_end":208,"column_start":29,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3335},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":208691,"byte_end":208703,"line_start":214,"line_end":214,"column_start":23,"column_end":35},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3732},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":209050,"byte_end":209067,"line_start":229,"line_end":229,"column_start":23,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3793},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":216943,"byte_end":216951,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":218337,"byte_end":218346,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":219631,"byte_end":219646,"line_start":579,"line_end":579,"column_start":32,"column_end":47},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1355},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":221502,"byte_end":221512,"line_start":631,"line_end":631,"column_start":22,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255302,"byte_end":255311,"line_start":1484,"line_end":1484,"column_start":18,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":4628}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":255731,"byte_end":255741,"line_start":1498,"line_end":1498,"column_start":52,"column_end":62},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1320},"to":{"krate":0,"index":3070}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/decoder.rs","byte_start":256517,"byte_end":256527,"line_start":1528,"line_end":1528,"column_start":56,"column_end":66},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1320},"to":{"krate":0,"index":3084}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":261128,"byte_end":261138,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/bmp/encoder.rs","byte_start":269380,"byte_end":269390,"line_start":242,"line_end":242,"column_start":37,"column_end":47},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1463},"to":{"krate":0,"index":3093}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":274647,"byte_end":274658,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276441,"byte_end":276451,"line_start":68,"line_end":68,"column_start":18,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1560},"to":{"krate":1,"index":4628}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":276864,"byte_end":276875,"line_start":82,"line_end":82,"column_start":45,"column_end":56},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1551},"to":{"krate":0,"index":3070}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":278656,"byte_end":278665,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/decoder.rs","byte_start":278958,"byte_end":278968,"line_start":157,"line_end":157,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":318141,"byte_end":318150,"line_start":184,"line_end":184,"column_start":16,"column_end":25},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1699},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321625,"byte_end":321637,"line_start":316,"line_end":316,"column_start":6,"column_end":18},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":321975,"byte_end":321987,"line_start":328,"line_end":328,"column_start":18,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3882},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":322617,"byte_end":322628,"line_start":353,"line_end":353,"column_start":16,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/jpeg/encoder.rs","byte_start":333207,"byte_end":333218,"line_start":656,"line_end":656,"column_start":33,"column_end":44},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1721},"to":{"krate":0,"index":3093}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":355758,"byte_end":355767,"line_start":40,"line_end":40,"column_start":15,"column_end":24},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":356559,"byte_end":356568,"line_start":66,"line_end":66,"column_start":24,"column_end":33},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":4628}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":357961,"byte_end":357971,"line_start":117,"line_end":117,"column_start":15,"column_end":25},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":362771,"byte_end":362781,"line_start":219,"line_end":219,"column_start":45,"column_end":55},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1952},"to":{"krate":0,"index":3070}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":364842,"byte_end":364853,"line_start":283,"line_end":283,"column_start":15,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":370524,"byte_end":370535,"line_start":430,"line_end":430,"column_start":49,"column_end":60},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1982},"to":{"krate":0,"index":3090}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":370673,"byte_end":370686,"line_start":434,"line_end":434,"column_start":36,"column_end":49},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2000},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":373297,"byte_end":373307,"line_start":515,"line_end":515,"column_start":16,"column_end":26},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":377636,"byte_end":377646,"line_start":614,"line_end":614,"column_start":33,"column_end":43},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2008},"to":{"krate":0,"index":3093}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":379393,"byte_end":379403,"line_start":657,"line_end":657,"column_start":6,"column_end":16},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380343,"byte_end":380358,"line_start":680,"line_end":680,"column_start":18,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3897},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380444,"byte_end":380454,"line_start":686,"line_end":686,"column_start":18,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3919},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380544,"byte_end":380564,"line_start":692,"line_end":692,"column_start":23,"column_end":43},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3943},"to":{"krate":2,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/codecs/png.rs","byte_start":380870,"byte_end":380890,"line_start":704,"line_end":704,"column_start":28,"column_end":48},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3943},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":382838,"byte_end":382844,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383434,"byte_end":383440,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2062},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":383959,"byte_end":383964,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":385039,"byte_end":385044,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/animation.rs","byte_start":391233,"byte_end":391241,"line_start":270,"line_end":270,"column_start":22,"column_end":30},"kind":{"Impl":{"id":93}},"from":{"krate":2,"index":50139},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":394771,"byte_end":394777,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395157,"byte_end":395163,"line_start":44,"line_end":44,"column_start":47,"column_end":53},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395312,"byte_end":395318,"line_start":53,"line_end":53,"column_start":49,"column_end":55},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":8420}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395527,"byte_end":395533,"line_start":63,"line_end":63,"column_start":26,"column_end":32},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":395680,"byte_end":395686,"line_start":71,"line_end":71,"column_start":31,"column_end":37},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2200},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396088,"byte_end":396097,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2226},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396489,"byte_end":396498,"line_start":108,"line_end":108,"column_start":47,"column_end":56},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2226},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396647,"byte_end":396656,"line_start":117,"line_end":117,"column_start":49,"column_end":58},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2226},"to":{"krate":2,"index":8420}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":396904,"byte_end":396913,"line_start":129,"line_end":129,"column_start":31,"column_end":40},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2226},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":397466,"byte_end":397470,"line_start":152,"line_end":152,"column_start":25,"column_end":29},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398388,"byte_end":398392,"line_start":174,"line_end":174,"column_start":38,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":398938,"byte_end":398942,"line_start":196,"line_end":196,"column_start":47,"column_end":51},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399091,"byte_end":399095,"line_start":205,"line_end":205,"column_start":49,"column_end":53},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":8420}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399462,"byte_end":399466,"line_start":219,"line_end":219,"column_start":26,"column_end":30},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":399611,"byte_end":399615,"line_start":227,"line_end":227,"column_start":31,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2249},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":400189,"byte_end":400196,"line_start":250,"line_end":250,"column_start":25,"column_end":32},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2277},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401136,"byte_end":401143,"line_start":272,"line_end":272,"column_start":38,"column_end":45},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2277},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401702,"byte_end":401709,"line_start":294,"line_end":294,"column_start":47,"column_end":54},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2277},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":401858,"byte_end":401865,"line_start":303,"line_end":303,"column_start":49,"column_end":56},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2277},"to":{"krate":2,"index":8420}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402247,"byte_end":402254,"line_start":317,"line_end":317,"column_start":31,"column_end":38},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2277},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":402697,"byte_end":402712,"line_start":339,"line_end":339,"column_start":38,"column_end":53},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2302},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403251,"byte_end":403266,"line_start":363,"line_end":363,"column_start":47,"column_end":62},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2302},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403392,"byte_end":403407,"line_start":372,"line_end":372,"column_start":26,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2302},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":403583,"byte_end":403598,"line_start":381,"line_end":381,"column_start":31,"column_end":46},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2302},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404136,"byte_end":404149,"line_start":405,"line_end":405,"column_start":38,"column_end":51},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404823,"byte_end":404836,"line_start":435,"line_end":435,"column_start":47,"column_end":60},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":404960,"byte_end":404973,"line_start":444,"line_end":444,"column_start":26,"column_end":39},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405143,"byte_end":405156,"line_start":453,"line_end":453,"column_start":31,"column_end":44},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":405681,"byte_end":405699,"line_start":477,"line_end":477,"column_start":38,"column_end":56},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2349},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406246,"byte_end":406264,"line_start":501,"line_end":501,"column_start":47,"column_end":65},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2349},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406395,"byte_end":406413,"line_start":510,"line_end":510,"column_start":31,"column_end":49},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2349},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":406960,"byte_end":406976,"line_start":534,"line_end":534,"column_start":38,"column_end":54},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2370},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407659,"byte_end":407675,"line_start":564,"line_end":564,"column_start":47,"column_end":63},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2370},"to":{"krate":2,"index":8445}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":407804,"byte_end":407820,"line_start":573,"line_end":573,"column_start":31,"column_end":47},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2370},"to":{"krate":2,"index":10266}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":410691,"byte_end":410702,"line_start":663,"line_end":663,"column_start":20,"column_end":31},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":418484,"byte_end":418495,"line_start":884,"line_end":884,"column_start":20,"column_end":31},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":421829,"byte_end":421840,"line_start":982,"line_end":982,"column_start":20,"column_end":31},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":422436,"byte_end":422447,"line_start":1006,"line_end":1006,"column_start":20,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":423229,"byte_end":423240,"line_start":1034,"line_end":1034,"column_start":20,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424188,"byte_end":424199,"line_start":1065,"line_end":1065,"column_start":32,"column_end":43},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424468,"byte_end":424479,"line_start":1080,"line_end":1080,"column_start":30,"column_end":41},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":3468}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424707,"byte_end":424718,"line_start":1092,"line_end":1092,"column_start":33,"column_end":44},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":3481}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":424948,"byte_end":424959,"line_start":1102,"line_end":1102,"column_start":42,"column_end":53},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":3553}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425194,"byte_end":425205,"line_start":1114,"line_end":1114,"column_start":45,"column_end":56},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":3557}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425430,"byte_end":425441,"line_start":1124,"line_end":1124,"column_start":30,"column_end":41},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3982},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":425800,"byte_end":425811,"line_start":1139,"line_end":1139,"column_start":41,"column_end":52},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3982},"to":{"krate":0,"index":3103}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":426500,"byte_end":426511,"line_start":1166,"line_end":1166,"column_start":37,"column_end":48},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3982},"to":{"krate":0,"index":3114}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":429174,"byte_end":429185,"line_start":1238,"line_end":1238,"column_start":16,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":431587,"byte_end":431596,"line_start":1313,"line_end":1313,"column_start":6,"column_end":15},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/buffer.rs","byte_start":432974,"byte_end":432985,"line_start":1351,"line_end":1351,"column_start":67,"column_end":78},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3982},"to":{"krate":0,"index":2496}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":446826,"byte_end":446835,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":450487,"byte_end":450504,"line_start":151,"line_end":151,"column_start":6,"column_end":23},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":451825,"byte_end":451842,"line_start":187,"line_end":187,"column_start":26,"column_end":43},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4048},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":457362,"byte_end":457363,"line_start":378,"line_end":378,"column_start":41,"column_end":42},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2564},"to":{"krate":0,"index":2560}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":459605,"byte_end":459606,"line_start":454,"line_end":454,"column_start":29,"column_end":30},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2588},"to":{"krate":0,"index":2583}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460629,"byte_end":460633,"line_start":481,"line_end":481,"column_start":57,"column_end":61},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":460907,"byte_end":460911,"line_start":492,"line_end":492,"column_start":58,"column_end":62},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461147,"byte_end":461151,"line_start":501,"line_end":501,"column_start":70,"column_end":74},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461445,"byte_end":461449,"line_start":512,"line_end":512,"column_start":71,"column_end":75},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":461776,"byte_end":461781,"line_start":526,"line_end":526,"column_start":58,"column_end":63},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462114,"byte_end":462119,"line_start":538,"line_end":538,"column_start":70,"column_end":75},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462459,"byte_end":462464,"line_start":550,"line_end":550,"column_start":71,"column_end":76},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":462799,"byte_end":462804,"line_start":562,"line_end":562,"column_start":57,"column_end":62},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463123,"byte_end":463127,"line_start":575,"line_end":575,"column_start":57,"column_end":61},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463521,"byte_end":463525,"line_start":589,"line_end":589,"column_start":56,"column_end":60},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":463910,"byte_end":463914,"line_start":603,"line_end":603,"column_start":58,"column_end":62},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464308,"byte_end":464312,"line_start":617,"line_end":617,"column_start":57,"column_end":61},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":464715,"byte_end":464718,"line_start":633,"line_end":633,"column_start":56,"column_end":59},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465066,"byte_end":465069,"line_start":646,"line_end":646,"column_start":57,"column_end":60},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465415,"byte_end":465418,"line_start":659,"line_end":659,"column_start":58,"column_end":61},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":465757,"byte_end":465760,"line_start":672,"line_end":672,"column_start":57,"column_end":60},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2580}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":466208,"byte_end":466213,"line_start":691,"line_end":691,"column_start":30,"column_end":35},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2659}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":467224,"byte_end":467228,"line_start":724,"line_end":724,"column_start":30,"column_end":34},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2659}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":467338,"byte_end":467342,"line_start":730,"line_end":730,"column_start":30,"column_end":34},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2659}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":469725,"byte_end":469728,"line_start":794,"line_end":794,"column_start":30,"column_end":33},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2659}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":469946,"byte_end":469951,"line_start":806,"line_end":806,"column_start":31,"column_end":36},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":2673}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470130,"byte_end":470134,"line_start":815,"line_end":815,"column_start":31,"column_end":35},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":2673}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470328,"byte_end":470332,"line_start":826,"line_end":826,"column_start":31,"column_end":35},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":2673}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/color.rs","byte_start":470550,"byte_end":470553,"line_start":836,"line_end":836,"column_start":31,"column_end":34},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":2673}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":479166,"byte_end":479178,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506571,"byte_end":506583,"line_start":877,"line_end":877,"column_start":26,"column_end":38},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506705,"byte_end":506717,"line_start":883,"line_end":883,"column_start":31,"column_end":43},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506839,"byte_end":506851,"line_start":889,"line_end":889,"column_start":25,"column_end":37},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":506966,"byte_end":506978,"line_start":895,"line_end":895,"column_start":26,"column_end":38},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507097,"byte_end":507109,"line_start":901,"line_end":901,"column_start":28,"column_end":40},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507236,"byte_end":507248,"line_start":907,"line_end":907,"column_start":33,"column_end":45},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507375,"byte_end":507387,"line_start":913,"line_end":913,"column_start":27,"column_end":39},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507507,"byte_end":507519,"line_start":919,"line_end":919,"column_start":28,"column_end":40},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507641,"byte_end":507653,"line_start":925,"line_end":925,"column_start":28,"column_end":40},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507776,"byte_end":507788,"line_start":931,"line_end":931,"column_start":29,"column_end":41},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":507933,"byte_end":507945,"line_start":937,"line_end":937,"column_start":49,"column_end":61},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508120,"byte_end":508132,"line_start":943,"line_end":943,"column_start":50,"column_end":62},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508307,"byte_end":508319,"line_start":950,"line_end":950,"column_start":27,"column_end":39},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4421},"to":{"krate":0,"index":3103}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":508817,"byte_end":508829,"line_start":967,"line_end":967,"column_start":23,"column_end":35},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4421},"to":{"krate":0,"index":3114}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/dynimage.rs","byte_start":511242,"byte_end":511254,"line_start":1012,"line_end":1012,"column_start":18,"column_end":30},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4421},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":523415,"byte_end":523426,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":531541,"byte_end":531558,"line_start":315,"line_end":315,"column_start":28,"column_end":45},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4518},"to":{"krate":2,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":533260,"byte_end":533275,"line_start":361,"line_end":361,"column_start":6,"column_end":21},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":542509,"byte_end":542517,"line_start":606,"line_end":606,"column_start":6,"column_end":14},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":543221,"byte_end":543226,"line_start":631,"line_end":631,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3254},"to":{"krate":0,"index":3070}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548009,"byte_end":548021,"line_start":751,"line_end":751,"column_start":33,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":3070},"to":{"krate":0,"index":3084}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":548028,"byte_end":548033,"line_start":751,"line_end":751,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":3254},"to":{"krate":0,"index":3084}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550452,"byte_end":550458,"line_start":824,"line_end":824,"column_start":44,"column_end":50},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4555},"to":{"krate":2,"index":8574}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":550926,"byte_end":550932,"line_start":846,"line_end":846,"column_start":27,"column_end":33},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4555},"to":{"krate":2,"index":2871}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":553554,"byte_end":553570,"line_start":939,"line_end":939,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3103},"to":{"krate":0,"index":3114}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":561208,"byte_end":561216,"line_start":1130,"line_end":1130,"column_start":9,"column_end":17},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":562565,"byte_end":562573,"line_start":1174,"line_end":1174,"column_start":9,"column_end":17},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":563980,"byte_end":563988,"line_start":1212,"line_end":1212,"column_start":9,"column_end":17},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564804,"byte_end":564812,"line_start":1240,"line_end":1240,"column_start":19,"column_end":27},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4567},"to":{"krate":2,"index":3468}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":564963,"byte_end":564971,"line_start":1250,"line_end":1250,"column_start":22,"column_end":30},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4567},"to":{"krate":2,"index":3481}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565134,"byte_end":565147,"line_start":1260,"line_end":1260,"column_start":30,"column_end":43},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4575},"to":{"krate":0,"index":3103}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/image.rs","byte_start":565620,"byte_end":565633,"line_start":1281,"line_end":1281,"column_start":26,"column_end":39},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4575},"to":{"krate":0,"index":3114}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583090,"byte_end":583105,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":3316},"to":{"krate":0,"index":3192}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583693,"byte_end":583697,"line_start":37,"line_end":37,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3259},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583700,"byte_end":583707,"line_start":37,"line_end":37,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":362},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583710,"byte_end":583713,"line_start":37,"line_end":37,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":968},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583716,"byte_end":583726,"line_start":37,"line_end":37,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2947},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583735,"byte_end":583740,"line_start":37,"line_end":37,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2871},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":583743,"byte_end":583750,"line_start":37,"line_end":37,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":20,"index":237},"to":{"krate":0,"index":3200}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585115,"byte_end":585120,"line_start":72,"line_end":72,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3254},"to":{"krate":0,"index":3204}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585123,"byte_end":585130,"line_start":72,"line_end":72,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":237},"to":{"krate":0,"index":3204}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":585133,"byte_end":585140,"line_start":72,"line_end":72,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":20,"index":362},"to":{"krate":0,"index":3204}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586443,"byte_end":586450,"line_start":130,"line_end":130,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":20,"index":237},"to":{"krate":0,"index":3232}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":586453,"byte_end":586460,"line_start":130,"line_end":130,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":20,"index":362},"to":{"krate":0,"index":3232}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587393,"byte_end":587398,"line_start":171,"line_end":171,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":3279},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587416,"byte_end":587440,"line_start":171,"line_end":171,"column_start":54,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":3268},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587731,"byte_end":587734,"line_start":179,"line_end":179,"column_start":29,"column_end":32},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587822,"byte_end":587825,"line_start":182,"line_end":182,"column_start":29,"column_end":32},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":587915,"byte_end":587918,"line_start":185,"line_end":185,"column_start":29,"column_end":32},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588010,"byte_end":588014,"line_start":189,"line_end":189,"column_start":29,"column_end":33},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588103,"byte_end":588107,"line_start":192,"line_end":192,"column_start":29,"column_end":33},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588198,"byte_end":588202,"line_start":195,"line_end":195,"column_start":29,"column_end":33},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588295,"byte_end":588299,"line_start":199,"line_end":199,"column_start":29,"column_end":33},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588385,"byte_end":588389,"line_start":202,"line_end":202,"column_start":29,"column_end":33},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588477,"byte_end":588482,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588569,"byte_end":588574,"line_start":208,"line_end":208,"column_start":29,"column_end":34},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":3244}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588827,"byte_end":588830,"line_start":217,"line_end":217,"column_start":39,"column_end":42},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588876,"byte_end":588879,"line_start":218,"line_end":218,"column_start":39,"column_end":42},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588926,"byte_end":588929,"line_start":219,"line_end":219,"column_start":39,"column_end":42},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":4305},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":588977,"byte_end":588981,"line_start":221,"line_end":221,"column_start":39,"column_end":43},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589027,"byte_end":589031,"line_start":222,"line_end":222,"column_start":39,"column_end":43},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589078,"byte_end":589082,"line_start":223,"line_end":223,"column_start":39,"column_end":43},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":4363},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589130,"byte_end":589134,"line_start":225,"line_end":225,"column_start":39,"column_end":43},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589180,"byte_end":589185,"line_start":226,"line_end":226,"column_start":39,"column_end":44},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589232,"byte_end":589236,"line_start":228,"line_end":228,"column_start":39,"column_end":43},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4334},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589283,"byte_end":589288,"line_start":229,"line_end":229,"column_start":39,"column_end":44},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4392},"to":{"krate":0,"index":3268}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589432,"byte_end":589436,"line_start":235,"line_end":235,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3259},"to":{"krate":0,"index":3279}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.4/./src/traits.rs","byte_start":589439,"byte_end":589444,"line_start":235,"line_end":235,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2871},"to":{"krate":0,"index":3279}}]}