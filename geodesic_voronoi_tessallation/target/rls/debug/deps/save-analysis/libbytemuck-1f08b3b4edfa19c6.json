{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1","program":"/Users/samv/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=1f08b3b4edfa19c6","-C","extra-filename=-1f08b3b4edfa19c6","--out-dir","/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps","-L","dependency=/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/samv/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/samv/uiowahack/geodesic_voronoi_tessallation/target/rls/debug/deps/libbytemuck-1f08b3b4edfa19c6.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[9956572504895393796,0]},"crate_root":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src","external_crates":[{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2571568952482378191,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3381153973743375855,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[859990804154970231,0]}},{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[13406540867394126232,0]}}],"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2800,"byte_end":2801,"line_start":81,"line_end":81,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3006,"byte_end":3007,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3032,"byte_end":3033,"line_start":97,"line_end":97,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3077,"byte_end":3078,"line_start":99,"line_end":99,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3115,"byte_end":3116,"line_start":102,"line_end":102,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3155,"byte_end":3156,"line_start":105,"line_end":105,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3193,"byte_end":3194,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3235,"byte_end":3236,"line_start":111,"line_end":111,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"TransparentWrapper","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":236},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":477},{"krate":0,"index":883},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":86}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2682,"byte_end":2720,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11391,"byte_end":11430,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11432,"byte_end":11479,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11480,"byte_end":11483,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11484,"byte_end":11564,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11565,"byte_end":11639,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11640,"byte_end":11694,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11695,"byte_end":11698,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features =","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11699,"byte_end":11764,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ [\"extern_crate_alloc\"]}`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11765,"byte_end":11793,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11997,"byte_end":12005,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"fn cast_box<A, B>(Box<A>) -> Box<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11920,"byte_end":11979,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":11980,"byte_end":11989,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12467,"byte_end":12479,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"fn try_cast_box<A, B>(Box<A>) -> Result<Box<B>, (PodCastError, Box<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12119,"byte_end":12189,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12190,"byte_end":12193,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12194,"byte_end":12261,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12262,"byte_end":12265,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12266,"byte_end":12280,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12281,"byte_end":12284,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12285,"byte_end":12359,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12360,"byte_end":12376,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12377,"byte_end":12449,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12450,"byte_end":12459,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13360,"byte_end":13374,"line_start":62,"line_end":62,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"fn try_zeroed_box<T>() -> Result<Box<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":12940,"byte_end":13007,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13008,"byte_end":13011,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13012,"byte_end":13087,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13088,"byte_end":13167,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13168,"byte_end":13241,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13242,"byte_end":13279,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13280,"byte_end":13283,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13284,"byte_end":13298,"line_start":58,"line_end":58,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13299,"byte_end":13302,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13303,"byte_end":13342,"line_start":60,"line_end":60,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":13343,"byte_end":13352,"line_start":61,"line_end":61,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14499,"byte_end":14509,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"fn zeroed_box<T>() -> Box<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14434,"byte_end":14481,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14482,"byte_end":14491,"line_start":91,"line_end":91,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14801,"byte_end":14815,"line_start":103,"line_end":103,"column_start":8,"column_end":22},"name":"try_zeroed_vec","qualname":"::allocation::try_zeroed_vec","value":"fn try_zeroed_vec<T>(usize) -> Result<Vec<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Vec<T>` of length and capacity exactly equal to `length` and\n all elements zeroed.","sig":null,"attributes":[{"value":"/ Allocates a `Vec<T>` of length and capacity exactly equal to `length` and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14568,"byte_end":14645,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ all elements zeroed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14646,"byte_end":14670,"line_start":97,"line_end":97,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14671,"byte_end":14674,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14675,"byte_end":14689,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14690,"byte_end":14693,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14694,"byte_end":14773,"line_start":101,"line_end":101,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":14774,"byte_end":14793,"line_start":102,"line_end":102,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15061,"byte_end":15071,"line_start":113,"line_end":113,"column_start":8,"column_end":18},"name":"zeroed_vec","qualname":"::allocation::zeroed_vec","value":"fn zeroed_vec<T>(usize) -> Vec<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_vec`] but unwraps for you\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_vec`] but unwraps for you","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15008,"byte_end":15053,"line_start":112,"line_end":112,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15624,"byte_end":15644,"line_start":129,"line_end":129,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"fn try_zeroed_slice_box<T>(usize) -> Result<Box<[T]>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15149,"byte_end":15211,"line_start":117,"line_end":117,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15212,"byte_end":15215,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15216,"byte_end":15291,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15292,"byte_end":15371,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15372,"byte_end":15445,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15446,"byte_end":15483,"line_start":122,"line_end":122,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15484,"byte_end":15487,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15488,"byte_end":15502,"line_start":124,"line_end":124,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15503,"byte_end":15506,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15507,"byte_end":15586,"line_start":126,"line_end":126,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15587,"byte_end":15606,"line_start":127,"line_end":127,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":15607,"byte_end":15616,"line_start":128,"line_end":128,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16508,"byte_end":16524,"line_start":155,"line_end":155,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"fn zeroed_slice_box<T>(usize) -> Box<[T]> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16425,"byte_end":16500,"line_start":154,"line_end":154,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16699,"byte_end":16713,"line_start":161,"line_end":161,"column_start":8,"column_end":22},"name":"cast_slice_box","qualname":"::allocation::cast_slice_box","value":"fn cast_slice_box<A, B>(Box<[A]>) -> Box<[B]> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16610,"byte_end":16681,"line_start":159,"line_end":159,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16682,"byte_end":16691,"line_start":160,"line_end":160,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":17205,"byte_end":17223,"line_start":178,"line_end":178,"column_start":8,"column_end":26},"name":"try_cast_slice_box","qualname":"::allocation::try_cast_slice_box","value":"fn try_cast_slice_box<A, B>(Box<[A]>)\n-> Result<Box<[B]>, (PodCastError, Box<[A]>)> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Box<[T]>`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16842,"byte_end":16896,"line_start":167,"line_end":167,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16897,"byte_end":16900,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box<[T]>`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16901,"byte_end":16973,"line_start":169,"line_end":169,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16974,"byte_end":16977,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16978,"byte_end":16992,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16993,"byte_end":16996,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box<[T]>` must have the exact same","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":16997,"byte_end":17076,"line_start":173,"line_end":173,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":17077,"byte_end":17093,"line_start":174,"line_end":174,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Box<[T]>` must be the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":17094,"byte_end":17169,"line_start":175,"line_end":175,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":17170,"byte_end":17187,"line_start":176,"line_end":176,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":17188,"byte_end":17197,"line_start":177,"line_end":177,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18795,"byte_end":18803,"line_start":212,"line_end":212,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"fn cast_vec<A, B>(Vec<A>) -> Vec<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18718,"byte_end":18777,"line_start":210,"line_end":210,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18778,"byte_end":18787,"line_start":211,"line_end":211,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19358,"byte_end":19370,"line_start":228,"line_end":228,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"fn try_cast_vec<A, B>(Vec<A>) -> Result<Vec<B>, (PodCastError, Vec<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18917,"byte_end":18985,"line_start":216,"line_end":216,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18986,"byte_end":18989,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":18990,"byte_end":19057,"line_start":218,"line_end":218,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19058,"byte_end":19061,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19062,"byte_end":19076,"line_start":220,"line_end":220,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19077,"byte_end":19080,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19081,"byte_end":19155,"line_start":222,"line_end":222,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19156,"byte_end":19172,"line_start":223,"line_end":223,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Vec` must be the exact","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19173,"byte_end":19249,"line_start":224,"line_end":224,"column_start":1,"column_end":77}},{"value":"/   same.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19250,"byte_end":19261,"line_start":225,"line_end":225,"column_start":1,"column_end":12}},{"value":"/ * The start and end capacity in bytes of the `Vec` mest be the exact same.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19262,"byte_end":19340,"line_start":226,"line_end":226,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":19341,"byte_end":19350,"line_start":227,"line_end":227,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22871,"byte_end":22889,"line_start":299,"line_end":299,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"fn pod_collect_to_vec<A, B, '_>(&'_ [A]) -> Vec<B> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22270,"byte_end":22345,"line_start":283,"line_end":283,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22346,"byte_end":22349,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22350,"byte_end":22427,"line_start":285,"line_end":285,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22428,"byte_end":22431,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22432,"byte_end":22510,"line_start":287,"line_end":287,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22511,"byte_end":22514,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22515,"byte_end":22526,"line_start":289,"line_end":289,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22527,"byte_end":22549,"line_start":290,"line_end":290,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22550,"byte_end":22593,"line_start":291,"line_end":291,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22594,"byte_end":22658,"line_start":292,"line_end":292,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22659,"byte_end":22698,"line_start":293,"line_end":293,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22699,"byte_end":22767,"line_start":294,"line_end":294,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22768,"byte_end":22780,"line_start":295,"line_end":295,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22781,"byte_end":22849,"line_start":296,"line_end":296,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22850,"byte_end":22855,"line_start":297,"line_end":297,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":22856,"byte_end":22863,"line_start":298,"line_end":298,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":23521,"byte_end":23544,"line_start":319,"line_end":319,"column_start":11,"column_end":34},"name":"TransparentWrapperAlloc","qualname":"::allocation::TransparentWrapperAlloc","value":"TransparentWrapperAlloc<Inner>: TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" An extension trait for `TransparentWrapper` and alloc types.\n","sig":null,"attributes":[{"value":"/ An extension trait for `TransparentWrapper` and alloc types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":23446,"byte_end":23510,"line_start":318,"line_end":318,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":23666,"byte_end":23674,"line_start":323,"line_end":323,"column_start":6,"column_end":14},"name":"wrap_vec","qualname":"::allocation::TransparentWrapperAlloc::wrap_vec","value":"fn wrap_vec(Vec<Inner>) -> Vec<Self> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a vec of the inner type into a vec of the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the inner type into a vec of the wrapper type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":23593,"byte_end":23660,"line_start":322,"line_end":322,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":24257,"byte_end":24265,"line_start":346,"line_end":346,"column_start":6,"column_end":14},"name":"wrap_box","qualname":"::allocation::TransparentWrapperAlloc::wrap_box","value":"fn wrap_box(Box<Inner>) -> Box<Self>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a box to the inner type into a box to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the inner type into a box to the wrapper","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":24166,"byte_end":24227,"line_start":343,"line_end":343,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":24230,"byte_end":24239,"line_start":344,"line_end":344,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":24242,"byte_end":24251,"line_start":345,"line_end":345,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25163,"byte_end":25171,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"name":"peel_vec","qualname":"::allocation::TransparentWrapperAlloc::peel_vec","value":"fn peel_vec(Vec<Self>) -> Vec<Inner> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a vec of the wrapper type into a vec of the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the wrapper type into a vec of the inner type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25090,"byte_end":25157,"line_start":367,"line_end":367,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25755,"byte_end":25763,"line_start":391,"line_end":391,"column_start":6,"column_end":14},"name":"peel_box","qualname":"::allocation::TransparentWrapperAlloc::peel_box","value":"fn peel_box(Box<Self>) -> Box<Inner>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a box to the wrapper type into a box to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the wrapper type into a box to the inner","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25664,"byte_end":25725,"line_start":388,"line_end":388,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25728,"byte_end":25737,"line_start":389,"line_end":389,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":25740,"byte_end":25749,"line_start":390,"line_end":390,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29706,"byte_end":29719,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27107,"byte_end":27186,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27187,"byte_end":27190,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27191,"byte_end":27248,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27249,"byte_end":27310,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27311,"byte_end":27390,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27391,"byte_end":27464,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27465,"byte_end":27540,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27541,"byte_end":27607,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27608,"byte_end":27611,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27612,"byte_end":27691,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27692,"byte_end":27768,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27769,"byte_end":27772,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27773,"byte_end":27844,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27845,"byte_end":27914,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27915,"byte_end":27949,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27950,"byte_end":27953,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27954,"byte_end":27966,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27967,"byte_end":27970,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":27971,"byte_end":28048,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28049,"byte_end":28126,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28127,"byte_end":28198,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28199,"byte_end":28279,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28280,"byte_end":28358,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28359,"byte_end":28382,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28383,"byte_end":28386,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28387,"byte_end":28467,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28468,"byte_end":28548,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28549,"byte_end":28593,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28594,"byte_end":28597,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28598,"byte_end":28610,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28611,"byte_end":28614,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28615,"byte_end":28692,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28693,"byte_end":28771,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28772,"byte_end":28815,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28816,"byte_end":28819,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28820,"byte_end":28860,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28861,"byte_end":28908,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28909,"byte_end":28980,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":28981,"byte_end":29043,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29044,"byte_end":29124,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29125,"byte_end":29183,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29184,"byte_end":29258,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29259,"byte_end":29336,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29337,"byte_end":29417,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29418,"byte_end":29498,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29499,"byte_end":29578,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29579,"byte_end":29629,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29630,"byte_end":29688,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":102},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":534},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":29862,"byte_end":29929,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":29930,"byte_end":29975,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":117},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34703,"byte_end":34720,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30063,"byte_end":30141,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30142,"byte_end":30221,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30222,"byte_end":30302,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30303,"byte_end":30377,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30378,"byte_end":30406,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30407,"byte_end":30410,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30411,"byte_end":30489,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30490,"byte_end":30566,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30567,"byte_end":30634,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks wheter a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30635,"byte_end":30708,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30709,"byte_end":30785,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30786,"byte_end":30865,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30866,"byte_end":30943,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30944,"byte_end":30964,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30965,"byte_end":30968,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":30969,"byte_end":31049,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31050,"byte_end":31127,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31128,"byte_end":31206,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31207,"byte_end":31283,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31284,"byte_end":31359,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31360,"byte_end":31376,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31377,"byte_end":31380,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31381,"byte_end":31393,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31394,"byte_end":31397,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31398,"byte_end":31471,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31472,"byte_end":31547,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31548,"byte_end":31625,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31626,"byte_end":31698,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31699,"byte_end":31727,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31728,"byte_end":31731,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31732,"byte_end":31745,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31746,"byte_end":31749,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31750,"byte_end":31818,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31819,"byte_end":31822,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31823,"byte_end":31834,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31835,"byte_end":31883,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31884,"byte_end":31887,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31888,"byte_end":31904,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31905,"byte_end":31931,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31932,"byte_end":31949,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31950,"byte_end":31971,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31972,"byte_end":31993,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":31994,"byte_end":32015,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32016,"byte_end":32021,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32022,"byte_end":32025,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32026,"byte_end":32072,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32073,"byte_end":32097,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32098,"byte_end":32101,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32102,"byte_end":32155,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32156,"byte_end":32181,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32182,"byte_end":32216,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32217,"byte_end":32244,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32245,"byte_end":32258,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32259,"byte_end":32268,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32269,"byte_end":32274,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32275,"byte_end":32278,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32279,"byte_end":32367,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32368,"byte_end":32451,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32452,"byte_end":32540,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32541,"byte_end":32579,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32580,"byte_end":32587,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32588,"byte_end":32591,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32592,"byte_end":32651,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32652,"byte_end":32655,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32656,"byte_end":32667,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32668,"byte_end":32718,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32719,"byte_end":32737,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32738,"byte_end":32788,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32789,"byte_end":32808,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32809,"byte_end":32832,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32833,"byte_end":32856,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32857,"byte_end":32880,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32881,"byte_end":32888,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32889,"byte_end":32929,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32930,"byte_end":32978,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":32979,"byte_end":33005,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33006,"byte_end":33061,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33062,"byte_end":33089,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33090,"byte_end":33126,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33127,"byte_end":33156,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33157,"byte_end":33172,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33173,"byte_end":33184,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33185,"byte_end":33192,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33193,"byte_end":33236,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33237,"byte_end":33263,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33264,"byte_end":33267,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33268,"byte_end":33300,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33301,"byte_end":33359,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33360,"byte_end":33406,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33407,"byte_end":33410,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33411,"byte_end":33448,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33449,"byte_end":33483,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33484,"byte_end":33542,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33543,"byte_end":33572,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33573,"byte_end":33576,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33577,"byte_end":33661,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33662,"byte_end":33704,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33705,"byte_end":33731,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33732,"byte_end":33737,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33738,"byte_end":33806,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33807,"byte_end":33860,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33861,"byte_end":33899,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33900,"byte_end":33905,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33906,"byte_end":33935,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33936,"byte_end":33943,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33944,"byte_end":33947,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33948,"byte_end":33960,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33961,"byte_end":33964,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":33965,"byte_end":34040,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34041,"byte_end":34099,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34100,"byte_end":34129,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34130,"byte_end":34209,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34210,"byte_end":34288,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34289,"byte_end":34367,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34368,"byte_end":34392,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34393,"byte_end":34471,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34472,"byte_end":34533,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34534,"byte_end":34587,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34588,"byte_end":34591,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34592,"byte_end":34661,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34662,"byte_end":34685,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":118},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34983,"byte_end":34987,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34731,"byte_end":34804,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34807,"byte_end":34865,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34868,"byte_end":34897,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34900,"byte_end":34903,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34906,"byte_end":34975,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35109,"byte_end":35129,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35007,"byte_end":35085,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35088,"byte_end":35103,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35260,"byte_end":35280,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ T) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":{"krate":0,"index":119},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35237,"byte_end":35254,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35396,"byte_end":35416,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":{"krate":0,"index":119},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35381,"byte_end":35390,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35572,"byte_end":35592,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":{"krate":0,"index":119},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35557,"byte_end":35566,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":535},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35916,"byte_end":35928,"line_start":178,"line_end":178,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35865,"byte_end":35913,"line_start":177,"line_end":177,"column_start":3,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":537},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35929,"byte_end":35948,"line_start":178,"line_end":178,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":538},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36203,"byte_end":36220,"line_start":183,"line_end":183,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":534},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35953,"byte_end":36026,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36029,"byte_end":36100,"line_start":180,"line_end":180,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36103,"byte_end":36171,"line_start":181,"line_end":181,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36174,"byte_end":36200,"line_start":182,"line_end":182,"column_start":3,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":534},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35844,"byte_end":35860,"line_start":176,"line_end":176,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":538}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35692,"byte_end":35772,"line_start":173,"line_end":173,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35773,"byte_end":35783,"line_start":174,"line_end":174,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36312,"byte_end":36315,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10273},"children":[],"decl_id":{"krate":1,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36554,"byte_end":36558,"line_start":196,"line_end":196,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3155},"children":[],"decl_id":{"krate":1,"index":3157},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36907,"byte_end":36921,"line_start":209,"line_end":209,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36654,"byte_end":36688,"line_start":201,"line_end":201,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36689,"byte_end":36692,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36693,"byte_end":36707,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36708,"byte_end":36711,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36712,"byte_end":36761,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36762,"byte_end":36830,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36831,"byte_end":36889,"line_start":207,"line_end":207,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36890,"byte_end":36899,"line_start":208,"line_end":208,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":136},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37510,"byte_end":37528,"line_start":229,"line_end":229,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8]) -> Result<&mut T, CheckedCastError>\nwhere T: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37249,"byte_end":37291,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37292,"byte_end":37295,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37296,"byte_end":37310,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37311,"byte_end":37314,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37315,"byte_end":37364,"line_start":225,"line_end":225,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37365,"byte_end":37433,"line_start":226,"line_end":226,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37434,"byte_end":37492,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37493,"byte_end":37502,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38084,"byte_end":38106,"line_start":247,"line_end":247,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, CheckedCastError>\nwhere T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37879,"byte_end":37926,"line_start":241,"line_end":241,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37927,"byte_end":37930,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37931,"byte_end":37945,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":37946,"byte_end":38007,"line_start":244,"line_end":244,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38008,"byte_end":38066,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38067,"byte_end":38076,"line_start":246,"line_end":246,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38856,"byte_end":38864,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38404,"byte_end":38433,"line_start":259,"line_end":259,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38434,"byte_end":38437,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38438,"byte_end":38515,"line_start":261,"line_end":261,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38516,"byte_end":38595,"line_start":262,"line_end":262,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38596,"byte_end":38674,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38675,"byte_end":38694,"line_start":264,"line_end":264,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38695,"byte_end":38698,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38699,"byte_end":38713,"line_start":266,"line_end":266,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38714,"byte_end":38717,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38718,"byte_end":38773,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38774,"byte_end":38838,"line_start":269,"line_end":269,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":38839,"byte_end":38848,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39408,"byte_end":39420,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&B, CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39150,"byte_end":39186,"line_start":283,"line_end":283,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39187,"byte_end":39190,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39191,"byte_end":39205,"line_start":285,"line_end":285,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39206,"byte_end":39209,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39210,"byte_end":39262,"line_start":287,"line_end":287,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39263,"byte_end":39325,"line_start":288,"line_end":288,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39326,"byte_end":39390,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39391,"byte_end":39400,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39862,"byte_end":39874,"line_start":307,"line_end":307,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&mut B, CheckedCastError> where\nA: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39756,"byte_end":39800,"line_start":303,"line_end":303,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39801,"byte_end":39804,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39805,"byte_end":39844,"line_start":305,"line_end":305,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":39845,"byte_end":39854,"line_start":306,"line_end":306,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41117,"byte_end":41131,"line_start":340,"line_end":340,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&[B], CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40252,"byte_end":40325,"line_start":322,"line_end":322,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40326,"byte_end":40329,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40330,"byte_end":40389,"line_start":324,"line_end":324,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40390,"byte_end":40459,"line_start":325,"line_end":325,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40460,"byte_end":40463,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40464,"byte_end":40478,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40479,"byte_end":40482,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40483,"byte_end":40563,"line_start":329,"line_end":329,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40564,"byte_end":40584,"line_start":330,"line_end":330,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40585,"byte_end":40662,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40663,"byte_end":40739,"line_start":332,"line_end":332,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40740,"byte_end":40820,"line_start":333,"line_end":333,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40821,"byte_end":40845,"line_start":334,"line_end":334,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40846,"byte_end":40971,"line_start":335,"line_end":335,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40972,"byte_end":40992,"line_start":336,"line_end":336,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":40993,"byte_end":41073,"line_start":337,"line_end":337,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41074,"byte_end":41099,"line_start":338,"line_end":338,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41100,"byte_end":41109,"line_start":339,"line_end":339,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41659,"byte_end":41677,"line_start":359,"line_end":359,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A])\n-> Result<&mut [B], CheckedCastError> where A: NoUninit + AnyBitPattern,\nB: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41509,"byte_end":41581,"line_start":354,"line_end":354,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41582,"byte_end":41594,"line_start":355,"line_end":355,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41595,"byte_end":41598,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41599,"byte_end":41641,"line_start":357,"line_end":357,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":41642,"byte_end":41651,"line_start":358,"line_end":358,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42233,"byte_end":42243,"line_start":382,"line_end":382,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42103,"byte_end":42137,"line_start":376,"line_end":376,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42138,"byte_end":42141,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42142,"byte_end":42155,"line_start":378,"line_end":378,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42156,"byte_end":42159,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42160,"byte_end":42215,"line_start":380,"line_end":380,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42216,"byte_end":42225,"line_start":381,"line_end":381,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42530,"byte_end":42544,"line_start":395,"line_end":395,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42388,"byte_end":42430,"line_start":389,"line_end":389,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42431,"byte_end":42434,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42435,"byte_end":42448,"line_start":391,"line_end":391,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42449,"byte_end":42452,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42453,"byte_end":42512,"line_start":393,"line_end":393,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42513,"byte_end":42522,"line_start":394,"line_end":394,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42860,"byte_end":42878,"line_start":407,"line_end":407,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42716,"byte_end":42753,"line_start":402,"line_end":402,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42754,"byte_end":42757,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42758,"byte_end":42771,"line_start":404,"line_end":404,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42772,"byte_end":42842,"line_start":405,"line_end":405,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":42843,"byte_end":42852,"line_start":406,"line_end":406,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":163},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43181,"byte_end":43185,"line_start":420,"line_end":420,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43042,"byte_end":43063,"line_start":414,"line_end":414,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43064,"byte_end":43067,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43068,"byte_end":43081,"line_start":416,"line_end":416,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43082,"byte_end":43085,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43086,"byte_end":43163,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43164,"byte_end":43173,"line_start":419,"line_end":419,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43452,"byte_end":43460,"line_start":433,"line_end":433,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43326,"byte_end":43358,"line_start":427,"line_end":427,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43359,"byte_end":43362,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43363,"byte_end":43376,"line_start":429,"line_end":429,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43377,"byte_end":43380,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43381,"byte_end":43434,"line_start":431,"line_end":431,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43435,"byte_end":43444,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43776,"byte_end":43784,"line_start":451,"line_end":451,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43658,"byte_end":43682,"line_start":445,"line_end":445,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43683,"byte_end":43686,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43687,"byte_end":43700,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43701,"byte_end":43704,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43705,"byte_end":43758,"line_start":449,"line_end":449,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43759,"byte_end":43768,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44059,"byte_end":44069,"line_start":464,"line_end":464,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &[B] where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43935,"byte_end":43963,"line_start":458,"line_end":458,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43964,"byte_end":43967,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43968,"byte_end":43981,"line_start":460,"line_end":460,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43982,"byte_end":43985,"line_start":461,"line_end":461,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":43986,"byte_end":44041,"line_start":462,"line_end":462,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44042,"byte_end":44051,"line_start":463,"line_end":463,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44364,"byte_end":44378,"line_start":477,"line_end":477,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44228,"byte_end":44264,"line_start":471,"line_end":471,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44265,"byte_end":44268,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44269,"byte_end":44282,"line_start":473,"line_end":473,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44283,"byte_end":44286,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44287,"byte_end":44346,"line_start":475,"line_end":475,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":44347,"byte_end":44356,"line_start":476,"line_end":476,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":238},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57727,"byte_end":57735,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":239}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57269,"byte_end":57320,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57321,"byte_end":57355,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57356,"byte_end":57359,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57360,"byte_end":57423,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57424,"byte_end":57480,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57481,"byte_end":57484,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57485,"byte_end":57498,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57499,"byte_end":57502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57503,"byte_end":57544,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57545,"byte_end":57592,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57593,"byte_end":57666,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57667,"byte_end":57709,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58015,"byte_end":58021,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57747,"byte_end":57787,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57790,"byte_end":57793,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57796,"byte_end":57871,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57874,"byte_end":57952,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57955,"byte_end":57997,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58000,"byte_end":58009,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":323},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73861,"byte_end":73877,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73631,"byte_end":73697,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73698,"byte_end":73733,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73734,"byte_end":73737,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73738,"byte_end":73751,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73752,"byte_end":73755,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73756,"byte_end":73815,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73816,"byte_end":73843,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76446,"byte_end":76449,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74552,"byte_end":74590,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74591,"byte_end":74594,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74595,"byte_end":74672,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74673,"byte_end":74752,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74753,"byte_end":74833,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74834,"byte_end":74852,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74853,"byte_end":74856,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74857,"byte_end":74933,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74934,"byte_end":75005,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75006,"byte_end":75080,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75081,"byte_end":75099,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75100,"byte_end":75103,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75104,"byte_end":75117,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75118,"byte_end":75121,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75122,"byte_end":75162,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75163,"byte_end":75210,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75211,"byte_end":75289,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75290,"byte_end":75318,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75319,"byte_end":75395,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75396,"byte_end":75474,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75475,"byte_end":75555,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75556,"byte_end":75586,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75587,"byte_end":75641,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75642,"byte_end":75717,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75718,"byte_end":75797,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75798,"byte_end":75842,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75843,"byte_end":75923,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75924,"byte_end":75982,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":75983,"byte_end":76057,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76058,"byte_end":76135,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76136,"byte_end":76216,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76217,"byte_end":76297,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76298,"byte_end":76377,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76378,"byte_end":76428,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":375},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90755,"byte_end":90766,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90429,"byte_end":90485,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90486,"byte_end":90521,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90522,"byte_end":90525,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90526,"byte_end":90539,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90540,"byte_end":90543,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90544,"byte_end":90608,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90609,"byte_end":90687,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90688,"byte_end":90737,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94615,"byte_end":94623,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91531,"byte_end":91609,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91610,"byte_end":91613,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91614,"byte_end":91671,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91672,"byte_end":91751,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91752,"byte_end":91826,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91827,"byte_end":91906,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91907,"byte_end":91987,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":91988,"byte_end":92068,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92069,"byte_end":92146,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92147,"byte_end":92162,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92163,"byte_end":92166,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92167,"byte_end":92241,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92242,"byte_end":92321,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92322,"byte_end":92402,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92403,"byte_end":92471,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92472,"byte_end":92524,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92525,"byte_end":92528,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92529,"byte_end":92541,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92542,"byte_end":92545,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92546,"byte_end":92623,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92624,"byte_end":92696,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92697,"byte_end":92768,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92769,"byte_end":92849,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92850,"byte_end":92928,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92929,"byte_end":92952,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92953,"byte_end":92956,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92957,"byte_end":92969,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92970,"byte_end":92973,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":92974,"byte_end":93040,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93041,"byte_end":93095,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93096,"byte_end":93171,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93172,"byte_end":93236,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93237,"byte_end":93240,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93241,"byte_end":93281,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93282,"byte_end":93329,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93330,"byte_end":93406,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93407,"byte_end":93485,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93486,"byte_end":93566,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93567,"byte_end":93597,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93598,"byte_end":93655,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93656,"byte_end":93729,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93730,"byte_end":93809,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93810,"byte_end":93854,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93855,"byte_end":93906,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93907,"byte_end":93952,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":93953,"byte_end":94033,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94034,"byte_end":94092,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94093,"byte_end":94167,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94168,"byte_end":94245,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94246,"byte_end":94326,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94327,"byte_end":94407,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94408,"byte_end":94487,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94488,"byte_end":94538,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94539,"byte_end":94597,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":450},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98295,"byte_end":98305,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95327,"byte_end":95355,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95356,"byte_end":95359,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95360,"byte_end":95435,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95436,"byte_end":95502,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95503,"byte_end":95547,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95548,"byte_end":95551,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95552,"byte_end":95631,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95632,"byte_end":95712,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95713,"byte_end":95775,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95776,"byte_end":95779,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95780,"byte_end":95858,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95859,"byte_end":95934,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95935,"byte_end":95963,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95964,"byte_end":95967,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95968,"byte_end":95981,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95982,"byte_end":95985,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95986,"byte_end":95993,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":95994,"byte_end":96025,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96026,"byte_end":96041,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96042,"byte_end":96086,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96087,"byte_end":96101,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96102,"byte_end":96114,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96115,"byte_end":96127,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96128,"byte_end":96140,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96141,"byte_end":96153,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96154,"byte_end":96166,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96167,"byte_end":96172,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96173,"byte_end":96209,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96210,"byte_end":96230,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96231,"byte_end":96272,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96273,"byte_end":96314,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96315,"byte_end":96320,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96321,"byte_end":96375,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96376,"byte_end":96419,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96420,"byte_end":96461,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96462,"byte_end":96469,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96470,"byte_end":96482,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96483,"byte_end":96486,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96487,"byte_end":96560,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96561,"byte_end":96574,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96575,"byte_end":96578,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96579,"byte_end":96656,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96657,"byte_end":96736,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96737,"byte_end":96791,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96792,"byte_end":96795,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96796,"byte_end":96876,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96877,"byte_end":96899,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96900,"byte_end":96903,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96904,"byte_end":96984,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":96985,"byte_end":97041,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97042,"byte_end":97045,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97046,"byte_end":97121,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97122,"byte_end":97194,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97195,"byte_end":97264,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97265,"byte_end":97268,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97269,"byte_end":97347,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97348,"byte_end":97424,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97425,"byte_end":97436,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97437,"byte_end":97440,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97441,"byte_end":97513,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97514,"byte_end":97592,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97593,"byte_end":97669,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97670,"byte_end":97749,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97750,"byte_end":97753,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97754,"byte_end":97826,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97827,"byte_end":97892,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97893,"byte_end":97896,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97897,"byte_end":97974,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97975,"byte_end":97997,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":97998,"byte_end":98001,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98002,"byte_end":98081,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98082,"byte_end":98115,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98116,"byte_end":98119,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98120,"byte_end":98197,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98198,"byte_end":98277,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":451},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99130,"byte_end":99133,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98326,"byte_end":98397,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98400,"byte_end":98409,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98412,"byte_end":98415,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98418,"byte_end":98490,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98493,"byte_end":98559,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98562,"byte_end":98630,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98633,"byte_end":98675,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98678,"byte_end":98681,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98684,"byte_end":98761,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98764,"byte_end":98786,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98789,"byte_end":98792,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98795,"byte_end":98864,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98867,"byte_end":98943,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98946,"byte_end":99015,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99018,"byte_end":99056,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99059,"byte_end":99062,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99065,"byte_end":99122,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":452},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99224,"byte_end":99233,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99150,"byte_end":99215,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":453},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99323,"byte_end":99332,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99249,"byte_end":99314,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99997,"byte_end":100009,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99348,"byte_end":99416,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99419,"byte_end":99482,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99485,"byte_end":99488,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99491,"byte_end":99565,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99568,"byte_end":99635,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99638,"byte_end":99706,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99709,"byte_end":99712,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99715,"byte_end":99727,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99730,"byte_end":99733,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99736,"byte_end":99809,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99812,"byte_end":99858,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99861,"byte_end":99864,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99867,"byte_end":99941,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99944,"byte_end":99979,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":99982,"byte_end":99991,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101532,"byte_end":101544,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":100848,"byte_end":100923,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":100926,"byte_end":101002,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101005,"byte_end":101017,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101020,"byte_end":101023,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101026,"byte_end":101100,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101103,"byte_end":101170,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101173,"byte_end":101241,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101244,"byte_end":101247,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101250,"byte_end":101262,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101265,"byte_end":101268,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101271,"byte_end":101344,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101347,"byte_end":101393,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101396,"byte_end":101399,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101402,"byte_end":101476,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101479,"byte_end":101514,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":101517,"byte_end":101526,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":463},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111678,"byte_end":111696,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108589,"byte_end":108664,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108665,"byte_end":108694,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108695,"byte_end":108698,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108699,"byte_end":108771,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108772,"byte_end":108850,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108851,"byte_end":108929,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":108930,"byte_end":109006,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109007,"byte_end":109083,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109084,"byte_end":109132,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109133,"byte_end":109136,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109137,"byte_end":109149,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109150,"byte_end":109153,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109154,"byte_end":109223,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109224,"byte_end":109227,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109228,"byte_end":109299,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109300,"byte_end":109303,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109304,"byte_end":109376,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109377,"byte_end":109439,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109440,"byte_end":109519,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109520,"byte_end":109599,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109600,"byte_end":109630,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109631,"byte_end":109634,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109635,"byte_end":109715,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109716,"byte_end":109777,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109778,"byte_end":109781,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109782,"byte_end":109856,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109857,"byte_end":109872,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109873,"byte_end":109951,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":109952,"byte_end":110030,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110031,"byte_end":110034,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110035,"byte_end":110106,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110107,"byte_end":110110,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110111,"byte_end":110125,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110126,"byte_end":110129,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110130,"byte_end":110209,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110210,"byte_end":110289,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110290,"byte_end":110365,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110366,"byte_end":110435,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110436,"byte_end":110473,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110474,"byte_end":110477,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110478,"byte_end":110556,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110557,"byte_end":110625,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110626,"byte_end":110629,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110630,"byte_end":110644,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110645,"byte_end":110648,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110649,"byte_end":110661,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110662,"byte_end":110665,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110666,"byte_end":110673,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110674,"byte_end":110711,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110712,"byte_end":110736,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110737,"byte_end":110766,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110767,"byte_end":110770,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110771,"byte_end":110795,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110796,"byte_end":110829,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110830,"byte_end":110833,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110834,"byte_end":110897,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110898,"byte_end":110901,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110902,"byte_end":110961,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":110962,"byte_end":111000,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111001,"byte_end":111061,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111062,"byte_end":111065,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111066,"byte_end":111093,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111094,"byte_end":111140,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111141,"byte_end":111213,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111214,"byte_end":111217,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111218,"byte_end":111275,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111276,"byte_end":111283,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111284,"byte_end":111287,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111288,"byte_end":111327,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111328,"byte_end":111331,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111332,"byte_end":111339,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111340,"byte_end":111377,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111378,"byte_end":111381,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111382,"byte_end":111406,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111407,"byte_end":111432,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111433,"byte_end":111436,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111437,"byte_end":111495,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111496,"byte_end":111499,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111500,"byte_end":111543,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111544,"byte_end":111577,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111578,"byte_end":111581,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111582,"byte_end":111612,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111613,"byte_end":111652,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111653,"byte_end":111660,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111783,"byte_end":111787,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111716,"byte_end":111765,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111768,"byte_end":111777,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112099,"byte_end":112107,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref<'_>(&'_ Inner) -> &Self","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":111996,"byte_end":112069,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112072,"byte_end":112081,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112084,"byte_end":112093,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112797,"byte_end":112805,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut<'_>(&'_ mut Inner) -> &mut Self","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112678,"byte_end":112755,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112758,"byte_end":112779,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":112782,"byte_end":112791,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":113469,"byte_end":113479,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice<'_>(&'_ [Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":113380,"byte_end":113451,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":113454,"byte_end":113463,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114023,"byte_end":114037,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut<'_>(&'_ mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":113912,"byte_end":113985,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":113988,"byte_end":114005,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114008,"byte_end":114017,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114543,"byte_end":114547,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114476,"byte_end":114525,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114528,"byte_end":114537,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114752,"byte_end":114760,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref<'_>(&'_ Self) -> &Inner","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114649,"byte_end":114722,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114725,"byte_end":114734,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":114737,"byte_end":114746,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":115450,"byte_end":115458,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut<'_>(&'_ mut Self) -> &mut Inner","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":115331,"byte_end":115407,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":115410,"byte_end":115432,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":115435,"byte_end":115444,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116122,"byte_end":116132,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice<'_>(&'_ [Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116033,"byte_end":116104,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116107,"byte_end":116116,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116677,"byte_end":116691,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut<'_>(&'_ mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116566,"byte_end":116641,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116644,"byte_end":116659,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":116662,"byte_end":116671,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":884},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3666,"byte_end":3706,"line_start":124,"line_end":124,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3543,"byte_end":3615,"line_start":122,"line_end":122,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3618,"byte_end":3663,"line_start":123,"line_end":123,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":886},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3892,"byte_end":3916,"line_start":128,"line_end":128,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3710,"byte_end":3778,"line_start":125,"line_end":125,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3781,"byte_end":3856,"line_start":126,"line_end":126,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3859,"byte_end":3889,"line_start":127,"line_end":127,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":888},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4137,"byte_end":4149,"line_start":132,"line_end":132,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3920,"byte_end":3995,"line_start":129,"line_end":129,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3998,"byte_end":4071,"line_start":130,"line_end":130,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4074,"byte_end":4134,"line_start":131,"line_end":131,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":890},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4440,"byte_end":4457,"line_start":139,"line_end":139,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4153,"byte_end":4227,"line_start":133,"line_end":133,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4230,"byte_end":4261,"line_start":134,"line_end":134,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4264,"byte_end":4267,"line_start":135,"line_end":135,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4270,"byte_end":4346,"line_start":136,"line_end":136,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4349,"byte_end":4424,"line_start":137,"line_end":137,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4427,"byte_end":4437,"line_start":138,"line_end":138,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":883},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3526,"byte_end":3538,"line_start":121,"line_end":121,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3392,"byte_end":3465,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4544,"byte_end":4547,"line_start":143,"line_end":143,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10273},"children":[],"decl_id":{"krate":1,"index":10274},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":480},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4932,"byte_end":4940,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T, '_>(&'_ T) -> &[u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4723,"byte_end":4757,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4758,"byte_end":4761,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4762,"byte_end":4840,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4841,"byte_end":4914,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4915,"byte_end":4924,"line_start":154,"line_end":154,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":482},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5227,"byte_end":5239,"line_start":164,"line_end":164,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T, '_>(&'_ mut T) -> &mut [u8] where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5010,"byte_end":5052,"line_start":159,"line_end":159,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5053,"byte_end":5056,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5057,"byte_end":5135,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5136,"byte_end":5209,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5210,"byte_end":5219,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":484},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5467,"byte_end":5477,"line_start":174,"line_end":174,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5337,"byte_end":5371,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5372,"byte_end":5375,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5376,"byte_end":5389,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5390,"byte_end":5393,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5394,"byte_end":5449,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5450,"byte_end":5459,"line_start":173,"line_end":173,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5696,"byte_end":5710,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &mut T where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5554,"byte_end":5596,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5597,"byte_end":5600,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5601,"byte_end":5614,"line_start":180,"line_end":180,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5615,"byte_end":5618,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5619,"byte_end":5678,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5679,"byte_end":5688,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5956,"byte_end":5978,"line_start":193,"line_end":193,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5810,"byte_end":5857,"line_start":188,"line_end":188,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5858,"byte_end":5861,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5862,"byte_end":5876,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5877,"byte_end":5938,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5939,"byte_end":5948,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6245,"byte_end":6263,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6101,"byte_end":6138,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6139,"byte_end":6142,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6143,"byte_end":6156,"line_start":201,"line_end":201,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6157,"byte_end":6227,"line_start":202,"line_end":202,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6228,"byte_end":6237,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6549,"byte_end":6563,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6355,"byte_end":6389,"line_start":208,"line_end":208,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6390,"byte_end":6393,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6394,"byte_end":6408,"line_start":210,"line_end":210,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6409,"byte_end":6412,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6413,"byte_end":6462,"line_start":212,"line_end":212,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6463,"byte_end":6531,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6532,"byte_end":6541,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6868,"byte_end":6886,"line_start":226,"line_end":226,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8]) -> Result<&mut T, PodCastError>\nwhere T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6666,"byte_end":6708,"line_start":219,"line_end":219,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6709,"byte_end":6712,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6713,"byte_end":6727,"line_start":221,"line_end":221,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6728,"byte_end":6731,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6732,"byte_end":6781,"line_start":223,"line_end":223,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6782,"byte_end":6850,"line_start":224,"line_end":224,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6851,"byte_end":6860,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7156,"byte_end":7160,"line_start":238,"line_end":238,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7017,"byte_end":7038,"line_start":232,"line_end":232,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7039,"byte_end":7042,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7043,"byte_end":7056,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7057,"byte_end":7060,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7061,"byte_end":7138,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7139,"byte_end":7148,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7365,"byte_end":7373,"line_start":248,"line_end":248,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7239,"byte_end":7271,"line_start":242,"line_end":242,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7272,"byte_end":7275,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7276,"byte_end":7289,"line_start":244,"line_end":244,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7290,"byte_end":7293,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7294,"byte_end":7347,"line_start":246,"line_end":246,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7348,"byte_end":7357,"line_start":247,"line_end":247,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7616,"byte_end":7624,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7498,"byte_end":7522,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7523,"byte_end":7526,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7527,"byte_end":7540,"line_start":256,"line_end":256,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7541,"byte_end":7544,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7545,"byte_end":7598,"line_start":258,"line_end":258,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7599,"byte_end":7608,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7833,"byte_end":7843,"line_start":270,"line_end":270,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &[B] where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7709,"byte_end":7737,"line_start":264,"line_end":264,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7738,"byte_end":7741,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7742,"byte_end":7755,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7756,"byte_end":7759,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7760,"byte_end":7815,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7816,"byte_end":7825,"line_start":269,"line_end":269,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8070,"byte_end":8084,"line_start":280,"line_end":280,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7934,"byte_end":7970,"line_start":274,"line_end":274,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7971,"byte_end":7974,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7975,"byte_end":7988,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7989,"byte_end":7992,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7993,"byte_end":8052,"line_start":278,"line_end":278,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8053,"byte_end":8062,"line_start":279,"line_end":279,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8301,"byte_end":8313,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U, '_>(&'_ [T]) -> (&[T], &[U], &[T]) where T: NoUninit,\nU: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8226,"byte_end":8283,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8284,"byte_end":8293,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8502,"byte_end":8518,"line_start":299,"line_end":299,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U, '_>(&'_ mut [T]) -> (&mut [T], &mut [U], &mut [T])\nwhere T: NoUninit + AnyBitPattern, U: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8423,"byte_end":8484,"line_start":297,"line_end":297,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8485,"byte_end":8494,"line_start":298,"line_end":298,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9069,"byte_end":9077,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8682,"byte_end":8711,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8712,"byte_end":8715,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8716,"byte_end":8793,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8794,"byte_end":8873,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8874,"byte_end":8952,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8953,"byte_end":8972,"line_start":313,"line_end":313,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8973,"byte_end":8976,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8977,"byte_end":8991,"line_start":315,"line_end":315,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8992,"byte_end":8995,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8996,"byte_end":9051,"line_start":317,"line_end":317,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9052,"byte_end":9061,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9380,"byte_end":9392,"line_start":332,"line_end":332,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&B, PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9187,"byte_end":9223,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9224,"byte_end":9227,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9228,"byte_end":9242,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9243,"byte_end":9246,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9247,"byte_end":9299,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9300,"byte_end":9362,"line_start":330,"line_end":330,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9363,"byte_end":9372,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9610,"byte_end":9622,"line_start":342,"line_end":342,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9508,"byte_end":9552,"line_start":338,"line_end":338,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9553,"byte_end":9556,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9557,"byte_end":9592,"line_start":340,"line_end":340,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9593,"byte_end":9602,"line_start":341,"line_end":341,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10538,"byte_end":10552,"line_start":367,"line_end":367,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&[B], PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9780,"byte_end":9853,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9854,"byte_end":9857,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9858,"byte_end":9917,"line_start":353,"line_end":353,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9918,"byte_end":9987,"line_start":354,"line_end":354,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9988,"byte_end":9991,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9992,"byte_end":10006,"line_start":356,"line_end":356,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10007,"byte_end":10010,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10011,"byte_end":10091,"line_start":358,"line_end":358,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10092,"byte_end":10112,"line_start":359,"line_end":359,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10113,"byte_end":10190,"line_start":360,"line_end":360,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10191,"byte_end":10267,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10268,"byte_end":10348,"line_start":362,"line_end":362,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10349,"byte_end":10373,"line_start":363,"line_end":363,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10374,"byte_end":10499,"line_start":364,"line_end":364,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10500,"byte_end":10520,"line_start":365,"line_end":365,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10521,"byte_end":10530,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10820,"byte_end":10838,"line_start":378,"line_end":378,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A]) -> Result<&mut [B], PodCastError>\nwhere A: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10674,"byte_end":10746,"line_start":373,"line_end":373,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10747,"byte_end":10759,"line_start":374,"line_end":374,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10760,"byte_end":10763,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10764,"byte_end":10802,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10803,"byte_end":10812,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":26660,"byte_end":26661,"line_start":412,"line_end":412,"column_start":74,"column_end":75},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29800,"byte_end":29801,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35213,"byte_end":35214,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36288,"byte_end":36304,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36530,"byte_end":36546,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58662,"byte_end":58670,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58794,"byte_end":58805,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58837,"byte_end":58850,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58892,"byte_end":58904,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72554,"byte_end":72561,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72629,"byte_end":72635,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72703,"byte_end":72710,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72778,"byte_end":72785,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72853,"byte_end":72859,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72927,"byte_end":72934,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73617,"byte_end":73623,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73922,"byte_end":73931,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73968,"byte_end":73978,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74015,"byte_end":74025,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74062,"byte_end":74072,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74109,"byte_end":74120,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74157,"byte_end":74169,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74206,"byte_end":74215,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74252,"byte_end":74262,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74299,"byte_end":74309,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74346,"byte_end":74356,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74393,"byte_end":74404,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74441,"byte_end":74453,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74494,"byte_end":74501,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76917,"byte_end":76925,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77225,"byte_end":77236,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77263,"byte_end":77276,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77308,"byte_end":77320,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89427,"byte_end":89434,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89497,"byte_end":89503,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89566,"byte_end":89573,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89636,"byte_end":89643,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89706,"byte_end":89712,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89775,"byte_end":89782,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90415,"byte_end":90421,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90834,"byte_end":90843,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90875,"byte_end":90885,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90917,"byte_end":90927,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90959,"byte_end":90969,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91001,"byte_end":91012,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91044,"byte_end":91056,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91088,"byte_end":91097,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91129,"byte_end":91139,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91171,"byte_end":91181,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91213,"byte_end":91223,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91255,"byte_end":91266,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91298,"byte_end":91310,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94685,"byte_end":94686,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94784,"byte_end":94793,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94822,"byte_end":94831,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94860,"byte_end":94870,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94899,"byte_end":94909,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94938,"byte_end":94948,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94977,"byte_end":94987,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95016,"byte_end":95026,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95055,"byte_end":95065,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95094,"byte_end":95105,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95134,"byte_end":95145,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95174,"byte_end":95186,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95215,"byte_end":95227,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":117183,"byte_end":117191,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2729,"byte_end":2739,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":102}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":23563,"byte_end":23581,"line_start":320,"line_end":320,"column_start":3,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":463},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/allocation.rs","byte_start":26660,"byte_end":26661,"line_start":412,"line_end":412,"column_start":74,"column_end":75},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":88},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29723,"byte_end":29731,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29734,"byte_end":29739,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3254},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29742,"byte_end":29746,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":29800,"byte_end":29801,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":100},"to":{"krate":0,"index":98}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":34722,"byte_end":34726,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":117}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":35213,"byte_end":35214,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":121},"to":{"krate":0,"index":117}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36288,"byte_end":36304,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":534},"to":{"krate":1,"index":10273}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":36530,"byte_end":36546,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":534},"to":{"krate":1,"index":3155}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57737,"byte_end":57742,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3254},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58662,"byte_end":58670,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":27943},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58794,"byte_end":58805,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":3267},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58837,"byte_end":58850,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":38743},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":58892,"byte_end":58904,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":32188},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72554,"byte_end":72561,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":53332},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72629,"byte_end":72635,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":53341},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72703,"byte_end":72710,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":53352},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72778,"byte_end":72785,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":53361},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72853,"byte_end":72859,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":53372},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":72927,"byte_end":72934,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":53387},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73617,"byte_end":73623,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":47367},"to":{"krate":0,"index":238}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73879,"byte_end":73884,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3254},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73922,"byte_end":73931,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":24592},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":73968,"byte_end":73978,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":24626},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74015,"byte_end":74025,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":24660},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74062,"byte_end":74072,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":24694},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74109,"byte_end":74120,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":24728},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74157,"byte_end":74169,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":24762},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74206,"byte_end":74215,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":24388},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74252,"byte_end":74262,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":24422},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74299,"byte_end":74309,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":24456},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74346,"byte_end":74356,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":24490},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74393,"byte_end":74404,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":24524},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74441,"byte_end":74453,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":24558},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":74494,"byte_end":74501,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":2381},"to":{"krate":0,"index":323}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76451,"byte_end":76459,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76462,"byte_end":76466,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":76917,"byte_end":76925,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":27943},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77225,"byte_end":77236,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":3267},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77263,"byte_end":77276,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":38743},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":77308,"byte_end":77320,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":32188},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89427,"byte_end":89434,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":53332},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89497,"byte_end":89503,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":53341},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89566,"byte_end":89573,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":53352},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89636,"byte_end":89643,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":53361},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89706,"byte_end":89712,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":53372},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":89775,"byte_end":89782,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":53387},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90415,"byte_end":90421,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":47367},"to":{"krate":0,"index":341}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90768,"byte_end":90784,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":323},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90787,"byte_end":90791,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90834,"byte_end":90843,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":24592},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90875,"byte_end":90885,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":24626},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90917,"byte_end":90927,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":24660},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":90959,"byte_end":90969,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":24694},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91001,"byte_end":91012,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":24728},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91044,"byte_end":91056,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":24762},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91088,"byte_end":91097,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":24388},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91129,"byte_end":91139,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":24422},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91171,"byte_end":91181,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":24456},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91213,"byte_end":91223,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":24490},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91255,"byte_end":91266,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":24524},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":91298,"byte_end":91310,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":24558},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94625,"byte_end":94630,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3254},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94633,"byte_end":94637,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94685,"byte_end":94686,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":432},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94784,"byte_end":94793,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":24388},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94822,"byte_end":94831,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":1,"index":24592},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94860,"byte_end":94870,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":24422},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94899,"byte_end":94909,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":24626},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94938,"byte_end":94948,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":24456},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":94977,"byte_end":94987,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":24660},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95016,"byte_end":95026,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":24490},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95055,"byte_end":95065,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":24694},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95094,"byte_end":95105,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":24524},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95134,"byte_end":95145,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":24728},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95174,"byte_end":95186,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":24558},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":95215,"byte_end":95227,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":24762},"to":{"krate":0,"index":430}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":98307,"byte_end":98311,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3259},"to":{"krate":0,"index":450}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":117183,"byte_end":117191,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":1,"index":27943},"to":{"krate":0,"index":463}},{"span":{"file_name":"/Users/samv/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":883},"to":{"krate":1,"index":10273}}]}